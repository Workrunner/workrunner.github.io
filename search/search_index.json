{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Workrunner Wiki!\n\n\nWorkrunner is a platform for easy-to-use and easy-to-design business applications. It's built on a highly advanced BPM engine to manage any kind of business processes. Each application is defined as a business process that manages your work for you. All process data is isolated by your domain and secured safely.\n\n\nWorkrunner User's Guide\n\n\nUser's guide section gives you a quick introduction to Workrunner and its basic features.\n\n\nWorkrunner Administrator's Guide\n\n\nInformation for advanced users can be found in our Advanced User Guide, which contains details on the Workrunner management and development.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-workrunner-wiki", 
            "text": "Workrunner is a platform for easy-to-use and easy-to-design business applications. It's built on a highly advanced BPM engine to manage any kind of business processes. Each application is defined as a business process that manages your work for you. All process data is isolated by your domain and secured safely.", 
            "title": "Welcome to Workrunner Wiki!"
        }, 
        {
            "location": "/#workrunner-users-guide", 
            "text": "User's guide section gives you a quick introduction to Workrunner and its basic features.", 
            "title": "Workrunner User's Guide"
        }, 
        {
            "location": "/#workrunner-administrators-guide", 
            "text": "Information for advanced users can be found in our Advanced User Guide, which contains details on the Workrunner management and development.", 
            "title": "Workrunner Administrator's Guide"
        }, 
        {
            "location": "/ug/user_guide/", 
            "text": "This guide covers features and functions that are available to Workrunner users and administrators. \n\n\n\n\nGetting Started\n\n\nBusiness Process\n\n\nUser Interface\n\n\nHome Page\n\n\nUser Panel\n\n\nActivity Stream\n\n\nLabels\n\n\nWork List\n\n\nWorklist\n\n\nWorklist Tasks\n\n\nDelegation\n\n\nSpecific Task\n\n\nFor a Time Period\n\n\nBy the Admin\n\n\n\n\n\n\nSearch\n\n\nHistory\n\n\n\n\n\n\nFolders\n\n\nMarket", 
            "title": "Overview"
        }, 
        {
            "location": "/ug/getting_started/", 
            "text": "What is Workrunner and how does it work?\n\n\nWorkrunner is designed to manage your business processes and is a complete business process management solution that provides a dynamic, easy-to-use environment for all type of processes. With the Market Store of Workrunner, you can instantly start to use existing processes designed by other users. Can't find the process you're looking for? Design your own! It's that easy.\n\n\nWhat is a process?\n\n\nPut simply, a process is a way of doing your work. It's a structured way of organizing activities or tasks that produce a specific service or product.\n\n\nFor example: When your computer is malfunctioning you may call a technical person on the phone and wait for him to come over, or you may start Workrunner's Incident Request process that is automatically assigned to the relevant technical personnel instantly, and the status of your request is traced in real time.\n\n\nUsing a clearly-defined process flow saves you from chaos while doing your work. All of your \ndaily business activities\n can ultimately be defined as a process .\n\n\nStarting to use Workrunner\n\n\nThe first step is to \nregister your domain\n. Domains are registered free of charge and for an unlimited period of time. Depending on your business needs, you can then install pre-builded apps from Workrunner market store to manage various processes or you can design your own process(es) if needed.\n\n\nBecause most business processes need organizational data, after you have registered, Workrunner automatically starts a new \"Organization Designer\" process and assigns a task to you related to your organizational structure. This task is optional, so you can open it and build your organization hierarchy straight away, or skip it for now and define it later.\n\n\nAll processes work just like an email client;\n\n\nWhen you start a process, Workrunner assigns next tasks to people in your organization. When they complete the task, the process moves to the next step if required. Some processes may be started automatically by the system. For example reminding you of a customer's birthday every year.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ug/getting_started/#what-is-workrunner-and-how-does-it-work", 
            "text": "Workrunner is designed to manage your business processes and is a complete business process management solution that provides a dynamic, easy-to-use environment for all type of processes. With the Market Store of Workrunner, you can instantly start to use existing processes designed by other users. Can't find the process you're looking for? Design your own! It's that easy.", 
            "title": "What is Workrunner and how does it work?"
        }, 
        {
            "location": "/ug/getting_started/#what-is-a-process", 
            "text": "Put simply, a process is a way of doing your work. It's a structured way of organizing activities or tasks that produce a specific service or product.  For example: When your computer is malfunctioning you may call a technical person on the phone and wait for him to come over, or you may start Workrunner's Incident Request process that is automatically assigned to the relevant technical personnel instantly, and the status of your request is traced in real time.  Using a clearly-defined process flow saves you from chaos while doing your work. All of your  daily business activities  can ultimately be defined as a process .", 
            "title": "What is a process?"
        }, 
        {
            "location": "/ug/getting_started/#starting-to-use-workrunner", 
            "text": "The first step is to  register your domain . Domains are registered free of charge and for an unlimited period of time. Depending on your business needs, you can then install pre-builded apps from Workrunner market store to manage various processes or you can design your own process(es) if needed.  Because most business processes need organizational data, after you have registered, Workrunner automatically starts a new \"Organization Designer\" process and assigns a task to you related to your organizational structure. This task is optional, so you can open it and build your organization hierarchy straight away, or skip it for now and define it later.  All processes work just like an email client;  When you start a process, Workrunner assigns next tasks to people in your organization. When they complete the task, the process moves to the next step if required. Some processes may be started automatically by the system. For example reminding you of a customer's birthday every year.", 
            "title": "Starting to use Workrunner"
        }, 
        {
            "location": "/ug/business_process/", 
            "text": "Defining a Business Process\n\n\nA \nbusiness process\n, also referred to as a business method, can be understood as a grouping together of related, structured actions or tasks resulting in a specific service or product (serving a particular purpose) for a particular customer or customers, either internal or external. By using a flowchart, a process can be visualized as a sequence of activities with interleaving decision points. By using a process matrix, it can be viewed as a sequence of activities with relevant rules based on data in the process.\n\n\nThere are three types of business processes:\n\n\n\n\nManagement processes\n are the processes that govern the operation of a system. Typical management processes include \"corporate governance\" and \"strategic management\".\n\n\nOperational processes\n are processes that constitute the core business and create the primary value stream. Typical operational processes are purchasing, manufacturing, advertising and marketing, and sales.\n\n\nSupporting processes\n are those which support the core processes. Examples include accounting, recruitment, call center, technical support.\n\n\n\n\nA business process begins with a target and ends, ideally, with the achievement of the business objective. Organizations which are process-oriented seek to remove the barriers of rigid structural departments and attempt to avoid functional silos.\n\n\nA business process can be further broken down into several sub-processes, each of which has its own attributes, but also contribute to achieving the overall goal. The analysis of business processes typically includes the mapping of processes and sub-processes down to the activity level.\n\n\nBusiness processes are designed to \nadd value for the customer\n and should not include unnecessary activities. The outcome of a well designed business process is \nincreased effectiveness\n (value for the customer) and \nincreased efficiency\n (less costs for the company).\n\n\nBusiness processes can be modeled through a large number of methods and techniques. For instance, the Business Process Modeling Notation is a Business Process Modeling technique that can be used for drawing business processes in a workflow.\n\n\nThe Process Chain\n\n\nBusiness processes contain a set of sequential sub-processes or tasks, each with alternative paths depending on certain conditions, performed to achieve a given objective or produce a given output. Each process requires one or more forms of input. The input and output may be received from, or sent to other business processes, other organizational units, or internal or external stakeholders.\n\n\nBusiness processes are designed to be operated by one or more business functional units, and emphasize the importance of the \u201cprocess chain\u201d rather than the individual units.\n\n\nIn general, the various tasks of a business process can be performed in one of two ways\n\n\n\n\nManually\n\n\nElectronically; by means of business data processing systems.\n\n\n\n\nTypically, some process tasks will be done by hand, while some will be computer-based, and these tasks may be sequenced in many ways. In other words, the data and information that are being handled through the process may pass through manual or computer tasks in any given order.", 
            "title": "Business Process"
        }, 
        {
            "location": "/ug/business_process/#defining-a-business-process", 
            "text": "A  business process , also referred to as a business method, can be understood as a grouping together of related, structured actions or tasks resulting in a specific service or product (serving a particular purpose) for a particular customer or customers, either internal or external. By using a flowchart, a process can be visualized as a sequence of activities with interleaving decision points. By using a process matrix, it can be viewed as a sequence of activities with relevant rules based on data in the process.  There are three types of business processes:   Management processes  are the processes that govern the operation of a system. Typical management processes include \"corporate governance\" and \"strategic management\".  Operational processes  are processes that constitute the core business and create the primary value stream. Typical operational processes are purchasing, manufacturing, advertising and marketing, and sales.  Supporting processes  are those which support the core processes. Examples include accounting, recruitment, call center, technical support.   A business process begins with a target and ends, ideally, with the achievement of the business objective. Organizations which are process-oriented seek to remove the barriers of rigid structural departments and attempt to avoid functional silos.  A business process can be further broken down into several sub-processes, each of which has its own attributes, but also contribute to achieving the overall goal. The analysis of business processes typically includes the mapping of processes and sub-processes down to the activity level.  Business processes are designed to  add value for the customer  and should not include unnecessary activities. The outcome of a well designed business process is  increased effectiveness  (value for the customer) and  increased efficiency  (less costs for the company).  Business processes can be modeled through a large number of methods and techniques. For instance, the Business Process Modeling Notation is a Business Process Modeling technique that can be used for drawing business processes in a workflow.", 
            "title": "Defining a Business Process"
        }, 
        {
            "location": "/ug/business_process/#the-process-chain", 
            "text": "Business processes contain a set of sequential sub-processes or tasks, each with alternative paths depending on certain conditions, performed to achieve a given objective or produce a given output. Each process requires one or more forms of input. The input and output may be received from, or sent to other business processes, other organizational units, or internal or external stakeholders.  Business processes are designed to be operated by one or more business functional units, and emphasize the importance of the \u201cprocess chain\u201d rather than the individual units.  In general, the various tasks of a business process can be performed in one of two ways   Manually  Electronically; by means of business data processing systems.   Typically, some process tasks will be done by hand, while some will be computer-based, and these tasks may be sequenced in many ways. In other words, the data and information that are being handled through the process may pass through manual or computer tasks in any given order.", 
            "title": "The Process Chain"
        }, 
        {
            "location": "/ug/home_page/", 
            "text": "The home page is Workrunner's main page and user interface, listing the tasks that are currently assigned to you. The interface supports all modern browsers (IE, Firefox, Chrome, Opera) and is optimized for all mobile devices with JavaScript capabilities. \n\n\nThe home page is consisted of three parts. \n\n\n\n\nUser panel\n on the top bar.\n\n\nThe body consists of \nactivity stream\n, \nlabels\n, \ncalendar\n, \nadministration\n and \nmarket\n.\n\n\nWorklist\n on the right side of home page.\n\n\n\n\nMain UI:", 
            "title": "Home Page"
        }, 
        {
            "location": "/ug/user_panel/", 
            "text": "User panel place is found at the top-right side of the screen, to carry out user-specific actions like changing your password, program language or configuring system notifications. Click on user name, a drop-down menu will appear in the interface. In the menu, you may find links to My Profile, Send Feedback and Log Out.\n\n\n\n\nMy Profile\n\n\nMy profil is a short description of user information. My profil is happened from basic information section, preferences section and logon methods section.\n\n\nBasic Information\n\n\nBasic information step is managed identity information of users.\n\n\nDisplay Name\n\nDisplay name is users mail address or any name to show on users panel.\n\n\nName\n\nName of user.\n\n\nSurname\n\nSurname of user.\n\n\n\n\nPreferences\n\n\nPreferences section is used to design image, e-mail address, language and themes features.\n\n\n\n\nImage\n\nAdd any image to show a picture beside your comments, actions etc. in the activities stream on the task screen.\n\n\ne-Mail Address\n\ne-mail address of user.\n\n\nLanguage\n\nYou can change user language in the Workrunner. Users will see language and same time language cultural on the brackets in there. Language cultural options will help to use to users for them language specific formatting like numbers, dates etc.\n\n\nThemes\n\nThemes option provide to change color style of user interface.\n\n\nColors options are;\n\n\n\n\nDefault\n\n\nClean\n\n\nBlue\n\n\nSun\n\n\nBlocks \n\n\n\n\nYou can learn how to change user profile preference settings by watching this video:\n\n\n\n\n\nLogon Methods\n\nLogon methods is managed to set password process and login into Workrunner using a external authentication process. \n\n\n\n\nSet Password\n\n\n\n\nClick Set Password or New Logon button.\n\n\nEnter your password.\n\n\nEnter your password for confirmation.\n\n\nClick Set Password button.\n\n\n\n\nAdd New Logon\n\n\n\n\nClick Set Password or New Logon button.\n\n\nClick any logon.\n\n\n\n\n\n\nYou can learn how to change your password by watching this video:\n\n\n\n\n\nSend Feedback\n\n\nProvides a feedback form to send notifications about Workrunner. Your feedback is valuable to us and all negative or positive feedbacks are considered carefully. We constantly strive to improve our services based on your feedback.\n\n\n\n\nLog Out\n\n\nLets user log off from the system securely. All of the stored cookies are removed from the system and the user is redirected to the log in page.", 
            "title": "User Panel"
        }, 
        {
            "location": "/ug/user_panel/#my-profile", 
            "text": "My profil is a short description of user information. My profil is happened from basic information section, preferences section and logon methods section.", 
            "title": "My Profile"
        }, 
        {
            "location": "/ug/user_panel/#basic-information", 
            "text": "Basic information step is managed identity information of users.  Display Name \nDisplay name is users mail address or any name to show on users panel.  Name \nName of user.  Surname \nSurname of user.", 
            "title": "Basic Information"
        }, 
        {
            "location": "/ug/user_panel/#preferences", 
            "text": "Preferences section is used to design image, e-mail address, language and themes features.   Image \nAdd any image to show a picture beside your comments, actions etc. in the activities stream on the task screen.  e-Mail Address \ne-mail address of user.  Language \nYou can change user language in the Workrunner. Users will see language and same time language cultural on the brackets in there. Language cultural options will help to use to users for them language specific formatting like numbers, dates etc.  Themes \nThemes option provide to change color style of user interface.  Colors options are;   Default  Clean  Blue  Sun  Blocks    You can learn how to change user profile preference settings by watching this video:   Logon Methods \nLogon methods is managed to set password process and login into Workrunner using a external authentication process.    Set Password   Click Set Password or New Logon button.  Enter your password.  Enter your password for confirmation.  Click Set Password button.   Add New Logon   Click Set Password or New Logon button.  Click any logon.    You can learn how to change your password by watching this video:", 
            "title": "Preferences"
        }, 
        {
            "location": "/ug/user_panel/#send-feedback", 
            "text": "Provides a feedback form to send notifications about Workrunner. Your feedback is valuable to us and all negative or positive feedbacks are considered carefully. We constantly strive to improve our services based on your feedback.", 
            "title": "Send Feedback"
        }, 
        {
            "location": "/ug/user_panel/#log-out", 
            "text": "Lets user log off from the system securely. All of the stored cookies are removed from the system and the user is redirected to the log in page.", 
            "title": "Log Out"
        }, 
        {
            "location": "/ug/activity_stream/", 
            "text": "An activity stream is a list of recent activities performed by an user, on an Workrunner. Activity stream is unique for each user in the system and users can't see other users activity stream list. Also you can sent message to other users in the Workrunner with activity stream.\n\n\n\n\nAdd comment in to message field.\n\n\n\n\n\n\n\n\nSymbol\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n\n\nIt is used to import files or document in to message.\n\n\n\n\n\n\n\n\nIt is used to add link in to message.\n\n\n\n\n\n\n\n\nShare To\n\nThis field is used for choosing that sent message to user, group or unit. \n\n\nSubmit\n\nSubmit is send action button. \n\n\nCancel\n\nCancel is canceled action button. \n\n\nWhen you sent message to your collaborator, your collaborator will see your message in to her/him activity stream page.\n\n\nImport Options\n\nYou can import files in to message box to using different options.\n\n\n \n\n\n\n\nMy computer, you can use to import files from your computer in to Workrunner.\n\n\nCamera, you can take a photo using your computer camera and attaching this photo in to message box.  \n\n\nGoogle drive, you can use to import files from your google drive account in to Workrunner.\n\n\nOne drive, you can use to import files from your one drive account in to Workrunner.\n\n\nOffice 365, you can use to import files from your office 365 account in to Workrunner.\n\n\n\n\nActivity Heartbeat\n\nYou can follow your Workrunner activities and the total system activities in activity heartbeat diagram.\n\n\n\n\n\n\nYellow line is your's activities.\n\n\nRed line is total system's activities.", 
            "title": "Activity Stream"
        }, 
        {
            "location": "/ug/labels/", 
            "text": "You can use labels to categorize your tasks. Labels are like folders but additionally, you can apply multiple labels to a task. You can also;\n\n\n\n\nSelect a label from left side of home page to see all tasks with that label.\n\n\nSearch for all tasks with a label.\n\n\n\n\n \n\n\nWorkrunner defines 6 simple labels to make an easy-to-manage task list.\n\n\nInbox\n\nAll new tasks are automatically tagged with Inbox label. You can remove label from task if you want to hide it from inbox list.\n\n\nImportant\n\nTasks moved by the user are listed in the important tag. \n\n\nAll Waiting\n\nAll tasks which require your action to continue process are automatically tagged with All Waiting label.\n\n\nWatched\n\nAll tasks which are followed by you. You can look your tasks. \n\n\nSent\n\nAll the tasks which were started by you or assigned to you and waiting for an action to advance.\n\n\nAll\n\nLists all the tasks assigned to you regardless of their state.\n\n\nThese labels are predefined, and they cannot removed or changed, but you can add your own labels as needed.\n\n\nCreating a New Label\n\n\nTo create a new label in your label list;\n\n\n\n\nSelect label then you will see your label name with \"undefined\" end of label list, click on there.\n\n\nType name of the new label on displayed form, then click \nOK\n to close it.\n\n\nYou can select a parent label to move under an existing label. This is optional.\n\n\n\n\n \n\n\nAssigning a Label to a Task\n\n\nSelect or open any task from list to display label toolbar.\n\n\n\n\nSelect \nLabel\n button to display label list\u00df\n\n\nSelect one or more label and click to apply.\n\n\n\n\nMoving a Task to a Label\n\n\nTo move a task from list to another label;\n\n\n\n\nSelect or open any task from list to display label toolbar.\n\n\nSelect \nMove\n button to display label list.\n\n\nSelect label name from drop down list and click apply.", 
            "title": "Labels"
        }, 
        {
            "location": "/ug/labels/#creating-a-new-label", 
            "text": "To create a new label in your label list;   Select label then you will see your label name with \"undefined\" end of label list, click on there.  Type name of the new label on displayed form, then click  OK  to close it.  You can select a parent label to move under an existing label. This is optional.", 
            "title": "Creating a New Label"
        }, 
        {
            "location": "/ug/labels/#assigning-a-label-to-a-task", 
            "text": "Select or open any task from list to display label toolbar.   Select  Label  button to display label list\u00df  Select one or more label and click to apply.", 
            "title": "Assigning a Label to a Task"
        }, 
        {
            "location": "/ug/labels/#moving-a-task-to-a-label", 
            "text": "To move a task from list to another label;   Select or open any task from list to display label toolbar.  Select  Move  button to display label list.  Select label name from drop down list and click apply.", 
            "title": "Moving a Task to a Label"
        }, 
        {
            "location": "/ug/worklist/", 
            "text": "Work list is a list of to-do tasks while running a business process. For example approving an expense form is a task for manager or resolving a reported technical problem is a task for service desk.\n\n\nTool bar, work list tool bar and filter bar are managed to worklist. \n\n\nTool Bar\n\n\nTool bar is allowing the user to select a variety of functions.\n\n\n\n\nRefresh\n\nRenews your work list.\n\n\nSearch\n\n\nSearches\n your tasks.\n\n\nUser Panel\n\nSee your profil information in \nuser panel\n option.\n\n\nSupport\n\nFinds to solve for your program problem in \nsupport\n option.\n\n\nWork List Tool Bar\n\n\nTasks are listed and to follow in the work list tool bar. \n\n\n\n\nTask Name\n\nWhat the task is about and instructions of what must be done to complete the task. You can open the task by clicking on task name.\n\n\nFrom\n\nWho has sent the task to you. Some tasks are started automatically and this field may be empty.\n\n\nStarted At\n\nWhen the task is started. Will be updated.\n\n\nDeadline\n\nDeadline date of task if set. When deadline date passes Workrunner automatically close the task and advance.\n\n\nFolder\n\n\nFolder\n name of task. Beginner task is created from inside process in the folder.\n\n\n#\n\nTrack number of task. Each started process gets an incremental number for tracking if needed. You can open more detailed history of task by click on track number.\n\n\nPaging\n\n\nSelects your \ntask\n list and decide to interval row.\n\n\nPrevious Page and Next Page\n\nSelects your old and new tasks pages.\n\n\n\n\nFilter\n\nFilter option is listed tasks in the work list. Tasks name are separated from each other under the filter, also task count is written near to task name. When you click on task name under the filter, related tasks are listed in the work list bar.", 
            "title": "Worklist"
        }, 
        {
            "location": "/ug/worklist/#tool-bar", 
            "text": "Tool bar is allowing the user to select a variety of functions.   Refresh \nRenews your work list.  Search  Searches  your tasks.  User Panel \nSee your profil information in  user panel  option.  Support \nFinds to solve for your program problem in  support  option.", 
            "title": "Tool Bar"
        }, 
        {
            "location": "/ug/worklist/#work-list-tool-bar", 
            "text": "Tasks are listed and to follow in the work list tool bar.    Task Name \nWhat the task is about and instructions of what must be done to complete the task. You can open the task by clicking on task name.  From \nWho has sent the task to you. Some tasks are started automatically and this field may be empty.  Started At \nWhen the task is started. Will be updated.  Deadline \nDeadline date of task if set. When deadline date passes Workrunner automatically close the task and advance.  Folder  Folder  name of task. Beginner task is created from inside process in the folder.  # \nTrack number of task. Each started process gets an incremental number for tracking if needed. You can open more detailed history of task by click on track number.", 
            "title": "Work List Tool Bar"
        }, 
        {
            "location": "/ug/worklist/#paging", 
            "text": "Selects your  task  list and decide to interval row.  Previous Page and Next Page \nSelects your old and new tasks pages.   Filter \nFilter option is listed tasks in the work list. Tasks name are separated from each other under the filter, also task count is written near to task name. When you click on task name under the filter, related tasks are listed in the work list bar.", 
            "title": "Paging"
        }, 
        {
            "location": "/ug/worklist_tasks/", 
            "text": "Task Toolbar\n\n\nTask toolbar page organize tasks action in Workrunner, you can manage and \ndelegate\n tasks in this page. Task toolbar stable actions are close,print, add, remove labels and forward.\n\n\n\n\n\n\nClose is used leave task without save.\n\n\nMove to button is used a task from list to another label\n\n\nLabel as button is used to select or open any task from list to display label toolbar.\n\n\nPrint is used to print task. \n\n\nHistory button is used to arrive history information of task.\n\n\nForward button is used to delegate task to user, group or unit.\n\n\n\n\n\n\nSave button and send to approval button are created when \nprocess\n is designed.\nLocked Tasks\n\n\nLocked tasks locks task to selected user in Workrunner. Some of tasks may be sent to more than one person in your organization, and when you open the task you may see a locked form. A locked form is only for previewing the task, and cannot be unlocked until lock time is expired, or the task is closed without taking any other action, by the user who have locked the form.", 
            "title": "Worklist Tasks"
        }, 
        {
            "location": "/ug/worklist_tasks/#task-toolbar", 
            "text": "Task toolbar page organize tasks action in Workrunner, you can manage and  delegate  tasks in this page. Task toolbar stable actions are close,print, add, remove labels and forward.    Close is used leave task without save.  Move to button is used a task from list to another label  Label as button is used to select or open any task from list to display label toolbar.  Print is used to print task.   History button is used to arrive history information of task.  Forward button is used to delegate task to user, group or unit.    Save button and send to approval button are created when  process  is designed.\nLocked Tasks  Locked tasks locks task to selected user in Workrunner. Some of tasks may be sent to more than one person in your organization, and when you open the task you may see a locked form. A locked form is only for previewing the task, and cannot be unlocked until lock time is expired, or the task is closed without taking any other action, by the user who have locked the form.", 
            "title": "Task Toolbar"
        }, 
        {
            "location": "/ug/specific_task/", 
            "text": "In some situations like when you are too busy with some urgent task and have no time to deal with your waiting tasks or when you are out of the office to do some other work such as meeting a client or when you went on leave; you may want to delegate someone else in the office to take care of your tasks. In Workrunner, there are several ways to delegate your tasks to another person depending on your choice.\n\n\nWhen you delegate someone for specific task(s), the assigned person becomes responsible only for the specified task(s).\n\n\nBy the User\n\n\nIf you have something urgent and you know you can\u2019t make time for the tasks that assigned to you, open the related task window and you will see the \nForward\n button in the navigation as shown below in the picture with three options;\n\n\n\n\nRecently Used\n\nYou can see last selected in there.\n\n\nOrganization\n\nWhen clicked on the \norganization\n text box a pop up window appears and also when you click on the plus you will see department name and when you click on plus the near to department then you will see users name or users position.\n\n\nSearch Results\n\nIf you cannot find the user or users you need, you can type her/his name to search for it or you can just click on the search results button to look for it.\n\n\nAfter this when you click OK button, the person you selected will be assigned to the task you wanted to.\n\n\nYou can learn how to forward a task by watching this video :", 
            "title": "Specific Task"
        }, 
        {
            "location": "/ug/specific_task/#by-the-user", 
            "text": "If you have something urgent and you know you can\u2019t make time for the tasks that assigned to you, open the related task window and you will see the  Forward  button in the navigation as shown below in the picture with three options;   Recently Used \nYou can see last selected in there.  Organization \nWhen clicked on the  organization  text box a pop up window appears and also when you click on the plus you will see department name and when you click on plus the near to department then you will see users name or users position.  Search Results \nIf you cannot find the user or users you need, you can type her/his name to search for it or you can just click on the search results button to look for it.  After this when you click OK button, the person you selected will be assigned to the task you wanted to.  You can learn how to forward a task by watching this video :", 
            "title": "By the User"
        }, 
        {
            "location": "/ug/time_period/", 
            "text": "If you will be out of the office for a period of time, let\u2019s say for a week or month, you might need to make sure that someone should be assigned to your possible forthcoming tasks. To achieve this go to your calendar by clicking on\nthe \nMy Calendar\n link on the left hand side menu.\n\n\n  \n\n\nOn your calendar page switch to the preferred view out of Month, Week or Day by clicking on it from the page navigation. Then on the calendar, select the time interval that the person will be delegated for. You can do this in two ways, let\u2019s say we are in the monthly view:\n\n\n\n\nFirst one is clicking on a day and selecting the delegate from the menu as we have done before and then by clicking the \nAdd New\n button on the pop-up. After this, clicking on the right end of the delegation and dragging it along the x axis will stretch it in the steps of one day. In the Week and Day views you need to click the bottom side and drag it along the y axis.\n\n\n\n\n \n\n  \n\n\n\n\nSecond one is clicking on the start point of the decided interval and then dragging to the end point. After this selection, you only need to select the delegate and to press \nAdd New\n button. \n\n\nYou can always extend or shorten the delegation time after the creation using the first option described above.\n\n\n\n\n\n\nYou can learn how to temporarily delegate your worklist to your colleague by watching this video:", 
            "title": "For a Time Period"
        }, 
        {
            "location": "/ug/by_admin/", 
            "text": "As similar to the previous one when you are busy doing some other works but now if you are not able to delegate someone else in your place or you forgot doing it before leaving, you can ask your admin to do it for you. As the admin user, go to the \nadministration\n page by clicking the button shown in the picture;\n\n\n\n\nand on the Administration page, click on the \nSearch Work Item\n.", 
            "title": "By Admin"
        }, 
        {
            "location": "/ug/search/", 
            "text": "You can use the search options to find the items you need. At the top bar, there is a search field that allows you to search the selected container for items that match a specified \nsearch\n keyword.\n\n\n\n\nWorkrunner system gives users various search options. There are:\n\n\nTerms\n\nTwo types of search term option is available.\n\n\n\n\nA Single Term is a single word such as \u201c purchase\u201d or \u201corder\u201d.\n\n\nA Phrase is a group of words surrounded by double quotes such as \"purchase order\".\n\n\n\n\nFields\n\nYou can search any field by typing the field name followed by a colon \n:\n and then the term you are looking for.\n\n\n\n\n\n\nIf you want to find the document entitled \"Purchase Order\" which contains the text \"order\", you can enter: \n\n\ntitle:\u201dPurchase Order\u201d AND text:go\n or \ntitle:\u201dPurchase Order\u201d AND order\n\n\n\n\n\n\nThe field is only valid for the term that it directly precedes, so the query\n\n\ntitle:invoice approval information\n \n\nwill only find \"purchase\" in the title field. It will find \"approval\" and \"information\" in the default field.\n\n\n\n\n\n\nWildcard Searches\n\nWorkrunner system supports single and multiple character wildcard searches within single terms (not within phrase queries).\n\n\nTo perform a single character wildcard search use the \n?\n symbol.\n\n\nTo perform a multiple character wildcard search use the \n*\n symbol.\n\n\n\n\n\n\nThe single character wildcard search looks for terms that match that with the single character replaced. For example, to search for \"invoice\" or \"expense\" you can use the search:\n\n\ninvo?ce\n\n\n\n\n\n\n\n\n\nMultiple character wildcard searches looks for 0 or more characters. For example, to search for expense or expenses you can use the search:\n\n\nexpense*\n\n\n\n\n\n\n\n\n\nYou can also use the wildcard searches in the middle of a term.\n\n\nexp*ense\n\n\n\n\n\n\n\n\n\nNote: You cannot use a \n*\n or \n?\n symbol as the first character of a search.\n\n\nFuzzy Searches\n\n\nWorkrunner system supports fuzzy searches. To do a fuzzy search use the tilde, \n~\n, symbol at the end of a single word Term.\n\n\n\n\n\n\nTo search for a term similar in spelling to \"expense\" use the fuzzy search:\n\n\nexpense~\n\n\n\n\n\n\n\n\n\nThe value is between 0 and 1, with a value closer to 1 only terms with a higher similarity will be matched. For example:\n\n\nexpense~0,8\n\n\n\n\n\n\n\n\n\nThe default that is used if the parameter is not given is 0.5.\n\n\nProximity Searches\n\nWorkrunner system supports finding words are a within a specific distance away. To do a proximity search use the tilde, \n~\n, symbol at the end of a Phrase. For example to search for a \"form\" and \"expense\" within 10 words of each other in a document use the search:\n\n\n    \u201cexpense form\u201d~10\n\n\n\n\n\nRange Searches\n\nRange Queries allow one to match documents whose field(s) values are between the lower and upper bound specified by the Range Query.\n\n\n\n\nRange Queries can be inclusive or exclusive of the upper and lower bounds. Sorting is done lexicographically.\nMod_date:[300201 TO 300501]\n\n\n\n\n\n\n\n\n\nThis will find documents whose mod_date fields have values between 300201 and 30050, inclusive.\n\n\n\n\nNote that Range Queries are not reserved for date fields. You could also use range queries with non-date fields:\nTitle:{Document TO Invoice}\n\n\n\n\n\n\n\n\n\nThis will find all documents whose titles are between Document and Invoice, but not including Document and Invoice.\n\n\nInclusive range queries are denoted by square brackets. Exclusive range queries are denoted by curly brackets.\n\n\nBoosting a Term\n\nWorkrunner system provides the relevance level of matching documents based on the terms found. To boost a term use the caret, \n^\n, symbol with a boost factor (a number) at the end of the term you are searching. The higher the boost factor, the more relevant the term will be.\n\n\n\n\nBoosting allows you to control the relevance of a document by boosting its term. For example, if you are searching for\nexpense form\n\n\n\n\n\n\n\n\n\nand you want the term \"expense\" to be more relevant boost it using the \n^\n symbol along with the boost factor next to the term. You would type:\n\n\n    expense^4 form\n\n\n\n\n\n\n\nThis will make documents with the term expense appear more relevant. You can also boost Phrase Terms as in the example:\n \u201cexpense form\u201d^4\n\n\n\n\n\n\n\n\n\nBy default, the boost factor is 1. Although the boost factor must be positive, it can be less than 1.\n\n\nBoolean Operators\n\nBoolean operators allow terms to be combined through logic operators. Workrunnersystem supports \nAND\n, \n+\n, \nOR\n, \nNOT\n and \n-\n as Boolean operators(Note: Boolean operators must be \nALL CAPS\n).\n\n\nThe \nOR\n operator is the default conjunction operator. This means that if there is no Boolean operator between two terms, the \nOR\n operator is used. The \nOR\n operator links two terms and finds a matching document if either of the terms exist in a document. This is equivalent to a union using sets. The symbol || can be used in place of the word \nOR\n.\n\n\n\n\nTo search for documents that contain either \"expense form\" or just \"expense\" use the query:\n\n\n\u201cexpense form\u201d expense\n or \n\u201cexpense form\u201d OR expense\n\n\n\n\nAND operator\n\nThe \nAND\n operator matches documents where both terms exist anywhere in the text of a single document. This is equivalent to an intersection using sets. The symbol \n can be used in place of the word \nAND\n.\n\n\nTo search for documents that contain \"Expense form\" and \"Invoice form\" use the query:\n\n\n \u201cexpense form\u201d AND \u201cInvoice form\u201d\n\n\n\n\n\n+ operator\n\nThe \n+\n or required operator requires that the term after the \n+\n symbol exist somewhere in a the field of a single document.\n\n\nTo search for documents that must contain \"expense\" and may contain \"form\" use the query:\n\n\n  +expense form\n\n\n\n\n\nNOT operator\n\nThe \nNOT\n operator excludes documents that contain the term after \nNOT\n. This is equivalent to a difference using sets. The symbol ! can be used in place of the word \nNOT\n.\n\n\n\n\n\n\nTo search for documents that contain\"purchase order\" but not \"expense form\" use the query:\n\n\n\u201cPurchase order\u201d NOT \u201cexpense form\u201d\n\n\n\n\n\n\n\n\n\nThe \nNOT\n operator cannot be used with just one term. For example, the following search will return no results:\n\n\nNOT\u201dpurchase order\u201d\n\n\n\n\n\n\n\n\n\nThe \n-\n or prohibit operator excludes documents that contain the term after the \n-\n symbol.\n\n\n\n\n\n\nTo search for documents that contain \u201cPurchase order\u201d but not \"\"expense form\" use the query:\n\n\n\u201cPurchase order\u201d - \u201cexpense form\u201d\n\n\nGrouping\n\nWorkrunner system supports using parentheses to group clauses to form sub queries. This can be very useful if you want to control the boolean logic for a query.\n\n\nTo search for either \"expense\" or \"purchase\" and \"inbox\" use the query:\n\n\n(expense OR purchase) AND inbox\n\n\n\n\n\nField Grouping\n\nWorkrunner system supports using parentheses to group multiple clauses to a single field. To search for a title that contains both the word \"expense\" and the phrase \"purchase order\" use the query:\n\n\ntitle:(+expense+\u201dpurchase order\u201d)\n\n\n\n\n\nEscaping Special Characters\n\nWorkrunner system  supports escaping special characters that are part of the query syntax. The current list special characters are\n\n\n+ - \n || ! ( ) { } [ ] ^ \n ~ * ? : \\\n\n\nTo escape these character use the  before the character. For example to search for \n(2+2):4\n use the query:\n\n\n\\(2\\+2\\)\\:4", 
            "title": "Search"
        }, 
        {
            "location": "/ug/history/", 
            "text": "Workrunner BPMS keeps all records of transactions during the execution of processes. Within History, all details, such as who started work, when the next steps are started and finished, what is being done, who owns the current step and so on, are stored as records.\n\n\nHistory information can be displayed as both in a graphical layout based on a process map and in a classic table order. Since history information contains process times, it enables analysis of areas in which process improvements can be identified after a certain point of use.\n\n\n\n\nTask Name\n\nName of task. When you click on the blue task name, this task form will open on the new page.\n\n\nStarted At\n\nStart date of task. \n\n\nFinished At\n\nFinish date of task. \n\n\nAssigned To\n\nPerson, department or group of responsible.\n\n\nStatus\n\nState of task. \n\n\n\n\n\n\n\n\nSymbol\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n\n\nStart task\n\n\n\n\n\n\n\n\nCompleted task\n\n\n\n\n\n\n\n\nWaiting task\n\n\n\n\n\n\n\n\nIs Deadlined?\n\nAutomatically completed date of task.\n\n\nCompleted By\n\nCompletor of person. \n\n\nAction\n\nType of action. \n\n\nTask Color Definition in the Diagram:\n\n\n\n\n\n\n\n\nColor\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nGrey\n\n\nStart task\n\n\n\n\n\n\nRed\n\n\nWaiting task\n\n\n\n\n\n\nOrange\n\n\nNext task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbol\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n\n\nTo used for leaving history page\n\n\n\n\n\n\n\n\nTo used for enlarge the history page\n\n\n\n\n\n\n\n\nTo used for downsize the history page\n\n\n\n\n\n\n\n\nTo used to reach subflow tasks. Click on this button parent task instance number and sub tasks instance number will be listed. You can look each of sub task history\n\n\n\n\n\n\n\n\nYou can learn how to view task history in the worklist by watching this video :", 
            "title": "History"
        }, 
        {
            "location": "/ug/folders/", 
            "text": "Folder is a directory containing related process or documents in the Workrunner. The left of the screen contains the navigation menu for folders.\n\n\n\n\nStarting a new process\n\n\nAfter selecting a folder from navigation menu, all accessible processes are listed on the page. Clicking the process name will start the process. Some processes may be hidden because you do not have the permission to access or they have been disabled by the administrator.\n\n\n\n\nManaging a Folder\n\n\nThe folder toolbar is used to manage folder properties. This toolbar is only visible when you have 'write access' for the respective folder.\n\n\n\n\nNew Folder\n\nCreates a new folder in the current folder with the specified name.\n\n\nEdit\n\nChanges the folder name with the specified name.\n\n\nProcesses\n\nProvides an access list of processes installed on the current folder. This menu is only visible if write permission is available on folder.\n\n\nYou can learn how to move folders by watching this video:\n\n\n\n\n\nPermissions\n\n\nAllows the editing \naccess control list\n of the current folder. The access control list specifies who can access the folder and which permissions they have. Folder permissions can be specified as;\n\n\nSecurity Profile\n\nSecurity profil is used to permit special group for reach related folder. If \nsecurity group\n doesn't exist, system uses to default group. \n\n\nIdentity\n\nIdentity option is determined responsible person, unit or group. \n\n\nPermissions\n\n\n\n\nRead\n; Allows specified user or group to read contents of current folder and process.\n\n\nAll\n; Allows specified user or group to read and change contents of current folder and process.\n\n\n\n\nWhen you click the little downward arrow next to users name field, operation menu will be listed. Operation menu consists three subtitle, those are  type, begins at and expires at.\n\n\n\n\n\n\n\n\nType\n consists two specification for permit in the process. \n\n\nAllow\n\n\nDeny\n\n\n\n\n\n\nBegins at\n (optional), begin of permission date.\n\n\n\n\nExpires at\n (optional), finish of permission date.\n\n\n\n\nYou can learn how to manage permissions part by watching this video:\n\n\n\n\n\nDelete\n\nDeletes the current folder and its child folders.\n\n\nWhen a folder is deleted all of the related processes and tasks are automatically removed from the system. This action cannot be undone, therefore we recommend that instead of deleting a folder, remove user identities from the access control list to hide it from users.\n\n\nDashboard and Report\n\n\nDashboard and reports features can be designed, if process need it.  Dashboard and report are customized with processes and change accordingly to process specific graphics or listings.\n\n\nDashboard\n\n\nDashboard is submitted a graphical summary of important data, also it give an overview of a running process. After selecting a folder from the navigation menu, dashboards of the related process are listed on the page.\n\n\nExample dashboard:\n\nPie chart is shown active contract counts and each pieces of a contract type that are separated from each other with different color. When you overcome on the color with mouse you will see contract type name and count.\n\n\n \n\n\nActive contract some of features are listed under the pie chart. Those are revision date, inception of treaty, duration, end date and responsible.\n\n\nReport\n\n\nReports is used to detail process account or statement and to export excel list from system. \n\n\n\n\nYou can decide criteria what you want for report with using criteria decisions. When you click on search button, the corresponding feature data are listed on the screen.\n\n\nIf you want to learn how make report, click on \nhere\n.", 
            "title": "Folders"
        }, 
        {
            "location": "/ug/folders/#starting-a-new-process", 
            "text": "After selecting a folder from navigation menu, all accessible processes are listed on the page. Clicking the process name will start the process. Some processes may be hidden because you do not have the permission to access or they have been disabled by the administrator.", 
            "title": "Starting a new process"
        }, 
        {
            "location": "/ug/folders/#managing-a-folder", 
            "text": "The folder toolbar is used to manage folder properties. This toolbar is only visible when you have 'write access' for the respective folder.   New Folder \nCreates a new folder in the current folder with the specified name.  Edit \nChanges the folder name with the specified name.  Processes \nProvides an access list of processes installed on the current folder. This menu is only visible if write permission is available on folder.  You can learn how to move folders by watching this video:", 
            "title": "Managing a Folder"
        }, 
        {
            "location": "/ug/folders/#permissions", 
            "text": "Allows the editing  access control list  of the current folder. The access control list specifies who can access the folder and which permissions they have. Folder permissions can be specified as;  Security Profile \nSecurity profil is used to permit special group for reach related folder. If  security group  doesn't exist, system uses to default group.   Identity \nIdentity option is determined responsible person, unit or group.   Permissions   Read ; Allows specified user or group to read contents of current folder and process.  All ; Allows specified user or group to read and change contents of current folder and process.   When you click the little downward arrow next to users name field, operation menu will be listed. Operation menu consists three subtitle, those are  type, begins at and expires at.     Type  consists two specification for permit in the process.   Allow  Deny    Begins at  (optional), begin of permission date.   Expires at  (optional), finish of permission date.   You can learn how to manage permissions part by watching this video:   Delete \nDeletes the current folder and its child folders.  When a folder is deleted all of the related processes and tasks are automatically removed from the system. This action cannot be undone, therefore we recommend that instead of deleting a folder, remove user identities from the access control list to hide it from users.", 
            "title": "Permissions"
        }, 
        {
            "location": "/ug/folders/#dashboard-and-report", 
            "text": "Dashboard and reports features can be designed, if process need it.  Dashboard and report are customized with processes and change accordingly to process specific graphics or listings.", 
            "title": "Dashboard and Report"
        }, 
        {
            "location": "/ug/folders/#dashboard", 
            "text": "Dashboard is submitted a graphical summary of important data, also it give an overview of a running process. After selecting a folder from the navigation menu, dashboards of the related process are listed on the page.  Example dashboard: \nPie chart is shown active contract counts and each pieces of a contract type that are separated from each other with different color. When you overcome on the color with mouse you will see contract type name and count.     Active contract some of features are listed under the pie chart. Those are revision date, inception of treaty, duration, end date and responsible.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/ug/folders/#report", 
            "text": "Reports is used to detail process account or statement and to export excel list from system.    You can decide criteria what you want for report with using criteria decisions. When you click on search button, the corresponding feature data are listed on the screen.  If you want to learn how make report, click on  here .", 
            "title": "Report"
        }, 
        {
            "location": "/ug/market/", 
            "text": "Workrunner market is a medium that allows potential costumers for meet our vertical applications. Vertical applications are prepared applications, also those are using from our costumers. Vertical applications title and summarizes are listed in the market. You can arrive to detail information when you click on title of application. All of applications are explained with below titles.\n\n\nVertical application page offers the application of specifications in the three part. Those are the features, the licensing and the details. \n\n\nFeatures\n\n\nFeatures part reports the application of purpose, specifications and can be use for which problems solutions. Application features is defined the main heading, subtitles and step of screenshots.\n\n\nLicensing\n\n\nLicensing part allows to users of access limit in the Workrunner.  Limit specification can be change depend on the application features. System sets using three ways to decide the application of license; those are the quota, the users posts and the project piece.\n\n\nDetails\n\n\nDetails part is defined the application other features.\n\n\nVersion\n\nLast edition number of application.\n\n\nLicense\n\nType of licence.\n\n\nCategory\n\nClassification of application.\n\n\nAuthor\n\nThe person who responsible to this application.", 
            "title": "Market"
        }, 
        {
            "location": "/ug/market/#features", 
            "text": "Features part reports the application of purpose, specifications and can be use for which problems solutions. Application features is defined the main heading, subtitles and step of screenshots.", 
            "title": "Features"
        }, 
        {
            "location": "/ug/market/#licensing", 
            "text": "Licensing part allows to users of access limit in the Workrunner.  Limit specification can be change depend on the application features. System sets using three ways to decide the application of license; those are the quota, the users posts and the project piece.", 
            "title": "Licensing"
        }, 
        {
            "location": "/ug/market/#details", 
            "text": "Details part is defined the application other features.  Version \nLast edition number of application.  License \nType of licence.  Category \nClassification of application.  Author \nThe person who responsible to this application.", 
            "title": "Details"
        }, 
        {
            "location": "/ag/admin_guide/", 
            "text": "Getting Started\n\n\nProcess Modeling\n\n\nProcess Diagram\n\n\nData Model\n\n\nXPath and XQuery\n\n\nForms\n\n\nDatabases\n\n\nLocalization\n\n\nNamespaces\n\n\nScreens\n\n\nScripting\n\n\nWeb Services\n\n\nData Templates\n\n\n\n\n\n\nProcess Administration\n\n\nProcess Access Control List\n\n\nBackground Jobs\n\n\n\n\n\n\nIntegration Services\n\n\nEmbedding Workrunner\n\n\nGoogle Service Authentication\n\n\nOffice365 Service Authentication\n\n\nRest Services\n\n\n\n\n\n\nSystem Administration\n\n\nOrganization Database\n\n\nEdit Domain\n\n\nEdit Groups\n\n\nBackground Jobs Manager\n\n\nSearch Work Item", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/getting_started/", 
            "text": "Workrunner is designed to provide a single comprehensive web interface that encompasses all facets of a process lifecycle \u2013 analysis, modeling, simulation and continuous enhancement \u2013 and to eliminate the need for people to learn and use multiple different systems and applications. With a flexible architecture, it allows for rapid and frequent modifications to active processes and makes it easy to migrate older applications into service-oriented structures.\n\n\nOrganization\n\n\nOrganization in the Workrunner has a management structure that determines relationships between the different units, groups and the members. Also it assigns roles, responsibilities, and authority to carry out different tasks. \n\n\nProcess Modelling\n\n\nProcess modelling is the analytical representation and illustration in the Workrunner. Process modeling is used to map out a system\u2019s current processes to create a baseline for process improvements and to design future processes with those improvements incorporated. A process model is completely an anticipation of what the process will look like.\n\n\nBackground Jobs\n\n\nA background job is a the Workrunner job that runs behind the scenes and without any user interaction. Typical tasks for these processes include logging, system monitoring, scheduling, and user notification.\n\n\nKey Concepts\n\n\nThis page introduces some of key concepts related to designing a business process with Workrunner and terminology used.\n\n\nProcess\n\n\nPut simply, a process is a way of doing your work. It's a structured way of organizing activities or tasks that produce a specific service or product.\n\n\nFor example: When your computer is malfunctioning you may call a technical guy on the phone and wait for him to come over, or you may start Incident Request process that is automatically assigned to the relevant technical person and instantly trace the current status of your request.\n\n\nUsing a clearly-defined process flow saves you from chaos while doing your work. All of your daily business activities can ultimately be defined as a process.\n\n\nIn Workrunner everything you do is about starting a new process or completing an assigned task from your inbox. Even defining a new user or terminating a workflow instance is controlled by a process.\n\n\nFolder\n\n\nProcesses are categorized in a security controlled \nfolders\n. Folders are generally used to access start points of process or reporting business data. Folders can be contain other folders to build a hierarchical organization. You can create new folders any time or automatically created when you install a process from app store.\n\n\nProcess Definition\n\n\nIn Workrunner everything you define, stored in a process definition in a XML format. Process definition contains the all of required information (diagram, databases, reports, web service connections) to run. Process definitions are also versioned under processes for switch to different versions of process any time.\n\n\nBusiness Data\n\n\nEvery process exists to produce a result. In Workrunner from beginning to end result of process transported in XML format called as \ndata model\n. Data model may contain unlimited fields and lists. You can also store more complex data structures like hierarchies.\n\n\nGenerally business data is empty when workflow is started but while workflow advances data is filled by people or integrated systems.\n\n\nWork List\n\n\nWork List\n is a list of work items that assigned to people. Work items are filtered by tags to distinguish for easy access.  All of new assigned work items are tagged with \"Inbox\" but you can remove it to review later. Until work item is complete by you or another user all of waiting work items are tagged with \"All Waiting\" and you cant remove this tag. When you complete a work item its tagged with \"Sent\" tag. If you need to list of all work items without any state filter you can use the \"All\" tag.\n\n\nSome of work items are automatically tagged with \"Watched\" by process design and you can remove if no longer needed.\n\n\nAdditionally you can use your custom defined tags to filter work items.\n\n\nWork Item\n\n\nWork Item is a step in workflow, while workflow advances in process every step creates a new work item that assigned to people or system. Work item may be assigned to one or more user. Until it's complete by a user stays in user's work list. Some of work items are assigned to system to execute automated tasks and does not have interactive action with any user.\n\n\nDocument Archive\n\n\nDocument archive stores the all document based data. Documents may be generated by processes or manually imported by people. All of documents may contain one or more attached file and search profile. You can search documents by full text index or specific search fields.\n\n\nLife Cycle\n\n\nThis page explains the life cycle of creating an application in the Workrunner. Applications are created and run with agile methodology steps in the Workrunner.\n\n\nAgile methodology in the Workrunner uses adaptive approach where there is no detailed planning and there is clarity on future tasks only in respect of what features need to be developed. There is feature driven development and the Workrunner adapts to the changing product requirements dynamically.The product is tested very frequently, through the release iterations, minimizing the risk of any major failures in future.\n\n\nThe following steps describe how to work agile methodology life cycle in the Workrunner.\n\n\nRequirements Analysis\n\n\nRequirements analysis step starts to design process diagram in the Workrunner. Task is created for each process step in the diagram and task links are created.Process diagram shows an application working digit.\n\n\nSecond step is data model design. Also data models define how data is connected to each other. Process is divided section, sub section and elements after to define features for each elements in the data model.\n\n\nDesign\n\n\nDesign step corresponds to form design in the Workrunner. Form design section is connected data model of elements and to utilize elements for create form content. \n\n\nImplementation and Testing\n\n\nImplementation and testing steps are actualized at the same time in the Workrunner. The following steps explain how to test and implement process.\n\n\n\n\nSend form to user. \n\n\nIf process run, you will see task in to your inbox. When you open task, you will see designed form. \n\n\nEnter information in to form, click action button.\n\n\n\n\nEvolution\n\n\nEvolution step is last loop structure in the Workrunner. When faced any process problem, it is solved by using life cycle steps without stopping the process.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ag/getting_started/#organization", 
            "text": "Organization in the Workrunner has a management structure that determines relationships between the different units, groups and the members. Also it assigns roles, responsibilities, and authority to carry out different tasks.", 
            "title": "Organization"
        }, 
        {
            "location": "/ag/getting_started/#process-modelling", 
            "text": "Process modelling is the analytical representation and illustration in the Workrunner. Process modeling is used to map out a system\u2019s current processes to create a baseline for process improvements and to design future processes with those improvements incorporated. A process model is completely an anticipation of what the process will look like.", 
            "title": "Process Modelling"
        }, 
        {
            "location": "/ag/getting_started/#background-jobs", 
            "text": "A background job is a the Workrunner job that runs behind the scenes and without any user interaction. Typical tasks for these processes include logging, system monitoring, scheduling, and user notification.", 
            "title": "Background Jobs"
        }, 
        {
            "location": "/ag/getting_started/#key-concepts", 
            "text": "This page introduces some of key concepts related to designing a business process with Workrunner and terminology used.", 
            "title": "Key Concepts"
        }, 
        {
            "location": "/ag/getting_started/#process", 
            "text": "Put simply, a process is a way of doing your work. It's a structured way of organizing activities or tasks that produce a specific service or product.  For example: When your computer is malfunctioning you may call a technical guy on the phone and wait for him to come over, or you may start Incident Request process that is automatically assigned to the relevant technical person and instantly trace the current status of your request.  Using a clearly-defined process flow saves you from chaos while doing your work. All of your daily business activities can ultimately be defined as a process.  In Workrunner everything you do is about starting a new process or completing an assigned task from your inbox. Even defining a new user or terminating a workflow instance is controlled by a process.", 
            "title": "Process"
        }, 
        {
            "location": "/ag/getting_started/#folder", 
            "text": "Processes are categorized in a security controlled  folders . Folders are generally used to access start points of process or reporting business data. Folders can be contain other folders to build a hierarchical organization. You can create new folders any time or automatically created when you install a process from app store.", 
            "title": "Folder"
        }, 
        {
            "location": "/ag/getting_started/#process-definition", 
            "text": "In Workrunner everything you define, stored in a process definition in a XML format. Process definition contains the all of required information (diagram, databases, reports, web service connections) to run. Process definitions are also versioned under processes for switch to different versions of process any time.", 
            "title": "Process Definition"
        }, 
        {
            "location": "/ag/getting_started/#business-data", 
            "text": "Every process exists to produce a result. In Workrunner from beginning to end result of process transported in XML format called as  data model . Data model may contain unlimited fields and lists. You can also store more complex data structures like hierarchies.  Generally business data is empty when workflow is started but while workflow advances data is filled by people or integrated systems.", 
            "title": "Business Data"
        }, 
        {
            "location": "/ag/getting_started/#work-list", 
            "text": "Work List  is a list of work items that assigned to people. Work items are filtered by tags to distinguish for easy access.  All of new assigned work items are tagged with \"Inbox\" but you can remove it to review later. Until work item is complete by you or another user all of waiting work items are tagged with \"All Waiting\" and you cant remove this tag. When you complete a work item its tagged with \"Sent\" tag. If you need to list of all work items without any state filter you can use the \"All\" tag.  Some of work items are automatically tagged with \"Watched\" by process design and you can remove if no longer needed.  Additionally you can use your custom defined tags to filter work items.", 
            "title": "Work List"
        }, 
        {
            "location": "/ag/getting_started/#work-item", 
            "text": "Work Item is a step in workflow, while workflow advances in process every step creates a new work item that assigned to people or system. Work item may be assigned to one or more user. Until it's complete by a user stays in user's work list. Some of work items are assigned to system to execute automated tasks and does not have interactive action with any user.", 
            "title": "Work Item"
        }, 
        {
            "location": "/ag/getting_started/#document-archive", 
            "text": "Document archive stores the all document based data. Documents may be generated by processes or manually imported by people. All of documents may contain one or more attached file and search profile. You can search documents by full text index or specific search fields.", 
            "title": "Document Archive"
        }, 
        {
            "location": "/ag/getting_started/#life-cycle", 
            "text": "This page explains the life cycle of creating an application in the Workrunner. Applications are created and run with agile methodology steps in the Workrunner.  Agile methodology in the Workrunner uses adaptive approach where there is no detailed planning and there is clarity on future tasks only in respect of what features need to be developed. There is feature driven development and the Workrunner adapts to the changing product requirements dynamically.The product is tested very frequently, through the release iterations, minimizing the risk of any major failures in future.  The following steps describe how to work agile methodology life cycle in the Workrunner.", 
            "title": "Life Cycle"
        }, 
        {
            "location": "/ag/getting_started/#requirements-analysis", 
            "text": "Requirements analysis step starts to design process diagram in the Workrunner. Task is created for each process step in the diagram and task links are created.Process diagram shows an application working digit.  Second step is data model design. Also data models define how data is connected to each other. Process is divided section, sub section and elements after to define features for each elements in the data model.", 
            "title": "Requirements Analysis"
        }, 
        {
            "location": "/ag/getting_started/#design", 
            "text": "Design step corresponds to form design in the Workrunner. Form design section is connected data model of elements and to utilize elements for create form content.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/getting_started/#implementation-and-testing", 
            "text": "Implementation and testing steps are actualized at the same time in the Workrunner. The following steps explain how to test and implement process.   Send form to user.   If process run, you will see task in to your inbox. When you open task, you will see designed form.   Enter information in to form, click action button.", 
            "title": "Implementation and Testing"
        }, 
        {
            "location": "/ag/getting_started/#evolution", 
            "text": "Evolution step is last loop structure in the Workrunner. When faced any process problem, it is solved by using life cycle steps without stopping the process.", 
            "title": "Evolution"
        }, 
        {
            "location": "/ag/pm/process_modeling_toc/", 
            "text": "Process Diagram\n\n\nDiagram Overview\n\n\nPools\n\n\nTasks\n\n\nActions\n\n\nRoles\n\n\nRoutes\n\n\nMessage Templates\n\n\n\n\n\n\nData Model\n\n\nXPath and XQuery\n join\n\n\nForms\n\n\nForms Overview\n\n\nControls\n\n\nRules\n join\n\n\nCharts Design\n join\n\n\n\n\n\n\nDatabases\n join\n\n\nLocalization\n\n\nNamespaces\n\n\nScreens\n\n\nScripting\n\n\nScripting Modules\n\n\nReference\n\n\nVariables\n\n\n\n\n\n\nWeb Services\n\n\nData Templates", 
            "title": "Process Modeling TOC"
        }, 
        {
            "location": "/ag/pm/pd/diagram_overview/", 
            "text": "A process diagram is a visualized model consisting of \nTasks\n, \nActions\n, \nRoles\n and \nRoutes\n. For example a simple expense process is modeled as follows;\n\n\n\n\nLeave Request\n\nDefines the start task of the process. Employee can save or submit a leave request.\n\n\nManager Approval\n\nDefines the first approval task of the process. Manager can confirm or reject the request. If rejected, the process is routed back to the employee. \n\n\nHR Approval\n\nDefines the second approval task of the process. Human Resources can confirm or reject the request, and if HR confirms the request, confirmed request is recorded into HR database, else if rejected, the process is routed back to the manager.\n\n\nInform Employee\n\nDefines the inform employee task of the process. Employee can select OK and finish the process.\n\n\nDiagram Language\n\n\nBPMN or similar notations are generally contain technical terms like \"if\", \"split\", \"explicit join\" activities and require some skills to understand diagram. Workrunner uses own process notation to describe processes to achieve understand processes by everyone without any education or skills needed.\n\n\nAccording to diagram above:\n\n\n\n\n\n\nGreen box\n identifies the start (initiator) task of pool.\n\n\n\n\n\n\nOrange boxes\n identify the intermediate task of pool.\n\n\n\n\n\n\nEach gray box that connected to tasks identifies the action as result of task that assigned user can select.\n\n\n\n\n\n\nLines between actions and tasks identify the routes to next task in process. If no route is found process is terminated with selected action.\n\n\n\n\n\n\nYou can learn how to build a process by watching this video :", 
            "title": "Diagram Overview"
        }, 
        {
            "location": "/ag/pm/pd/diagram_overview/#diagram-language", 
            "text": "BPMN or similar notations are generally contain technical terms like \"if\", \"split\", \"explicit join\" activities and require some skills to understand diagram. Workrunner uses own process notation to describe processes to achieve understand processes by everyone without any education or skills needed.  According to diagram above:    Green box  identifies the start (initiator) task of pool.    Orange boxes  identify the intermediate task of pool.    Each gray box that connected to tasks identifies the action as result of task that assigned user can select.    Lines between actions and tasks identify the routes to next task in process. If no route is found process is terminated with selected action.    You can learn how to build a process by watching this video :", 
            "title": "Diagram Language"
        }, 
        {
            "location": "/ag/pm/pd/pools/", 
            "text": "Pool is a container of diagram. Most of the \nbusiness processes\n require more than one diagram for different operations. For example advance request and expense payment diagrams can be defined in one process. \n\n\nFor a pool, you can configure following:\n\n\nName\n\nIdentifies the pool. This information used only for process designers and are not visible by users.\n\n\nDefault Form\n\nDefault selected form to show users if task does not specify any form.\n\n\nData Root\n\nRoot data element be used from \ndata model\n. Different pools may share same root element if needed.\n\n\nIs Administrative ?\n\nCheck this option if pool is used only for administrative operations. When checked pool accessed only by user has \"write\" permission on process or is admin. For example; You may need to create an Options diagram to set process preferences.\n\n\nIs Anonymously Accessible ?\n\nCheck this option to allow anonymous (non-logged in) users. This option also requires anonymous access permission on domain preferences.\n\n\nDocumentation URL\n\nDocumentation URL address is used to link process documentation.\n\n\nSupport URL\n\nSupport URL address is used to link support site.\n\n\nAfter pool is created you can configure the tasks, roles and routes from graphical designer.\n\n\nPool also contains following properties:\n\n\nOpen Script\n\n\nScript to be executed for every new instances just before first task. This script may be useful to assign dynamically changing default values. (ex: assign current date to form value) Please refer to scripting section for more detail.\n\n\nClosing Script\n\n\nScript to be executed for every normally closed (by user action or deadline) instances. This script may be useful for export process data to any external system. Please refer to scripting section for more detail.\n\n\nTerminating Script\n\n\nScript to be executed for terminated (forced by administrative or system) instances. Please refer to scripting section for more detail.\n\n\nTemplates\n\n\nList of message templates to be used for mail notifications. More information can be found at \nMessage Templates\n section.\n\n\nVariables\n\n\nList of variables to use in scripting environment. Variables are used to define and easy to update static values to use in rule validations, formulas etc. Defined variables can be accessed with \n$\n sign prefix. Example: \n$ExpenseLimit\n\n\nVariable values can be override with \nTask\n definitions to update value in only task scope. Example: \n$AllowPriceChange\n can set to false in pool definition and can be set to true for administrative type tasks to disable on rule validation.", 
            "title": "Pools"
        }, 
        {
            "location": "/ag/pm/pd/pools/#open-script", 
            "text": "Script to be executed for every new instances just before first task. This script may be useful to assign dynamically changing default values. (ex: assign current date to form value) Please refer to scripting section for more detail.", 
            "title": "Open Script"
        }, 
        {
            "location": "/ag/pm/pd/pools/#closing-script", 
            "text": "Script to be executed for every normally closed (by user action or deadline) instances. This script may be useful for export process data to any external system. Please refer to scripting section for more detail.", 
            "title": "Closing Script"
        }, 
        {
            "location": "/ag/pm/pd/pools/#terminating-script", 
            "text": "Script to be executed for terminated (forced by administrative or system) instances. Please refer to scripting section for more detail.", 
            "title": "Terminating Script"
        }, 
        {
            "location": "/ag/pm/pd/pools/#templates", 
            "text": "List of message templates to be used for mail notifications. More information can be found at  Message Templates  section.", 
            "title": "Templates"
        }, 
        {
            "location": "/ag/pm/pd/pools/#variables", 
            "text": "List of variables to use in scripting environment. Variables are used to define and easy to update static values to use in rule validations, formulas etc. Defined variables can be accessed with  $  sign prefix. Example:  $ExpenseLimit  Variable values can be override with  Task  definitions to update value in only task scope. Example:  $AllowPriceChange  can set to false in pool definition and can be set to true for administrative type tasks to disable on rule validation.", 
            "title": "Variables"
        }, 
        {
            "location": "/ag/pm/pd/tasks/", 
            "text": "A task defines a step in process diagram. Tasks can be defined as user tasks or module tasks to execute automated steps in workflow. Every task has a list of \nactions\n to complete step in workflow.\n\n\n\n\nFor a task you can configure following common properties for a task:\n\n\nName\n (Not visible on diagram)\n\nName of task. Name information is not visible to users, and used to identify a task.\n\n\nCaption\n\nCaption of task. Captions are shown to users and can be localized when needed. Caption may contain the \ndata templates\n expressions to replace data from \ndata model\n.\n\n\nRole\n\n\nRole\n to be use assign task. Tasks may share same roles if assigned to same users, If not specified task is assigned to initiator of workflow.\n\n\nPrework\n\nScript to be executed before task assigned to role. Please refer \nPrework Script\n section for more details.\n\n\nPostwork\n\nScript to be executed after task is completed. Please refer \nPostwork Script\n section for more details.\n\n\nDelayed Execution\n\nCheck this field to process this task in delayed context. By default Workrunner executes task steps in synchronized context until task is assigned to a user or workflow is complete. If you check this field workflow engine temporarily stops execution at task and commits the current state to database. Remaining execution is performed in another transaction. In some cases you may need to use this field to ensure save current state and perform remaining operations in another error checking context.\n\n\nOptions\n\nList of task options. Task options are provides quick accessible to following task properties:\n\n\n\n\nNotification\n\n\nFirst Reminder\n\n\nRepeating Reminder\n\n\nDeadline\n\n\nWatchers\n\n\nEvaluation\n\n\n\n\n\n\nIf property enabled related icon is highlighted, task properties are not limited to options icons, Please use context menu to access more advanced properties.\n\n\nNotification\n\n\nNotify message is an information message. When the related task run, system will sent an information message to responsible user e-mail address.\n\n\nFirst Reminder\n\n\nFirst reminder option is a backlog first reminder time in the process. The system sent an information e-mail to user for backlog task when the time arrive to first reminder time.\n\n\nRepeating Remember\n\n\nRepeating remember option run after the first reminder time. System sent periodically an information e-mail to user for backlog. \n\n\nDeadline\n\n\nConfigures the deadline time and action for assigned tasks to complete automatically.\n\n\nDuration\n\nDuration of deadline after task is assigned.  Duration can be selected from list or can be manually entered in \nd.hh:mm:ss\n format. Duration also can be set in prework script in more dynamic behavior.\n\n\nAction\n\nAction to be selected if deadline occurs. This option is not mandatory if auto completion of task is not requested.\n\n\nSend Notify\n\nSend notify notification message about deadline. This option only visible when duration defined.\n\n\nWatchers\n\n\nThis option is necessary for to control task. Watchers option has two choice that are watcher role and send notify message. \n\n\n\n\nWatcher role is responsible user for the related task.\n\n\nSend notify message is notice message for the watcher role.\n\n\n\n\nEvaluation\n\n\nConfigures the task to perform scheduled operations. Depending on the task type, performs following:\n\n\nStart Point\n\nIf task is configured as start point Workrunner periodically initiates new instances depending on schedule and executes the evaluation script. When any action taken, it continues to next step on workflow.\n\n\nNormal\n\nIf task is configured as intermediate task, Workrunner periodically checks any waiting tasks and executes the evaluation script on it. When any action taken, it continues to next step on workflow.\n\n\nFor evaluation you can configure following:\n\n\nEnabled\n\nCheck this field to enable scheduled operation.\n\n\nSchedule\n\nSchedule of evaluation. \n\n\nScript\n\nScript to execute on scheduled event occurs. \n\n\nCommon Schedules\n\n\nHourly Schedule\n\nPerform every on 10 minutes.\n\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nHourly\n\n        \nDuration\n00:10:00\n/Duration\n\n    \n/Rule\n\n\n/Schedule\n\n\n\n\n\nWeekly Schedule\n\nPerform every day except sunday and saturday.\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nWeekly\n\n        \nDayOfWeek\nSunday\n/DayOfWeek\n\n        \nDayOfWeek\nSaturday\n/DayOfWeek\n\n    \n/Rule\n\n\n/Schedule\n\n\n\n\nPerform only \nonce\n on mondays.\n\nSchedule\n \nName=\nWeekly Leave Request Report\n\n    \nRule\n \nType=\nWeekly\n\n        \nDayOfWeek\nSunday\n/DayOfWeek\n\n        \nDayOfWeek\nTuesday\n/DayOfWeek\n\n        \nDayOfWeek\nWednesday\n/DayOfWeek\n\n        \nDayOfWeek\nThursday\n/DayOfWeek\n\n        \nDayOfWeek\nFriday\n/DayOfWeek\n\n        \nDayOfWeek\nSaturday\n/DayOfWeek\n\n    \n/Rule\n\n    \nRule\n \nType=\nDaily\n\n        \nStart\n09:05:00\n/Start\n\n        \nEnd\n09:05:59\n/End\n\n        \nInvert\nTrue\n/Invert\n\n    \n/Rule\n\n\n/Schedule\n\n\n\n\nDaily Schedule\n\nPerform every day, exactly at 16:01:00.\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nDaily\n\n        \nStart\n16:01:00\n/Start\n\n        \nEnd\n16:01:59\n/End\n\n        \nInvert\nTrue\n/Invert\n\n    \n/Rule\n\n\n/Schedule\n\n\n\n\nYearly Schedule\n\nPerform every 1th day in all months (Example: 20XX-XX-01)\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nYearly\n\n        \nDay\n1\n/Day\n\n   \n/Rule\n\n\n/Schedule\n\n\n\n\nPerform start of 4\nth\n month in every year (Example: 20XX-04-01)\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nYearly\n\n        \nMonth\n4\n/Month\n\n   \n/Rule\n\n\n/Schedule\n\n\n\n\nPerform at 4\nth\n month and 10\nth\n day in every year (Example: 20XX-04-10)\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nYearly\n\n        \nDay\n10\n/Day\n\n        \nMonth\n4\n/Month\n\n   \n/Rule\n\n\n/Schedule\n\n\n\n\nAnnual Schedule\n\nPerform by yearly basis. It basically excludes the date given and runs the scheduled task on every day except the given one.\n\n\nSchedule\n \nName=\n\n    \nRule\n \nType=\nAnnual\n\n        \nDate\n2000-02-25T00:00:00.0000000+00:00\n/Date\n\n   \n/Rule\n\n\n/Schedule\n\n\n\n\n\nVariables\n\n\nList of overriden Pool variables in task scope. Please refer \npool page\n for more information.\n\n\nForms\n\n\nThis feature can be used to set form to default, enabled, hidden or disabled status for each task. Forms feature becomes available after determining an element in the \nform design\n part. You can decide section status for every process step.\n\n\n\n\nDefault state inherits the rules from to form. Example; formatting and conditional rules. \n\n\nEnabled state permits to enter new information or change information in the section.\n\n\nHidden state hides section when related task run.\n\n\nDisabled state shows related section in the form but it doesn't permit to add new information or to change existing information in the section.", 
            "title": "Simple Task"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#notification", 
            "text": "Notify message is an information message. When the related task run, system will sent an information message to responsible user e-mail address.", 
            "title": "Notification"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#first-reminder", 
            "text": "First reminder option is a backlog first reminder time in the process. The system sent an information e-mail to user for backlog task when the time arrive to first reminder time.", 
            "title": "First Reminder"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#repeating-remember", 
            "text": "Repeating remember option run after the first reminder time. System sent periodically an information e-mail to user for backlog.", 
            "title": "Repeating Remember"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#deadline", 
            "text": "Configures the deadline time and action for assigned tasks to complete automatically.  Duration \nDuration of deadline after task is assigned.  Duration can be selected from list or can be manually entered in  d.hh:mm:ss  format. Duration also can be set in prework script in more dynamic behavior.  Action \nAction to be selected if deadline occurs. This option is not mandatory if auto completion of task is not requested.  Send Notify \nSend notify notification message about deadline. This option only visible when duration defined.", 
            "title": "Deadline"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#watchers", 
            "text": "This option is necessary for to control task. Watchers option has two choice that are watcher role and send notify message.    Watcher role is responsible user for the related task.  Send notify message is notice message for the watcher role.", 
            "title": "Watchers"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#evaluation", 
            "text": "Configures the task to perform scheduled operations. Depending on the task type, performs following:  Start Point \nIf task is configured as start point Workrunner periodically initiates new instances depending on schedule and executes the evaluation script. When any action taken, it continues to next step on workflow.  Normal \nIf task is configured as intermediate task, Workrunner periodically checks any waiting tasks and executes the evaluation script on it. When any action taken, it continues to next step on workflow.  For evaluation you can configure following:  Enabled \nCheck this field to enable scheduled operation.  Schedule \nSchedule of evaluation.   Script \nScript to execute on scheduled event occurs.", 
            "title": "Evaluation"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#common-schedules", 
            "text": "Hourly Schedule \nPerform every on 10 minutes.  Schedule   Name= \n     Rule   Type= Hourly \n         Duration 00:10:00 /Duration \n     /Rule  /Schedule   Weekly Schedule \nPerform every day except sunday and saturday. Schedule   Name= \n     Rule   Type= Weekly \n         DayOfWeek Sunday /DayOfWeek \n         DayOfWeek Saturday /DayOfWeek \n     /Rule  /Schedule   Perform only  once  on mondays. Schedule   Name= Weekly Leave Request Report \n     Rule   Type= Weekly \n         DayOfWeek Sunday /DayOfWeek \n         DayOfWeek Tuesday /DayOfWeek \n         DayOfWeek Wednesday /DayOfWeek \n         DayOfWeek Thursday /DayOfWeek \n         DayOfWeek Friday /DayOfWeek \n         DayOfWeek Saturday /DayOfWeek \n     /Rule \n     Rule   Type= Daily \n         Start 09:05:00 /Start \n         End 09:05:59 /End \n         Invert True /Invert \n     /Rule  /Schedule   Daily Schedule \nPerform every day, exactly at 16:01:00. Schedule   Name= \n     Rule   Type= Daily \n         Start 16:01:00 /Start \n         End 16:01:59 /End \n         Invert True /Invert \n     /Rule  /Schedule   Yearly Schedule \nPerform every 1th day in all months (Example: 20XX-XX-01) Schedule   Name= \n     Rule   Type= Yearly \n         Day 1 /Day \n    /Rule  /Schedule   Perform start of 4 th  month in every year (Example: 20XX-04-01) Schedule   Name= \n     Rule   Type= Yearly \n         Month 4 /Month \n    /Rule  /Schedule   Perform at 4 th  month and 10 th  day in every year (Example: 20XX-04-10) Schedule   Name= \n     Rule   Type= Yearly \n         Day 10 /Day \n         Month 4 /Month \n    /Rule  /Schedule   Annual Schedule \nPerform by yearly basis. It basically excludes the date given and runs the scheduled task on every day except the given one.  Schedule   Name= \n     Rule   Type= Annual \n         Date 2000-02-25T00:00:00.0000000+00:00 /Date \n    /Rule  /Schedule", 
            "title": "Common Schedules"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#variables", 
            "text": "List of overriden Pool variables in task scope. Please refer  pool page  for more information.", 
            "title": "Variables"
        }, 
        {
            "location": "/ag/pm/pd/tasks/#forms", 
            "text": "This feature can be used to set form to default, enabled, hidden or disabled status for each task. Forms feature becomes available after determining an element in the  form design  part. You can decide section status for every process step.   Default state inherits the rules from to form. Example; formatting and conditional rules.   Enabled state permits to enter new information or change information in the section.  Hidden state hides section when related task run.  Disabled state shows related section in the form but it doesn't permit to add new information or to change existing information in the section.", 
            "title": "Forms"
        }, 
        {
            "location": "/ag/pm/pd/prework_script/", 
            "text": "Prework script are commonly used to control process data or task state before assign to the users.\n\n\nPrework script defined area is reached from related task. When you click on \nPrework script\n button on the task, prework script page will open.\n\n\nExample:\n\n\n\n\nIn prework script following objects are available:\n\n\n$WorkItem\n\nCurrent workitem instance.\n\n\n$Xml\n\nXml data navigator for \ndata model\n.\n\n\n$Instance\n\nCurrent workflow instance.\n\n\n$Initiator\n\nInitiator of workflow instance.\n\n\n$TestMode\n\nA boolean value that specifies the current workflow instance is in test mode.\n\n\n$Priority\n\nA number value between 0 to 5 that specifies the priority of workflow instance.\n\n\n$Culture\n\nA string value that specifies the initiated culture of workflow instance. (Example: \nen\n or \nde\n or \ntr\n)\n\n\n$Localization\n\nTranslation dictionary that provides localized texts.\n\n\n$Database\n\nProvides methods to query relational database.\n\n\n$Membership\n\nProvides methods to access organization database.\n\n\n$Calendar\n\nProvides methods for time based calculations and working hours calendar.\n\n\n$XmlRepository\n\nProvides methods to query non-relational database.\n\n\n$Domain\n\nAllows to access domain preferences.\n\n\n$Services\n\nAllows to access defined web services.\n\n\n$Messages\n\nAllows to send email messages.\n\n\n$Crypto\n\nPerforms cryptographic and digital signature operations.\n\n\n$Delegation\n\nAllows to access user delegation library.\n\n\n$Files\n\nAllows to access file repository.\n\n\n$Documents\n\nAllows to access document repository. \n\n\nCommon operations\n\n\nAuto Process Task\n\nAutomatically process current \nwork item\n without assign to users and skip to next step in workflow.\n\n\n//Assign action\n\n\n$WorkItem\n.\nSelectedAction\n \n=\n \nApprove\n;\n\n\n\n\nDynamic Deadline Date\n\nSet deadline date by user entered data.\n\n\n//Assign action\n\n\n$WorkItem\n.\nDeadlineDate\n \n=\n \n$Xml\n.\nEvaluateDateTime\n(\nPaymentDate\n);", 
            "title": "Prework Script"
        }, 
        {
            "location": "/ag/pm/pd/prework_script/#common-operations", 
            "text": "Auto Process Task \nAutomatically process current  work item  without assign to users and skip to next step in workflow.  //Assign action  $WorkItem . SelectedAction   =   Approve ;   Dynamic Deadline Date \nSet deadline date by user entered data.  //Assign action  $WorkItem . DeadlineDate   =   $Xml . EvaluateDateTime ( PaymentDate );", 
            "title": "Common operations"
        }, 
        {
            "location": "/ag/pm/pd/postwork_script/", 
            "text": "Postwork script are commonly used perform tasks after task is completed. This script may be useful like updating databases or generating documents by user entered data.\n\n\nBecause task is already completed some operations (example; trying to set action on current workitem) are invalid at this stage and error is thrown.\n\n\nPostwork script defined area is reached from related task. When you click on \nPostwork script\n button on the task, postwork script page will open.\n\n\nExample:\n\n\n\n\nIn postwork script following objects are available:\n\n\n$WorkItem\n\nCurrent workitem instance.\n\n\n$Xml\n\nXml data navigator for \ndata model\n.\n\n\n$Instance\n\nCurrent workflow instance.\n\n\n$Initiator\n\nInitiator of workflow instance.\n\n\n$TestMode\nA boolean value that specifies the current workflow instance is in test mode.\n\n\n$Priority\nA number value between 0 to 5 that specifies the priority of workflow instance.\n\n\n$Culture\nA string value that specifies the initiated culture of workflow instance. (Example: \nen\n or \nde\n or \ntr\n)\n\n\n$Localization\n\nTranslation dictionary that provides localized texts.\n\n\n$Database\n\nProvides methods to query relational database.\n\n\n$Membership\n\nProvides methods to access organization database.\n\n\n$Calendar\n\nProvides methods for time based calculations and working hours calendar.\n\n\n$XmlRepository\n\nProvides methods to query non-relational database.\n\n\n$Domain\nAllows to access domain preferences.\n\n\n$Services\nAllows to access defined web services.\n\n\n$Messages\n\nAllows to send email messages.\n\n\n$Crypto\nPerforms cryptographic and digital signature operations.\n\n\n$Delegation\n\nAllows to access user delegation library.\n\n\n$Files\n\nAllows to access file repository.\n\n\n$Documents\n\nAllows to access document repository. \n\n\nCommon operations\n\n\nUpdating data model by action\n\n\nAssign completion date to \nData Model\n if user selects \nApprove\n action.\n\n\n//Assign action\n\n\nif\n \n(\n \n$WorkItem\n.\nSelectedAction\n \n==\n \nApprove\n \n)\n \n{\n\n   \n$Xml\n.\nSetValue\n(\nApprovedAt\n,\n \n$WorkItem\n.\nEnd\n \n);\n\n\n}", 
            "title": "Postwork Script"
        }, 
        {
            "location": "/ag/pm/pd/postwork_script/#common-operations", 
            "text": "Updating data model by action  Assign completion date to  Data Model  if user selects  Approve  action.  //Assign action  if   (   $WorkItem . SelectedAction   ==   Approve   )   { \n    $Xml . SetValue ( ApprovedAt ,   $WorkItem . End   );  }", 
            "title": "Common operations"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/", 
            "text": "Normal task are used to assign tasks on users. Every user task requires an role definition otherwise task is assigned to initiator of workflow instance.\n\n\nIn addition to \ncommon properties\n you can also configure the following properties for normal typed tasks;\n\n\nInstructions\n\nInstructions are for showing users descriptive text about a task. For example: \"Please review expense payment request.\" for approval task in workflow.\n\n\nInstructions can be written with \ndata template\n expressions to replace data from \ndata model\n.\n\n\nRole\n\nName of \nRoles\n, assigned to task. Tasks may share same roles if assigned to same users, If not specified task is assigned to initiator of workflow.\n\n\nOptions\n\nList of task options. Task options are provides quick accessible to following task properties:\n\n\n\n\nNotification\n\n\nFirst Reminder\n\n\nRepeating Reminder\n\n\nWatchers\n\n\n\n\nIf property enabled related icon is highlighted, task properties are not limited to options icons, Please use context menu to access more advanced properties.\n\n\nNotification\n\n\nConfigures the notification to be send at task when assigned to users. This notification is disabled by default. \n\n\nSend Notify Message\n\nCheck this field to send notification message.\n\n\nTemplate\n\nTemplate of notification. This option visible only when one or more \nmessage template\n defined.\n\n\nFirst Reminder\n\n\nAfter task is assigned, configures the reminder notification if task still is not completed. By default 30 minutes is set.\n\n\nDuration\n\nDuration of first reminder after task is assigned. Duration can be selected from list or can be manually entered in \nd.hh:mm:ss\n format. \n\n\nTemplate\n\nTemplate of reminder. This option visible only when one or more \nmessage template\n defined.\n\n\nRepeating Reminder\n\n\nAfter task is assigned or first reminder is sent, configures the repeating notification until task is complete. By default this notification is disabled.\n\n\nPlease use this property with caution, sending too much messages degrades the importance of notifications.\n\n\nDuration\n\nDuration of repeating reminders. Duration can be selected from list or can be manually entered in \nd.hh:mm:ss\n format. \n\n\nTemplate\n\nTemplate of reminder. This option visible only  when one or more \nmessage template\n are defined.\n\n\nDeadline\n\n\nConfigures the deadline time and action for assigned tasks to complete automatically.\n\n\nDuration\n\nDuration of deadline after task is assigned.  Duration can be selected from list or can be manually entered in \nd.hh:mm:ss\n format. Duration also can be set in \nprework script\n in more dynamic behavior.\n\n\nAction\n\nAction to be selected if deadline occurs. This option is not mandatory if auto completion of task is not requested.\n\n\nTemplate\n\nTemplate of notification message about deadline. This option only visible when one or more \nmessage template\n defined.\n\n\nWatchers\n\n\nConfigures the watcher role for assigned task. Watcher role is similar to role script they cannot perform any operation on task. Watched tasks are labelled with \nWatched\n label in user \nworklists\n and used for task notification and monitoring purposes.\n\n\nWatcher Role\n\nRole to assign as watcher.\n\n\nSend Notify Message\n\nCheck this field to send a notification message for watchers.\n\n\nTemplate\n\nTemplate of notification content. This option visible only when one or more \nmessage template\n are defined.\nForm\n\n\nConfigures the form to be show and form section states. If not specified task uses the default form from \npool\n settings but can be change at task level.", 
            "title": "Normal Tasks"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/#notification", 
            "text": "Configures the notification to be send at task when assigned to users. This notification is disabled by default.   Send Notify Message \nCheck this field to send notification message.  Template \nTemplate of notification. This option visible only when one or more  message template  defined.", 
            "title": "Notification"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/#first-reminder", 
            "text": "After task is assigned, configures the reminder notification if task still is not completed. By default 30 minutes is set.  Duration \nDuration of first reminder after task is assigned. Duration can be selected from list or can be manually entered in  d.hh:mm:ss  format.   Template \nTemplate of reminder. This option visible only when one or more  message template  defined.", 
            "title": "First Reminder"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/#repeating-reminder", 
            "text": "After task is assigned or first reminder is sent, configures the repeating notification until task is complete. By default this notification is disabled.  Please use this property with caution, sending too much messages degrades the importance of notifications.  Duration \nDuration of repeating reminders. Duration can be selected from list or can be manually entered in  d.hh:mm:ss  format.   Template \nTemplate of reminder. This option visible only  when one or more  message template  are defined.", 
            "title": "Repeating Reminder"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/#deadline", 
            "text": "Configures the deadline time and action for assigned tasks to complete automatically.  Duration \nDuration of deadline after task is assigned.  Duration can be selected from list or can be manually entered in  d.hh:mm:ss  format. Duration also can be set in  prework script  in more dynamic behavior.  Action \nAction to be selected if deadline occurs. This option is not mandatory if auto completion of task is not requested.  Template \nTemplate of notification message about deadline. This option only visible when one or more  message template  defined.", 
            "title": "Deadline"
        }, 
        {
            "location": "/ag/pm/pd/normal_tasks/#watchers", 
            "text": "Configures the watcher role for assigned task. Watcher role is similar to role script they cannot perform any operation on task. Watched tasks are labelled with  Watched  label in user  worklists  and used for task notification and monitoring purposes.  Watcher Role \nRole to assign as watcher.  Send Notify Message \nCheck this field to send a notification message for watchers.  Template \nTemplate of notification content. This option visible only when one or more  message template  are defined.\nForm  Configures the form to be show and form section states. If not specified task uses the default form from  pool  settings but can be change at task level.", 
            "title": "Watchers"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/", 
            "text": "Addition to \nnormal tasks\n process may contain module typed tasks to execute automated system tasks without involvement of any user interaction.\n\n\nModule type tasks are executed by workflow engine and does not appear on user's work lists.\n\n\nEach of module has a special behavior to fulfill process requirements and you can use the following module types in process diagram;\n\n\n\n\nSub Workflow\n\n\nWeb Service Producer\n\n\nAutomation\n\n\nEvent\n\n\nEvent Listener\n\n\n\n\nAutomation Module\n\n\nAutomation module typed tasks are used to execute scripts on process. Script may contain vary operations like updating database or data model.\n\n\nIn most cases automation script should take action by assign value to \n$WorkItem.SelectedAction\n property after is work is done. \n\n\nIn addition to common properties you can also configure the following properties for an automation task;\n\n\nScript\n\nContent of automation script.\n\n\nExample automation script\n\n\n$Xml.SetValue(\nCustomerCount\n, $Xml.EvaluateNumber(\nCustomerCount\n) + 1);\nif ( $Xml.EvaluateNumber(\nCustomerCount\n) \n 10\n \n)\n \n{\n\n  \n$\nWorkItem.SelectedAction =\n \nContinue\n;\n\n\n}\n \nelse\n \n{\n\n  \n$\nWorkItem.SelectedAction =\n \nCompleted\n;\n\n\n}\n\n\n\n\n\nStart Point\n\n\nAutomation module type tasks can be set as start point to initiate workflow instances as automated way.\n\n\nYou can initiate from module tasks with any of following scenarios;\n\n\nEvaluation\n\nYou can configure the evaluation schedule to periodically initiate workflow instances and take action. If module script does not take action, workflow instance is reverted.\n\n\nScripting Initiate\n\nYou may call the \nWorkItem.Initiate\n method to initiate from other processes.\n\n\nJoin State\n\n\nIf module is not set as start point and no action taken in script then workflow switches to join state to pause workflow instance at automation task and waits for indefinitely.\n\n\nWorkflow instance may continue with any of following scenarios;\n\n\nDeadline\n\nIf you assigned a deadline on task, workflow instance waits until deadline date occur and takes deadline action automatically to continue.\n\n\nEvaluation\n\nYou can configure the evaluation schedule to periodically check condition to continue or not.\n\n\nProcess Work Item\n\nYou may call the \nWorkItem.ProcessWorkItem\n method on other workflow instances to force module to continue.\n\n\nEvent Listener Module\n\n\nEvent listener module are used to wait for specific events or initiate new workflow instances when event is occurs. Events are triggered on domain scope and may receive events from other processes.\n\n\nIn addition to \ncommon properties\n you can also configure the following properties for an automation task;\n\n\nEvent Name\n\nName of event. Event name can set to a plain text value (Ex: Customer.New) or may contain \ndata template\n expressions to include data from data model. (Ex: \"PaymentComplete.{{Id}}\" )\n\n\nYou may also specify multiple event names with semicolon delimited format. (Ex: \"Customer.New;Customer.Update.{{Id}}\" )\n\n\nHandle Script\n\nScript to handle event and take action to continue workflow instance. If not set worfklow engine automatically selects the first action.\n\n\nAttached event data can be accessed with $Input variable as \nXmlNode\n instance.\n\n\nIf task configured as start point a new workflow instance is initiated and event data copied to current workflow \ndata model\n for name matching nodes. If handling script does not take any action workflow instance is reverted.\n\n\nIf task is not set as start point, workflow instance paused and waits until event is occurs. If handling script does not take any action then workflow instance continues to wait until next event occur.\n\n\nRemarks\n\n\nEvents are processed in synchronous behavior and if any exception occurs transaction is rollbacked.\n\n\nEvent Module\n\n\nEvent module is used to trigger an event to notify other listener type tasks about some specific event is occurs. Events are triggered on domain scope and may execute listeners in other processes.\n\n\nIn addition to \ncommon properties\n you can also configure the following properties for an automation task;\n\n\nEvent Name\n\nName of event. Event name can set to a plain text value (Ex: Customer.New) or may contain \ndata template\n expressions to include data from data model. (Ex: \"PaymentComplete.{{Id}}\" )\n\n\nYou may also specify multiple event names with semicolon delimited format. (Ex: \"Customer.New;Customer.Update.{{Id}}\" )\n\n\nEvent Data XPath\n\nXPath of event data to be passed to listeners. If set to empty value root element content is used. You can use $Input xml node variable to access related event data.\n\n\nHandle Script\n\nScript to handle event result and take action to continue workflow instance.\n\n\nIf no script defined first action is automatically selected.\n\n\nEvent results are stored in $Handlers named array of work item id numbers. If no listener exists array is empty.\n\n\nRemarks\n\n\nEvents are processed in synchronous behavior and if any exception occurs transaction is rollbacked.\n\n\nWeb Service Producer Module\n\n\nWeb Service Producer Module type tasks are used to expose task as web service endpoint to integrate with other external applications.\n\n\nWeb service definition (WSDL) is depend on \ndata model\n and can accessed from process toolbar from web interface or in following URL format;\n\n\nhttp(s)://\ndomain\n.workrunner.io/services/process/\nprocess id\n\n\nExample URL:\n \n\nhttp://mycompany.workrunner.io/services/process/1e95d0bb-80ab-467a-8421-83e73b339ed2\n\n\nWorkrunner uses Microsoft WCF infrastructure to host web services and compatible with industry standards.\n\n\nAuthentication\n\n\nService methods requires user and password information to impersonate as user. Authentication also requires client certificate authentication that uses self signed certificate for domain.\n\n\nIf service accessed from SSL connection basic authentication can be used. For more details please refer to \nhttps://msdn.microsoft.com/en-us/library/ms733775(v=vs.110).aspx\n \n\n\nIf no ssl used clear text authentication is supported but standard WCF implementation does not support this feature and requires additional custom binding to access web service. Example implementation can be found at \nhttp://webservices20.blogspot.com.tr/2008/11/introducing-wcf-clearusernamebinding.html\n\n\nSub Workflow\n\n\nSub workflow type tasks are useful for starting a new instance from the same process. Main and the sub workflows use the same XML. When this option is selected on the module page, a form comes to hand, consisting of the options below.\n\n\nPool\n\n\nSelect a pool to trigger a task (sub workflow) from.\n\n\nTask\n\n\nWhen pool is selected, its tasks are listed in this dropdown. Select one to trigger.\n\n\nMode\n\n\nThere are 3 options listed in the dropdown; \n\n\nCreate child instances and continue\n\nWith this option, after the sub workflows are created, the main workflow continues to the next task(s).\n\n\nSynchronize child instances and continue\n\nIf you choose this option, the sub workflows created can be synchronized by the main workflow. With this synchronization, whenever the main workflow's parent task is visited again, all related sub workflows can be updated according to the XML. For example assume that you created 2 sub workflows and then deleted one of them from the XML. When main workflow returns to that creator task, the sub workflow related with the one that was deleted from the XML will be terminated.\n\n\nWait for all childs to complete\n\nAll of the sub workflows must be completed in order for the main workflow to continue to next task(s). Until all its children is completed, main task waits on Join state.\n\n\nXPath\n\n\nUse this text box to specify the node name to be regarded to create the sub workflows with.\n\n\nCondition\n\n\nYou can indicate a condition to specialize the node selected on the previous option.\n\n\nRow Id XPath\n\n\nIf you are going to use the synchronize mode, write the name of your Id node which is located under your XPath, in order it to be checked to update the sub workflows properly.\n\n\nSync Data XPath\n\n\nIf you wrote down a row id xpath above but yet it is not enough to indicate the updated sub workflow's data on the XML, specify another node for synchronization. For example if one of your sub workflows has a AssignedTo node in its XML which holds the assignee information, changing this assignee information to someone else might have an effect on the related subworkflow, like to reassign the task to the new person.", 
            "title": "Module Tasks"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#automation-module", 
            "text": "Automation module typed tasks are used to execute scripts on process. Script may contain vary operations like updating database or data model.  In most cases automation script should take action by assign value to  $WorkItem.SelectedAction  property after is work is done.   In addition to common properties you can also configure the following properties for an automation task;  Script \nContent of automation script.  Example automation script  $Xml.SetValue( CustomerCount , $Xml.EvaluateNumber( CustomerCount ) + 1);\nif ( $Xml.EvaluateNumber( CustomerCount )   10   )   { \n   $ WorkItem.SelectedAction =   Continue ;  }   else   { \n   $ WorkItem.SelectedAction =   Completed ;  }", 
            "title": "Automation Module"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#start-point", 
            "text": "Automation module type tasks can be set as start point to initiate workflow instances as automated way.  You can initiate from module tasks with any of following scenarios;  Evaluation \nYou can configure the evaluation schedule to periodically initiate workflow instances and take action. If module script does not take action, workflow instance is reverted.  Scripting Initiate \nYou may call the  WorkItem.Initiate  method to initiate from other processes.", 
            "title": "Start Point"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#join-state", 
            "text": "If module is not set as start point and no action taken in script then workflow switches to join state to pause workflow instance at automation task and waits for indefinitely.  Workflow instance may continue with any of following scenarios;  Deadline \nIf you assigned a deadline on task, workflow instance waits until deadline date occur and takes deadline action automatically to continue.  Evaluation \nYou can configure the evaluation schedule to periodically check condition to continue or not.  Process Work Item \nYou may call the  WorkItem.ProcessWorkItem  method on other workflow instances to force module to continue.", 
            "title": "Join State"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#event-listener-module", 
            "text": "Event listener module are used to wait for specific events or initiate new workflow instances when event is occurs. Events are triggered on domain scope and may receive events from other processes.  In addition to  common properties  you can also configure the following properties for an automation task;  Event Name \nName of event. Event name can set to a plain text value (Ex: Customer.New) or may contain  data template  expressions to include data from data model. (Ex: \"PaymentComplete.{{Id}}\" )  You may also specify multiple event names with semicolon delimited format. (Ex: \"Customer.New;Customer.Update.{{Id}}\" )  Handle Script \nScript to handle event and take action to continue workflow instance. If not set worfklow engine automatically selects the first action.  Attached event data can be accessed with $Input variable as  XmlNode  instance.  If task configured as start point a new workflow instance is initiated and event data copied to current workflow  data model  for name matching nodes. If handling script does not take any action workflow instance is reverted.  If task is not set as start point, workflow instance paused and waits until event is occurs. If handling script does not take any action then workflow instance continues to wait until next event occur.", 
            "title": "Event Listener Module"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#remarks", 
            "text": "Events are processed in synchronous behavior and if any exception occurs transaction is rollbacked.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#event-module", 
            "text": "Event module is used to trigger an event to notify other listener type tasks about some specific event is occurs. Events are triggered on domain scope and may execute listeners in other processes.  In addition to  common properties  you can also configure the following properties for an automation task;  Event Name \nName of event. Event name can set to a plain text value (Ex: Customer.New) or may contain  data template  expressions to include data from data model. (Ex: \"PaymentComplete.{{Id}}\" )  You may also specify multiple event names with semicolon delimited format. (Ex: \"Customer.New;Customer.Update.{{Id}}\" )  Event Data XPath \nXPath of event data to be passed to listeners. If set to empty value root element content is used. You can use $Input xml node variable to access related event data.  Handle Script \nScript to handle event result and take action to continue workflow instance.  If no script defined first action is automatically selected.  Event results are stored in $Handlers named array of work item id numbers. If no listener exists array is empty.", 
            "title": "Event Module"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#remarks_1", 
            "text": "Events are processed in synchronous behavior and if any exception occurs transaction is rollbacked.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#web-service-producer-module", 
            "text": "Web Service Producer Module type tasks are used to expose task as web service endpoint to integrate with other external applications.  Web service definition (WSDL) is depend on  data model  and can accessed from process toolbar from web interface or in following URL format;  http(s):// domain .workrunner.io/services/process/ process id  Example URL:   http://mycompany.workrunner.io/services/process/1e95d0bb-80ab-467a-8421-83e73b339ed2  Workrunner uses Microsoft WCF infrastructure to host web services and compatible with industry standards.", 
            "title": "Web Service Producer Module"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#authentication", 
            "text": "Service methods requires user and password information to impersonate as user. Authentication also requires client certificate authentication that uses self signed certificate for domain.  If service accessed from SSL connection basic authentication can be used. For more details please refer to  https://msdn.microsoft.com/en-us/library/ms733775(v=vs.110).aspx    If no ssl used clear text authentication is supported but standard WCF implementation does not support this feature and requires additional custom binding to access web service. Example implementation can be found at  http://webservices20.blogspot.com.tr/2008/11/introducing-wcf-clearusernamebinding.html", 
            "title": "Authentication"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#sub-workflow", 
            "text": "Sub workflow type tasks are useful for starting a new instance from the same process. Main and the sub workflows use the same XML. When this option is selected on the module page, a form comes to hand, consisting of the options below.", 
            "title": "Sub Workflow"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#pool", 
            "text": "Select a pool to trigger a task (sub workflow) from.", 
            "title": "Pool"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#task", 
            "text": "When pool is selected, its tasks are listed in this dropdown. Select one to trigger.", 
            "title": "Task"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#mode", 
            "text": "There are 3 options listed in the dropdown;   Create child instances and continue \nWith this option, after the sub workflows are created, the main workflow continues to the next task(s).  Synchronize child instances and continue \nIf you choose this option, the sub workflows created can be synchronized by the main workflow. With this synchronization, whenever the main workflow's parent task is visited again, all related sub workflows can be updated according to the XML. For example assume that you created 2 sub workflows and then deleted one of them from the XML. When main workflow returns to that creator task, the sub workflow related with the one that was deleted from the XML will be terminated.  Wait for all childs to complete \nAll of the sub workflows must be completed in order for the main workflow to continue to next task(s). Until all its children is completed, main task waits on Join state.", 
            "title": "Mode"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#xpath", 
            "text": "Use this text box to specify the node name to be regarded to create the sub workflows with.", 
            "title": "XPath"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#condition", 
            "text": "You can indicate a condition to specialize the node selected on the previous option.", 
            "title": "Condition"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#row-id-xpath", 
            "text": "If you are going to use the synchronize mode, write the name of your Id node which is located under your XPath, in order it to be checked to update the sub workflows properly.", 
            "title": "Row Id XPath"
        }, 
        {
            "location": "/ag/pm/pd/module_tasks/#sync-data-xpath", 
            "text": "If you wrote down a row id xpath above but yet it is not enough to indicate the updated sub workflow's data on the XML, specify another node for synchronization. For example if one of your sub workflows has a AssignedTo node in its XML which holds the assignee information, changing this assignee information to someone else might have an effect on the related subworkflow, like to reassign the task to the new person.", 
            "title": "Sync Data XPath"
        }, 
        {
            "location": "/ag/pm/pd/actions/", 
            "text": "Actions are result of a \nTask \n and redirect workflows to next step.\n\n\n\n\nDepending on task type, actions can be selected by users or automated scripting operations. When an action is taken on task, Workrunner process engine continues to next step in workflow.\n\n\nFor a action you can configure following;\n\n\nName\n (Not visible in diagram)\n\nName of action. Name information are not visible to users and used to identify task.\n\n\nCaption\n\nCaption of action. Captions are shown to users and can be localized when needed. \n\n\nIs Hidden?\n\nCheck this field to hide action from users. Hiding an action may be useful for temporary disabling action or selecting as deadline action to escalate task.\n\n\nFollow Action\n\nCheck this field to follow action result. Following action result checks the next step in workflow is assigned to same user, if same user assigned automatically opens the next task without redirecting to user \nwork list\n.\n\n\nValidation Group\n\nName of validation rule groups. Use semicolon \";\" to specify multiple groups. If any rule in this group fails action cannot be selected.\n\n\nRequire Comment?\n\nCheck this field to request mandatory comment from user. In some cases like rejecting a form, you can force the user for specifying a reject reason.\n\n\nOrder\n\nA number value used for ordering actions within other actions. Higher values put action to last.\n\n\nFor a action you can configure also following properties to change appearance from context menu: \n\n\nClick right mouse button on the action, action design pop-up will open. Click on appearance title, start to change the action properties. \n\n\nIcon\n\nSelect icon to show user. \n\n\nColor\n\nSelect text color of action caption.\n\n\nBackground Color\n\nSelect background color of action caption.\n\n\nConfirmation Message\n\nEnter confirmation message to show user when action is selected. If not specified \"Are you sure you want to select the action \n ?\" text is displayed.\n\n\nAuto Select Script\n\n\nScripting based rule to auto select action. This script is useful when skip tasks without assign to users by certain conditions. For example auto select approve action when expense amount field is less than $100 \n.\n\n\n$Xml\n.\nEvaluateNumber\n(\nTotalAmount\n)\n \n \n100\n\n\n\n\n\nUser Select Script\n\n\nScript to execute just after action is selected. This script is useful for performing operations after action is selected.\n\n\nThis script is different from postwork because it runs on client side and it has user context. For example applying digital signature on file attachment.\n\n\nSign File Attachment\n\n\nvar\n \nformat\n \n=\n \nX\n;\n \n// X value is is default. BES, T, C, X, A values also can be used.\n\n\n\nWorkrunner\n.\nSignature\n.\nsignFiles\n(\n$Xml\n.\nSelectAll\n(\nFiles/File\n),\n \nformat\n).\nthen\n(\nfunction\n(\nresult\n)\n \n{\n\n\n    \nif\n \n(\nresult\n)\n \n{\n\n        \n// result.certificateName contains the name of signer\n\n        \n// result.certificateIssuer contains the issuer of signer certificate\n\n        \n// result.certificateSerialNumber contains the serial number of signer\n\n        \n// result.files.forEach(function(file) {\n\n            \n// file.sourceId contains source file id.\n\n        \n// });\n\n    \n}\n\n\n    \n$Complete\n(\n!!\nresult\n);\n\n\n});\n\n\n\n\n\nSigning basic plain text and fetching the signature file.\n\n\nWorkrunner\n.\nSignature\n.\nsignText\n(\nHello !\n,\n \ntrue\n,\n \nBES\n).\nthen\n(\nfunction\n(\nresult\n)\n \n{\n\n\n    \nif\n \n(\nresult\n)\n \n{\n\n        \n// result.certificateName contains the name of signer\n\n        \n// result.certificateIssuer contains the issuer of signer certificate\n\n        \n// result.certificateSerialNumber contains the serial number of signer\n\n        \n// result.files.forEach(function(file) {\n\n            \n// file.id contains the signature file id.\n\n        \n// });\n\n    \n}\n\n\n    \n$Complete\n(\n!!\nresult\n);\n\n\n});", 
            "title": "Actions"
        }, 
        {
            "location": "/ag/pm/pd/actions/#auto-select-script", 
            "text": "Scripting based rule to auto select action. This script is useful when skip tasks without assign to users by certain conditions. For example auto select approve action when expense amount field is less than $100 \n.  $Xml . EvaluateNumber ( TotalAmount )     100", 
            "title": "Auto Select Script"
        }, 
        {
            "location": "/ag/pm/pd/actions/#user-select-script", 
            "text": "Script to execute just after action is selected. This script is useful for performing operations after action is selected.  This script is different from postwork because it runs on client side and it has user context. For example applying digital signature on file attachment.  Sign File Attachment  var   format   =   X ;   // X value is is default. BES, T, C, X, A values also can be used.  Workrunner . Signature . signFiles ( $Xml . SelectAll ( Files/File ),   format ). then ( function ( result )   { \n\n     if   ( result )   { \n         // result.certificateName contains the name of signer \n         // result.certificateIssuer contains the issuer of signer certificate \n         // result.certificateSerialNumber contains the serial number of signer \n         // result.files.forEach(function(file) { \n             // file.sourceId contains source file id. \n         // }); \n     } \n\n     $Complete ( !! result );  });   Signing basic plain text and fetching the signature file.  Workrunner . Signature . signText ( Hello ! ,   true ,   BES ). then ( function ( result )   { \n\n     if   ( result )   { \n         // result.certificateName contains the name of signer \n         // result.certificateIssuer contains the issuer of signer certificate \n         // result.certificateSerialNumber contains the serial number of signer \n         // result.files.forEach(function(file) { \n             // file.id contains the signature file id. \n         // }); \n     } \n\n     $Complete ( !! result );  });", 
            "title": "User Select Script"
        }, 
        {
            "location": "/ag/pm/pd/roles/", 
            "text": "Roles are definition of who will be responsible for task. \n\n\nFor a role you can configure following:\n\n\nName\n\nName of role to identify.\n\n\nCaption\n\nCaption of role. Captions are shown to to users and can be localized when needed.\n\n\nRole Wizard\n\n\nRole Script\n\n\nScript that returns list of responsible persons.  \n\n\n\n\nInfo\n\n\nRole scripts requires at least one identity to continue. If role script is not empty and does not return any identity, Workrunner produces an error.\n\n\n\n\nExample Role Scripts\n\n\nRole script has a wizard to quickly build common used role definitions but can you use following example scripts if needed.\n\n\nAssign to specific identity.\n\nId number of identity can be specified from role wizard with selecting identity option.\n\n\n$Membership.Get(\nd3b1fe89-6873-4438-8762-164ed73a9054\n);\n\n\n\n\n\nAssign by Data Model field\n\nAssume data field has an \"Employee\" field which is filled by user form.\n\n\n$Xml.Evaluate(\nEmployee\n);\n\n\n\n\n\nAssign Multiple Users\n\nUsing a java script array, allows assigning multiple users.\n\n\n[ $Xml.Evaluate(\nEmployee\n), $Membership.Get(\nd3b1fe89-6873-4438-8762-164ed73a9054\n) ]\n\n\n\n\n\nAlternatively you can use semicolon to specify multiple users. \n\n\n$Xml.Evaluate(\nEmployee\n) + \n;\n + \nd3b1fe89-6873-4438-8762-164ed73a9054\n\n\n\n\n\n\nIdentity\n\n\nIdentity option is determined responsible person from the organization data. \n\n\n\n\nSearch person name in to identity field and click on name.\n\n\nWhen person name come to screen at the same time person identity code will appear in the role script field.\n\n\n\n\n\n\nData\n\n\nData option is assigned role from any data in the process.\n\n\n\n\nEnter the data word in to data field. You will see data code in the role script field.\n\n\n\n\nFind Manager\n\n\nFind manager consists two option, data and previous task.\n\n\n\n\nData option is assigned role from any data in the process. You will see data code in the role script field.\n\n\nPrevious task is assigned role from previous task. You will see previous task code in the role script field.", 
            "title": "Roles"
        }, 
        {
            "location": "/ag/pm/pd/roles/#role-wizard", 
            "text": "", 
            "title": "Role Wizard"
        }, 
        {
            "location": "/ag/pm/pd/roles/#role-script", 
            "text": "Script that returns list of responsible persons.     Info  Role scripts requires at least one identity to continue. If role script is not empty and does not return any identity, Workrunner produces an error.   Example Role Scripts  Role script has a wizard to quickly build common used role definitions but can you use following example scripts if needed.  Assign to specific identity. \nId number of identity can be specified from role wizard with selecting identity option.  $Membership.Get( d3b1fe89-6873-4438-8762-164ed73a9054 );  Assign by Data Model field \nAssume data field has an \"Employee\" field which is filled by user form.  $Xml.Evaluate( Employee );  Assign Multiple Users \nUsing a java script array, allows assigning multiple users.  [ $Xml.Evaluate( Employee ), $Membership.Get( d3b1fe89-6873-4438-8762-164ed73a9054 ) ]  Alternatively you can use semicolon to specify multiple users.   $Xml.Evaluate( Employee ) +  ;  +  d3b1fe89-6873-4438-8762-164ed73a9054", 
            "title": "Role Script"
        }, 
        {
            "location": "/ag/pm/pd/roles/#identity", 
            "text": "Identity option is determined responsible person from the organization data.    Search person name in to identity field and click on name.  When person name come to screen at the same time person identity code will appear in the role script field.", 
            "title": "Identity"
        }, 
        {
            "location": "/ag/pm/pd/roles/#data", 
            "text": "Data option is assigned role from any data in the process.   Enter the data word in to data field. You will see data code in the role script field.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/pd/roles/#find-manager", 
            "text": "Find manager consists two option, data and previous task.   Data option is assigned role from any data in the process. You will see data code in the role script field.  Previous task is assigned role from previous task. You will see previous task code in the role script field.", 
            "title": "Find Manager"
        }, 
        {
            "location": "/ag/pm/pd/routes/", 
            "text": "Routes are links between \nActions\n and \nTasks\n to build relation within process diagram.\n\n\n\n\nFor a route you can configure following properties from context menu:\n\n\nInstructions\n\nIf specified replaces next task instructions with entered instruction. This property is useful when override the \ndefault task instruction\n. For example an \nReject\n action may change next task instructions with approve task.\n\n\nValidation Rule\n\nValidation script rule to allow from route. If not specified route always valid.\n\n\nYou can draw more than one route to different tasks or same task and control workflow direction.\n\n\nIf no valid route found workflow is automatically terminates.\n\n\nSample Validation Rule\n\n\nValidate By Data Model\n\n\nFollowing rule allows route, only if total amount is greater than $100. \n\n\n$Xml.EvaluateNumber(\nTotalAmount\n) \n 100;", 
            "title": "Routes"
        }, 
        {
            "location": "/ag/pm/pd/routes/#sample-validation-rule", 
            "text": "", 
            "title": "Sample Validation Rule"
        }, 
        {
            "location": "/ag/pm/pd/routes/#validate-by-data-model", 
            "text": "Following rule allows route, only if total amount is greater than $100.   $Xml.EvaluateNumber( TotalAmount )   100;", 
            "title": "Validate By Data Model"
        }, 
        {
            "location": "/ag/pm/pd/message_templates/", 
            "text": "Message templates are list of templates to be used in notifications like task assignment or reminders. By default Workrunner uses predefined templates but message contents can be customized by creating a message template. For more information please refer to \ndata templates\n. \n\n\nThe following steps describes to create message templates in the Workrunner.\n\n\n\n\nTo open templates step in the pool. Click \nAdd New Template\n button, message templates design pop-up will open.\n\n\nEnter the following information.\n\n\n\n\nName\n\nName of  message template.\n\n\nSubject\n\nSubject of message template.\n\n\nType\n\nType of message template.\n\n\n\n\nStandart type is utilized to create content of written.\n\n\nXSLT type is utilized to create content of  xml.\n\n\n\n\nClick on \nDone\n button, edit and details button will appear below the form name. Details button is used for design message content.\n\n\nStandart Type:\n\nIf standart type is chosen, content area will open on the same page. Message template consists from text and form special field. \n\n\nWe will analysis the following screen content:\n\n\n\n\nDear is message of initiation word.\n\n\nIdentity is a field on the form. We want to bring data of identity from form into message. Before we find to identity under which title. \n\n\nOwner is title of identity.\n\n\nStart with two curly braces, enter \"Owner\" name and add a slash, enter \"Identity\" name and add two curly braces.\n\n\n\n\n\n\n\n\nClick on html button, message template text will transform to html format. \n\n\n\n\n\n\n\n\nClick Details button under the form name to close window.\n\n\n\n\nWhen the process runs, message will go to users' e-mail address. \n\n\nExample message in an e-mail:\n\n\n\n\nXSLT Type:\n\nIf XSLT type is chosen, content area will open on the same page. Message template consists of xml content.\n\n\nYou can use default templates or can create new templates.\n\n\nDefined templates can be also used in scripting. For more information please refer to \n$Templates\n page.\n\n\nDefault Templates\n\n\nBy default Workrunner uses following templates that stored in \"configuration/messagetemplates.xml\" file:\nTask Notification\n\n\nhtml\n\n\nbody\n \nstyle\n=\nmargin:0; padding:0\n\n \ndiv\n \nstyle\n=\nmargin:1em\n\n  \np\nb\n{{ $Recipients }}\n/\nb\n,\n/\np\n\n  \np\nYou have a new task named {{ $WorkItem.Caption }}.\n/\np\n\n  \np\n\n   \na\n \nstyle\n=\ndisplay:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;\n \nhref\n=\n{{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }}\n{{ $WorkItem.Caption }}\n/\na\n\n  \n/\np\n\n  \np\n{{ $WorkItem.Instructions }}\n/\np\n\n  \np\nu\nDetails\n/\nu\n\n   \nbr\n/\nbr\n\n   \nb\nForm number\n/\nb\n {{ $Instance.Number }},\nbr\n/\nbr\n\n   {{ if $WorkItem.DeadlineDate then \nb\nDeadline date\n/\nb\n {{ $WorkItem.DeadlineDate }} }}\n  \n/\np\n\n \n/\ndiv\n\n \ndiv\n \nstyle\n=\nmargin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666\n\n  \na\n \nhref\n=\n{{ $DomainUrl }}/\n\n   \nimg\n \nsrc\n=\n{{ $LogoUrl }}\n \nborder\n=\n0\n/\nimg\n\n  \n/\na\n\n \n/\ndiv\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\nFirst Reminder\n\n\nhtml\n\n\nbody\n \nstyle\n=\nmargin:0; padding:0\n\n \ndiv\n \nstyle\n=\nmargin:1em\n\n  \np\nb\n{{ $Recipients }}\n/\nb\n,\n/\np\n\n  \np\n{{ $WorkItem.Caption }} still waiting in your task list. Please review.\n/\np\n\n  \np\n\n   \na\n \nstyle\n=\ndisplay:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;\n \nhref\n=\n{{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }}\n{{ $WorkItem.Caption }}\n/\na\n\n  \n/\np\n\n  \np\n{{ $WorkItem.Instructions }}\n/\np\n\n  \np\nu\nDetails\n/\nu\n\n   \nbr\n/\nbr\n\n   \nb\nForm number\n/\nb\n {{ $Instance.Number }},\nbr\n/\nbr\n\n   {{ if $WorkItem.DeadlineDate then \nb\nDeadline date\n/\nb\n {{ $WorkItem.DeadlineDate }} }}\n  \n/\np\n\n \n/\ndiv\n\n \ndiv\n \nstyle\n=\nmargin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666\n\n  \na\n \nhref\n=\n{{ $DomainUrl }}/\n\n   \nimg\n \nsrc\n=\n{{ $LogoUrl }}\n \nborder\n=\n0\n/\nimg\n\n  \n/\na\n\n \n/\ndiv\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\nRepeating Reminder\n\n\nhtml\n\n\nbody\n \nstyle\n=\nmargin:0; padding:0\n\n \ndiv\n \nstyle\n=\nmargin:1em\n\n  \np\nb\n{{ $Recipients }}\n/\nb\n,\n/\np\n\n  \np\n{{ $WorkItem.Caption }} still waiting in your task list. Please review.\n/\np\n\n  \np\n\n   \na\n \nstyle\n=\ndisplay:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;\n \nhref\n=\n{{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }}\n{{ $WorkItem.Caption }}\n/\na\n\n  \n/\np\n\n  \np\n{{ $WorkItem.Instructions }}\n/\np\n\n  \np\nu\nDetails\n/\nu\n\n   \nbr\n/\nbr\n\n   \nb\nForm number\n/\nb\n {{ $Instance.Number }},\nbr\n/\nbr\n\n   {{ if $WorkItem.DeadlineDate then \nb\nDeadline date\n/\nb\n {{ $WorkItem.DeadlineDate }} }}\n\n/\np\n\n \n/\ndiv\n\n \ndiv\n \nstyle\n=\nmargin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666\n\n  \na\n \nhref\n=\n{{ $DomainUrl }}/\n\n   \nimg\n \nsrc\n=\n{{ $LogoUrl }}\n \nborder\n=\n0\n/\nimg\n\n  \n/\na\n\n \n/\ndiv\n\n\n/\nbody\n\n\n/\nhtml\n\nDeadline\n\nhtml\n\n\nbody\n \nstyle\n=\nmargin:0; padding:0\n\n \ndiv\n \nstyle\n=\nmargin:1em\n\n  \np\nb\n{{ $Recipients }}\n/\nb\n,\n/\np\n\n  \np\nYour {{ $WorkItem.Caption }} task is deadlined and automatically closed.\n/\np\n\n  \np\n\n   \na\n \nstyle\n=\ndisplay:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;\n \nhref\n=\n{{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }}\n{{ $WorkItem.Caption }}\n/\na\n\n  \n/\np\n\n  \np\nu\nDetails\n/\nu\n\n   \nbr\n/\nbr\n\n   \nb\nForm number\n/\nb\n {{ $Instance.Number }},\nbr\n/\nbr\n\n  \n/\np\n\n \n/\ndiv\n\n \ndiv\n \nstyle\n=\nmargin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666\n\n  \na\n \nhref\n=\n{{ $DomainUrl }}/\n\n   \nimg\n \nsrc\n=\n{{ $LogoUrl }}\n \nborder\n=\n0\n/\nimg\n\n  \n/\na\n\n \n/\ndiv\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\nWatch\n\n\nhtml\n\n\nbody\n \nstyle\n=\nmargin:0; padding:0\n\n \ndiv\n \nstyle\n=\nmargin:1em\n\n  \np\nb\n{{ $Recipients }}\n/\nb\n,\n/\np\n\n  \np\nA new {{ $WorkItem.Caption }} task assigned to {{ $AssignedTo }}. This email is been sent for your information and you can find task in your watch list later.\n/\np\n\n  \np\n\n   \na\n \nstyle\n=\ndisplay:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;\n \nhref\n=\n{{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }}\n{{ $WorkItem.Caption }}\n/\na\n\n  \n/\np\n\n  \np\n{{ $WorkItem.Instructions }}\n/\np\n\n  \np\nu\nDetails\n/\nu\n\n   \nbr\n/\nbr\n\n   \nb\nForm number\n/\nb\n {{ $Instance.Number }},\nbr\n/\nbr\n\n   {{ if $WorkItem.DeadlineDate then \nb\nDeadline date\n/\nb\n {{ $WorkItem.DeadlineDate }} }}\n  \n/\np\n\n \n/\ndiv\n\n \ndiv\n \nstyle\n=\nmargin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666\n\n  \na\n \nhref\n=\n{{ $DomainUrl }}/\n\n   \nimg\n \nsrc\n=\n{{ $LogoUrl }}\n \nborder\n=\n0\n/\nimg\n\n  \n/\na\n\n \n/\ndiv\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\nInfo\n\n\nBecause of mail client notifications do not include any external link (except images) to resources like style sheets or scripts. Otherwise mail client may refuse to load resources because of security and privacy.\n\n\n\n\nXSLT\n\n\nUses industry standard XSLT format but requires some technical skills. For more information please refer to \nhttps://www.google.com/search?q=xslt", 
            "title": "Message Templates"
        }, 
        {
            "location": "/ag/pm/pd/message_templates/#default-templates", 
            "text": "By default Workrunner uses following templates that stored in \"configuration/messagetemplates.xml\" file:\nTask Notification  html  body   style = margin:0; padding:0 \n  div   style = margin:1em \n   p b {{ $Recipients }} / b , / p \n   p You have a new task named {{ $WorkItem.Caption }}. / p \n   p \n    a   style = display:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;   href = {{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }} {{ $WorkItem.Caption }} / a \n   / p \n   p {{ $WorkItem.Instructions }} / p \n   p u Details / u \n    br / br \n    b Form number / b  {{ $Instance.Number }}, br / br \n   {{ if $WorkItem.DeadlineDate then  b Deadline date / b  {{ $WorkItem.DeadlineDate }} }}\n   / p \n  / div \n  div   style = margin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666 \n   a   href = {{ $DomainUrl }}/ \n    img   src = {{ $LogoUrl }}   border = 0 / img \n   / a \n  / div  / body  / html   First Reminder  html  body   style = margin:0; padding:0 \n  div   style = margin:1em \n   p b {{ $Recipients }} / b , / p \n   p {{ $WorkItem.Caption }} still waiting in your task list. Please review. / p \n   p \n    a   style = display:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;   href = {{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }} {{ $WorkItem.Caption }} / a \n   / p \n   p {{ $WorkItem.Instructions }} / p \n   p u Details / u \n    br / br \n    b Form number / b  {{ $Instance.Number }}, br / br \n   {{ if $WorkItem.DeadlineDate then  b Deadline date / b  {{ $WorkItem.DeadlineDate }} }}\n   / p \n  / div \n  div   style = margin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666 \n   a   href = {{ $DomainUrl }}/ \n    img   src = {{ $LogoUrl }}   border = 0 / img \n   / a \n  / div  / body  / html   Repeating Reminder  html  body   style = margin:0; padding:0 \n  div   style = margin:1em \n   p b {{ $Recipients }} / b , / p \n   p {{ $WorkItem.Caption }} still waiting in your task list. Please review. / p \n   p \n    a   style = display:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;   href = {{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }} {{ $WorkItem.Caption }} / a \n   / p \n   p {{ $WorkItem.Instructions }} / p \n   p u Details / u \n    br / br \n    b Form number / b  {{ $Instance.Number }}, br / br \n   {{ if $WorkItem.DeadlineDate then  b Deadline date / b  {{ $WorkItem.DeadlineDate }} }} / p \n  / div \n  div   style = margin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666 \n   a   href = {{ $DomainUrl }}/ \n    img   src = {{ $LogoUrl }}   border = 0 / img \n   / a \n  / div  / body  / html \nDeadline html  body   style = margin:0; padding:0 \n  div   style = margin:1em \n   p b {{ $Recipients }} / b , / p \n   p Your {{ $WorkItem.Caption }} task is deadlined and automatically closed. / p \n   p \n    a   style = display:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;   href = {{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }} {{ $WorkItem.Caption }} / a \n   / p \n   p u Details / u \n    br / br \n    b Form number / b  {{ $Instance.Number }}, br / br \n   / p \n  / div \n  div   style = margin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666 \n   a   href = {{ $DomainUrl }}/ \n    img   src = {{ $LogoUrl }}   border = 0 / img \n   / a \n  / div  / body  / html   Watch  html  body   style = margin:0; padding:0 \n  div   style = margin:1em \n   p b {{ $Recipients }} / b , / p \n   p A new {{ $WorkItem.Caption }} task assigned to {{ $AssignedTo }}. This email is been sent for your information and you can find task in your watch list later. / p \n   p \n    a   style = display:inline-block; padding:5px; border:outset 1px; background-color: #D7DEF0; text-decoration:none;   href = {{ $DomainUrl }}/app/?/workitem/{{ $WorkItem.Id }} {{ $WorkItem.Caption }} / a \n   / p \n   p {{ $WorkItem.Instructions }} / p \n   p u Details / u \n    br / br \n    b Form number / b  {{ $Instance.Number }}, br / br \n   {{ if $WorkItem.DeadlineDate then  b Deadline date / b  {{ $WorkItem.DeadlineDate }} }}\n   / p \n  / div \n  div   style = margin:0 0 0 0; padding:0.5em 0 0.5em 1em;background-color:#666 \n   a   href = {{ $DomainUrl }}/ \n    img   src = {{ $LogoUrl }}   border = 0 / img \n   / a \n  / div  / body  / html    Info  Because of mail client notifications do not include any external link (except images) to resources like style sheets or scripts. Otherwise mail client may refuse to load resources because of security and privacy.", 
            "title": "Default Templates"
        }, 
        {
            "location": "/ag/pm/pd/message_templates/#xslt", 
            "text": "Uses industry standard XSLT format but requires some technical skills. For more information please refer to  https://www.google.com/search?q=xslt", 
            "title": "XSLT"
        }, 
        {
            "location": "/ag/pm/data_model/", 
            "text": "Workrunner uses \nXML\n data standard to used or updated in the process or internal process data needed to make the process work. This format allows to perform advanced query (\nXPath\n or \nXQuery\n) methods and create multiple and nested data layouts to support all kinds of processes.\n\n\nData model defines the model of XML data. You can define your own model or import existing models from external systems to use when needed.\n\n\nData model consist on two types of object:\n\n\nElements\n\n\nDefines a data element.\n\n\nFor a element you can configure the following properties:\n\n\nName\n\nName of element.\n\n\nType\n\nType of element. Selected as choice of container, string, number, date time, date, time, check, check or custom defined type.\n\n\nIs List Item\n\nCheck this field to allow multiple instances of this element.\n\n\nMinimum Occurs\n\nDefines the at least how many elements should be created. Visible only when Is List Item is checked.\n\n\nUse\n\nSelect how element is used as a type or element reference. This field only valid when using external data types.\n\n\nTarget Schema\n\nSelect containing external schema to use as type or reference. This field is only valid when using external data types.\n\n\nIf type of field selected as container you can create child elements if needed.\n\n\n\n\nTypes\n\n\nDefines a custom data type to use as element later. Many processes uses same data type on different places like \"Person\" element with \"Name\" and \"Surname\" child.\n\n\nFor a type you can configure the following:\n\n\nName\n\nName of type to identity.\n\n\n\n\nTechnical Details\n\n\nData model is actually a XML schema designer for easy composing. You can use provided data model designer or use any xml schema editor to build your model.\n\n\nWhat is XML schema?\n\nXML schema is description of a type of \nXML\n document, typically expressed in terms of constraints on the structure and content of documents of that type. Please see \nhttp://en.wikipedia.org/wiki/XML_schema\n for more information.\n\n\nIn Workrunner, XML schema is used to generate and check process data model. You can define your schema or import any number of other schema with importing as a namespace.\n\n\nImporting External Data Types\n\nIf you have an external system and need to use it's data types in your model; you can add it as a new \nnamespace\n and provide XML Schema Location to load. Loaded schema sets are stored in \"External Xml Schemas\".", 
            "title": "Data Model"
        }, 
        {
            "location": "/ag/pm/data_model/#elements", 
            "text": "Defines a data element.  For a element you can configure the following properties:  Name \nName of element.  Type \nType of element. Selected as choice of container, string, number, date time, date, time, check, check or custom defined type.  Is List Item \nCheck this field to allow multiple instances of this element.  Minimum Occurs \nDefines the at least how many elements should be created. Visible only when Is List Item is checked.  Use \nSelect how element is used as a type or element reference. This field only valid when using external data types.  Target Schema \nSelect containing external schema to use as type or reference. This field is only valid when using external data types.  If type of field selected as container you can create child elements if needed.", 
            "title": "Elements"
        }, 
        {
            "location": "/ag/pm/data_model/#types", 
            "text": "Defines a custom data type to use as element later. Many processes uses same data type on different places like \"Person\" element with \"Name\" and \"Surname\" child.  For a type you can configure the following:  Name \nName of type to identity.", 
            "title": "Types"
        }, 
        {
            "location": "/ag/pm/data_model/#technical-details", 
            "text": "Data model is actually a XML schema designer for easy composing. You can use provided data model designer or use any xml schema editor to build your model.  What is XML schema? \nXML schema is description of a type of  XML  document, typically expressed in terms of constraints on the structure and content of documents of that type. Please see  http://en.wikipedia.org/wiki/XML_schema  for more information.  In Workrunner, XML schema is used to generate and check process data model. You can define your schema or import any number of other schema with importing as a namespace.  Importing External Data Types \nIf you have an external system and need to use it's data types in your model; you can add it as a new  namespace  and provide XML Schema Location to load. Loaded schema sets are stored in \"External Xml Schemas\".", 
            "title": "Technical Details"
        }, 
        {
            "location": "/ag/pm/xpath/", 
            "text": "XPath\n\n\nXPath is the XML Path Language which uses a \"path like\" syntax to browse through elements and attributes in an XML document.\nIt contains over 200 built-in functions for such as string values, numeric values, booleans, date and time comparison, node manipulation, sequence manipulation, and much more.\n\n\nIn XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document nodes.\nXML documents are treated as trees of nodes. The topmost element of the tree is called the root element.\n\n\nSelecting Nodes\n\n\nXPath uses path expressions to select nodes in an XML document. The most useful path expressions are listed below:\n\n\n\n\n\n\n\n\nExpression\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnodename\n\n\nSelects all nodes with the name \"nodename\"\n\n\n\n\n\n\n@\n\n\nSelects attributes\n\n\n\n\n\n\n/\n\n\nSelects from the root node\n\n\n\n\n\n\n//\n\n\nSelects nodes in the document from the current node that  match the selection no matter where they are\n\n\n\n\n\n\n.\n\n\nSelects the current node\n\n\n\n\n\n\n..\n\n\nSelects the parent of the current node\n\n\n\n\n\n\n\n\nWe will be presenting a couple of XPath examples for the following example of XML document :\n\n\nbookstore\n\n  \nbook\n\n    \ntitle\n \nlang\n=\nen\nA Clockwork Orange\n/\ntitle\n\n    \nauthor\nAnthony Burgess\n/\nauthor\n\n    \nyear\n1962\n/\nyear\n\n    \nprice\n19.99\n/\nprice\n\n  \n/\nbook\n\n  \nbook\n\n    \ntitle\n \nlang\n=\nen\nNineteen Eighty-Four\n/\ntitle\n\n    \nauthor\nGeorge Orwell\n/\nauthor\n\n    \nyear\n1949\n/\nyear\n\n    \nprice\n14.99\n/\nprice\n\n  \n/\nbook\n\n\n/\nbookstore\n\n\n\n\n\nHere are some path expressions and the result of the expressions:\n\n\n\n\n\n\n\n\nPath Expression\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nbookstore\n\n\nSelects all nodes with the name \"bookstore\"\n\n\n\n\n\n\n/bookstore\n\n\nSelects the root element bookstore. (Note: If the path starts with a slash ( / ) it always represents an absolute path to an element!)\n\n\n\n\n\n\nbookstore/book\n\n\nSelects all book elements that are children of bookstore\n\n\n\n\n\n\n//book\n\n\nSelects all book elements no matter where they are in the document\n\n\n\n\n\n\nbookstore//book\n\n\nSelects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element\n\n\n\n\n\n\n//@lang\n\n\nSelects all attributes that are named lang\n\n\n\n\n\n\n\n\nPredicates\n\n\nPredicates are used to find a specific node or a node that contains a specific value. Predicates are always embedded in square brackets.\n\n\nIn the table below we have listed some path expressions with predicates and the result of the expressions:\n\n\n\n\n\n\n\n\nPath Expression\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n/bookstore/book\n1\n\n\nSelects the first book element that is the child of the bookstore element. (Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is \n1\n. To solve this problem in IE, set the SelectionLanguage to XPath: In JavaScript: xml.setProperty(\"SelectionLanguage\",\"XPath\"); )\n\n\n\n\n\n\n/bookstore/book[last()]\n\n\nSelects the last book element that is the child of the bookstore element\n\n\n\n\n\n\n/bookstore/book[last()-1]\n\n\nSelects the last but one book element that is the child of the bookstore element\n\n\n\n\n\n\n/bookstore/book[position()\n3]\n\n\nSelects the first two book elements that are children of the bookstore element\n\n\n\n\n\n\n//title[@lang]\n\n\nSelects all the title elements that have an attribute named lang\n\n\n\n\n\n\n//title[@lang='en']\n\n\nSelects all the title elements that have a \"lang\" attribute with a value of \"en\"\n\n\n\n\n\n\n/bookstore/book[price\n35.00]\n\n\nSelects all the book elements of the bookstore element that have a price element with a value greater than 35.00\n\n\n\n\n\n\n/bookstore/book[price\n35.00]/title\n\n\nSelects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00\n\n\n\n\n\n\n\n\nSelecting Unknown Nodes\n\n\nXPath wildcards can be used to select unknown XML nodes.\n\n\n\n\n\n\n\n\nWildcard\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nMatches any element node\n\n\n\n\n\n\n@*\n\n\nMatches any attribute node\n\n\n\n\n\n\nnode()\n\n\nMatches any node of any kind\n\n\n\n\n\n\n\n\nIn the table below we have listed some path expressions and the result of the expressions:\n\n\n\n\n\n\n\n\nPath Expression\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n/bookstore/*\n\n\nSelects all the child element nodes of the bookstore element\n\n\n\n\n\n\n//*\n\n\nSelects all elements in the document\n\n\n\n\n\n\n//title[@*]\n\n\nSelects all title elements which have at least one attribute of any kind\n\n\n\n\n\n\n\n\nSelecting Several Paths\n\n\nBy using the | operator in an XPath expression you can select several paths.\n\n\nIn the table below we have listed some path expressions and the result of the expressions:\n\n\n\n\n\n\n\n\nPath Expression\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n//book/title | //book/price\n\n\nSelects all the title AND price elements of all book elements\n\n\n\n\n\n\n//title | //price\n\n\nSelects all the title AND price elements in the document |\n\n\n\n\n\n\n/bookstore/book/title | //price\n\n\nSelects all the title elements of the book element of the bookstore element AND all the price elements in the document\n\n\n\n\n\n\n\n\nXPath Axes\n\n\nAn axis defines a node-set relative to the current node.\n\n\n\n\n\n\n\n\nAxisName\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nancestor\n\n\nSelects all ancestors (parent, grandparent, etc.) of the current node\n\n\n\n\n\n\nancestor-or-self\n\n\nSelects all ancestors (parent, grandparent, etc.) of the current node and the current node itself\n\n\n\n\n\n\nattribute\n\n\nSelects all attributes of the current node\n\n\n\n\n\n\nchild\n\n\nSelects all children of the current node\n\n\n\n\n\n\ndescendant\n\n\nSelects all descendants (children, grandchildren, etc.) of the current node\n\n\n\n\n\n\ndescendant-or-self\n\n\nSelects all descendants (children, grandchildren, etc.) of the current node and the current node itself\n\n\n\n\n\n\nfollowing\n\n\nSelects everything in the document after the closing tag of the current node\n\n\n\n\n\n\nfollowing-sibling\n\n\nSelects all siblings after the current node\n\n\n\n\n\n\nnamespace\n\n\nSelects all namespace nodes of the current node\n\n\n\n\n\n\nparent\n\n\nSelects the parent of the current node\n\n\n\n\n\n\npreceding\n\n\nSelects all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes\n\n\n\n\n\n\npreceding-sibling\n\n\nSelects all siblings before the current node\n\n\n\n\n\n\nself\n\n\nSelects the current node\n\n\n\n\n\n\n\n\nXPath Operators\n\n\nBelow is a list of the operators that can be used in XPath expressions:\n\n\n\n\n\n\n\n\nOperator\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n|\n\n\nComputes two node-sets\n\n\n//book | //cd\n\n\n\n\n\n\n+\n\n\nAddition\n\n\n6 + 4\n\n\n\n\n\n\n-\n\n\nSubtraction\n\n\n6 - 4\n\n\n\n\n\n\n*\n\n\nMultiplication\n\n\n6 * 4\n\n\n\n\n\n\ndiv\n\n\nDivision\n\n\n8 div 4\n\n\n\n\n\n\n=\n\n\nEqual\n\n\nprice=9.80\n\n\n\n\n\n\n!=\n\n\nNot equal\n\n\nprice!=9.80\n\n\n\n\n\n\n\n\nLess than\n\n\nprice\n9.80\n\n\n\n\n\n\n=\n\n\nLess than or equal to\n\n\nprice\n=9.80\n\n\n\n\n\n\n\n\nGreater than\n\n\nprice\n9.80\n\n\n\n\n\n\n=\n\n\nGreater than or equal to\n\n\nprice\n=9.80\n\n\n\n\n\n\nor\n\n\nor\n\n\nprice=9.80 or price=9.70\n\n\n\n\n\n\nand\n\n\nand\n\n\nprice\n9.00 and price\n9.90\n\n\n\n\n\n\nmod\n\n\nModulus (division remainder)\n\n\n5 mod 2\n\n\n\n\n\n\n\n\nXQuery\n\n\nXQuery is a language that designed to query XML data. It is built on XPath expressions so one that wants to use XQuery must know how to use XPath. \n\n\nXQuery grounds on the five expressions whose acronym is FLWOR (pronounced \"flower\").\n\n\n\n\nFor\n - selects a sequence of nodes\n\n\nLet\n - binds a sequence to a variable\n\n\nWhere\n - filters the nodes\n\n\nOrder by\n - sorts the nodes\n\n\nReturn\n - what to return (gets evaluated once for every node)\n\n\n\n\nWith these expressions (not necessarily with all of them) one can query any XML data.\n\n\nBesides the main features of XQuery there is an extension called XQuery Update Facility which introduces some useful features to XQuery.\n\n\nThe XQuery Update Facility is a relatively small extension of the XQuery language which provides convenient means of modifying XML documents or data. As of March 14, 2008, the \nXQuery Update Facility specification\n has become a \"Candidate Recommendation\", which means it is now pretty stable.\n\n\nWhy an update facility in XML Query?\n \nThe answer seems obvious, yet after all the XQuery language itself - or its cousin XSLT2 - is powerful enough to write any transformation of an XML tree. Therefore a simple \"store\" or \"put\" function, applied to the result of such transformation, could seem sufficient to achieve any kind of database update operation. Well, perhaps. In practice this would be neither very natural, convenient, nor very efficient (such an approach requires storing back the whole document and makes optimizing very difficult). So as we will see the little complexity added by XQuery Update seems quite worth the effort.\n\n\nThe Instructions below give a quick yet comprehensive practical introduction to the XQuery Update extension, while highlighting some of its peculiarities.\n\n\nPrerequisites:\n the reader is presumed to have some acquaintance with XML Query and its Data Model (the abstract representation of XML data, involving nodes of six types: document, element, attribute, text, comment, processing-instruction).\n\n\nProcessing models\n\n\nThere are two main ways of using the update primitives:\n\n\n\n\n\n\nDirect update of an XML database:\n\n\nIn the examples in previous topic, nodes belonging to a database are selected then updated.\n\n\n\n\nNote\n\n\nThe XQUF notion of a database is very general: it means any collection of XML documents or well-formed fragments (trees).\n\n\n\n\nXQuery Update does not define precisely the protocol by which updating operations are applied to a database. This is left to implementations. For example transaction and isolation issues are not addressed by the specifications.\n\n\nIt is simply assumed that updates are applied to the database when the execution of a script completes. The language is designed in such a way that semantics of the \"apply-updates\" operation are precisely defined, yet as much space as possible is left for optimization by database implementations.   \n\n\nPoints to be noticed:\n\n\n\n\n\n\nUpdates are not applied immediately as the updating expression executes. Instead they are accumulated into a \"Pending Update List\". At some point at the end of the execution, Pending Updates are applied all at once, and the database is updated atomically.\n\n\n\n\n\n\nA noticeable consequence is that updates are not visible during the script execution, but only after. This can be fairly off-putting for a developer. It also has a definite influence on programming style. We will see later examples of this effect and how to cope with it.\n\n\n\n\n\n\nThe same expression can update several documents at once. The examples above could be applied to any collection of documents instead of the single document doc.xml. Example:\n\nfor $name in collection(\n/allbooks\n)//CATEGORY/NAME\nreturn rename node $name as CATEGORY_NAME\n\n\n\n\n\n\n\n\n\n\n\nTransforms without side effects:\n\n\nThe XQUF has a supplementary operation called transform which updates a copy of an existing node, without modifying the original, and returns the transformed tree.\n\n\nThe following example produces a transformed version of doc.xml without actually touching the original document:\n\n\ncopy\n \n$d\n \n:=\n \ndoc\n(\ndoc.xml\n)\n \n\nmodify\n \n(\n\n  \nfor\n \n$n\n \nin\n \n$d\n//CATEGORY/NAME\n\n  \nreturn\n \nrename\n \nnode\n \n$n\n \nas\n \nCATEGORY_NAME\n\n\n)\n\n\nreturn\n \n$d\n\n\n\n\n\nNotice that within the modify clause, XQUF forbids modifying the original version of copied trees (here the document doc.xml itself); only the copied trees can be modified. \nThe following expression would cause an error:\n\n\ncopy\n \n$d\n \n:=\n \ndoc\n(\ndoc.xml\n)\n\n\n\nmodify\n \n(\n\n  \nfor\n \n$n\n \nin\n \ndoc\n(\ndoc.xml\n)\n//CATEGORY/NAME(: *** wrong *** :)\n\n  \nreturn\n \nrename\n \nnode\n \n$n\n \nas\n \nCATEGORY_NAME\n\n\n)\n\n\nreturn\n \n$d\n\n\n\n\n\n\n\n\n\nPrimitive operations\n\n\nThe XQuery Update Facility (abbreviated as XQUF) provides five basic operations acting upon XML nodes:\n\n\n\n\ninsert\n one or several nodes inside/after/before a specified node\n\n\ndelete\n one or several nodes\n\n\nreplace a node\n (and all its descendants if it is an element) by a sequence of nodes.\n\n\nreplace the contents\n (children) of a node with a sequence of nodes, or the \nvalue\n of a node with a string value.\n\n\nrename\n a node (applicable to elements, attributes and processing instructions) without affecting its contents or attributes.\n\n\n\n\nCombination of update primitives with the base language\n\nTypically, we use some plain query to select the node(s) we want to update, then we apply update operations on those nodes. This is similar to the \nSQL UPDATE... WHERE...\n instruction.\n\n\nExample 1:\n in a document doc.xml, rename all elements children of a \nCATEGORY\n as \nCATEGORY_NAME\n:\n\n\nfor\n \n$name\n \nin\n \ndoc\n(\ndoc.xml\n)\n//CATEGORY/NAME   (: selection :)\n\n\nreturn\n \nrename\n \nnode\n \n$name\n \nas\n \nCATEGORY_NAME\n    \n(\n:\n \nupdate\n \n:\n)\n\n\n\n\n\nExample 2:\n for all \nBOOK\n elements which have an attribute Id, replace that attribute with a child \nID\n in first position:\n\n\nfor\n \n$idattr\n \nin\n \ndoc\n(\ndata.xml\n)\n//BOOK/@Id     (: selection :)\n\n\nreturn\n \n(\n           \n   \ndelete\n \nnode\n \n$idattr\n,\n                      \n(\n:\n \nupdate\n \n1\n \n:\n)\n\n   \ninsert\n \nnode\n \nID\n{\nstring\n(\n$idattr\n)}\n/ID\n    (: update 2 :)\n\n      \nas\n \nfirst\n \ninto\n \n$idattr\n/\n..\n\n\n)\n\n\n\n\n\nWith the latter script the following fragment\n\n\nBOOK\n \nId=\n0025\nsome content\n/BOOK\n \n\n\n\n\nwould be modified into:\n\n\nBOOK\nID\n0025\n/ID\nsome content\n/BOOK\n \n\n\n\n\n\n\nNote\n\n\nIn the second example, it is completely irrelevant whether the \ndelete\n is written after or before the \ninsert node\n. This surprising property of XQUF is explained below.\n\n\n\n\nThere are some restrictions in the way the 5 updating operations can mix with the base XQuery language. XQUF makes a distinction between Updating Expressions (which encompass update primitives) and non-updating expressions. Updating Expressions cannot appear anywhere. This topic will be explained in more detail.\n\n\ndelete nodes\n\n\nSyntax:\n\n\ndelete node location\n\n\ndelete nodes location\n\n\nThe expression location represents a sequence of nodes which are marked for deletion (the actual number of nodes does not need to match the keyword node or nodes).\n\n\ninsert nodes\n\n\nSyntax:\n\n\ninsert (node|nodes) items into path\n\n\ninsert (node|nodes) items as first into Path\n\n\ninsert (node|nodes) items as last into Path\n\n\ninsert (node|nodes) items before Path\n\n\ninsert (node|nodes) items after Path\n\n\nThe expression Path must point to a single target node.\n\n\nThe expression items must yield a sequence of items to insert relatively to the target node.\n\n\nNotice that even though the keyword \nnode\n or \nnodes\n are used, the inserted items can be non-node items. What happens actually is that the string values of non-node items are concatenated to form text nodes.\n\n\n\n\n\n\nIf either form of into is used, then the target node must be an element or a document. The items to insert are treated exactly as the contents of an element constructor.\n\n\nFor example if \n$target\n points to an empty element \nCONT/\n,\n\ninsert nodes (attribute A { 5.4 }, \nchild1/\n, \ntext\n, 2 to 4)\ninto $target\n\n\n\nyields:\n\n\nCONT\n \nA=\n5.4\nchild1/\ntext 2 3 4\n/CONT\n\n\n\n\n\nTherefore the same rules as in constructors apply: item order is preserved, a space is inserted between consecutive non-node items, inserted nodes are copied first, attribute nodes are not allowed after other item types, etc.\n\n\n\n\n\n\nWhen the keywords \nas first\n (resp. as \nlast\n) are used, the items are inserted before (resp. after) any existing children of the element.\n\n\nFor example if \n$target\n points to an element \nparent\nkid/\n/parent\n\n\ninsert node \nelder/\n as first into $target\n\n\n\n\nyields:\n\n\nparent\nelder/\nkid/\n/parent\n\n\n\n\n\nWhen the only keyword into is used, the resulting position is implementation dependent. It is only guaranteed that as first into and as last into have priority over into.\n\n\n\n\n\n\nIf before or after are used, any node type is allowed for the target node.\n\n\n\n\n\n\nAttributes are a special case: regardless of the before or after keyword used, attributes are always inserted into the parent element of the target. The order of inserted attributes is unspecified. Name conflicts can generate errors.\n\n\n\n\n\n\nreplace node\n\n\nSyntax:\n\n\nreplace node location with items\n\n\nThe expression location must point to a single target node.\n\n\nThe expression items must yield a sequence of items that will replace the target node.\n\n\n\n\n\n\nExcept for document and attribute node types, the target node can be replaced by any sequence of items. The replacing items are treated exactly as the contents of an element/document constructor.\n\n\nFor example if \n$target\n points to an element \nP\nkid/\nsome text\n/P\n,\n\n\nreplace node $target/kid with \nhere is\n\n\n\n\n\nyields:\n\n\nP\nhere is some text\n/P\n\n\n\n\n\n\n\n\n\nAttributes are a special case: they can only be replaced by an attribute node. Name conflicts can generate errors.\n\n\n\n\n\n\nreplace node value\n\n\nSyntax:\n\n\nreplace value of node location with items\n\n\nHere the identity of the target node is preserved. Only its value or contents (for an element or a document) is replaced.\n\n\n\n\n\n\nIf the target is an element or a document node, then all its former children are removed and replaced. The replacing items are treated exactly as the contents of a text constructor (so all node items are replaced by their string-value).\n\n\nFor example if \n$target\n points to an element \nP\nkid/\nsome text\n/P\n,\n\n\nreplace value of node $target with (\ntext\nlet\ns count: \n/text\n, 1 to 3, \n...\n)\n\n\n\n\nyields:\n\n\nP\nlet\ns count: 1 2 3 ...\n/P\n\n\n\n\n\nSo the element contents are replaced by a text node whose value is the concatenation of the string values of replacing items.\n\n\n\n\n\n\nIf the target node is a leaf node (attribute, text, comment, processing-instruction) then its string value is replaced by the concatenation of the string values of replacing items.\n\n\nFor example if \n$target\n points to an element \nP order=\nold\nsome text\n/P\n,\n\n\nreplace value of node $target/@order with (1 to 3, \nell\n...\n/ell\n)\n\n\n\n\nyields:\n\n\nP\n \norder=\n1 2 3...\nsome text\n/P\n\n\n\n\n\n\n\n\n\nrename node\n\n\nSyntax:\n\n\nrename node location as name-expression\n\n\nThe expression location must point to a single target element, attribute or processing-instruction.\n\n\nThe expression name-expression must yield a single QName or string item.\n\n\nFor example if \n$target\n points to an element \nCONT B=\nb\nsome text\n/CONT\n\n\nrename node $target as qName(\nsome.namespace\n, \nCONTAINER\n),\nrename node $target/B as \nNEWB\n\n\n\nyields:\n\nns1:CONTAINER\n \nNEWB=\nb\n \nxmlns:ns1=\nsome.namespace\nsome text\n/ns1:CONTAINER\n\n\n\n\ntransform\n\n\nSyntax:\n\n\ncopy\n \n$var\n \n:=\n \nnode\n \n[,\n \n$var2\n \n:=\n \nnode2\n \n...]\n\n\nmodify\n \nupdating\n-\nexpression\n\n\nreturn\n \nexpression\n\n\n\n\n\nEach node expression is copied (at least virtually) and bound to a variable.\n\n\nThe updating-expression contains or invokes one or several update primitives. These primitives are allowed to act only upon the copied XML trees, pointed by the bound variables. Therefore the transform expression has no side effect.\n\n\nBefore the return expression is evaluated, all updates are applied to the copied trees. Typically the return expression would be a bound variable, or a node constructor involving the bound variables, so it will yield the updated tree(s).\n\n\nFor example if \n$target\n points to an element\n\n\ncopy\n \n$target\n \n:=\n \nCONT\n \nid\n=\n001\nsome\n \ntext\n/CONT\n\n\nmodify\n \n(\n\n   \nrename\n \nnode\n \n$target\n \nas\n \nSECTION\n,\n\n   \ninsert\n \nnode\n \nTITLE\nThe\n \ntitle\n/TITLE\n as first into $target\n\n\n)\n\n\nreturn\n \nelement\n \nDOC\n \n{\n \n$target\n \n}\n\n\n\n\n\nreturns:\n\nDOC\nSECTION\n \nid=\n001\nTITLE\nThe title\n/TITLE\nsome text\n/SECTION\n/DOC\n\n\n\n\nInvisible update problem\n\n\nThe fact that updates are applied only at the end of a script execution has two consequences on programming, one disturbing, one pleasant:\n\n\n\n\n\n\nThe disturbing consequence is that you don't see your updates until the end, therefore you cannot build on your changes to make other changes.\n\n\nAn example: suppose you have elements named PERSON. Inside a \nPERSON\n there can be a list of \nBID\n elements (representing bids made by this person), and you want the \nBID\n elements to be wrapped in a \nBIDS\n element. But initially the \nPERSON\n has no \nBIDS\n child.\n\n\nInitially:\n\nPERSON\n \nid=\np0103\n\n  \nNAME\nJane\n/NAME\n\n\n/PERSON\n\n\n\n\nWe want to insert \nBID id=\nb0022\ndata\n/BID\n to obtain:\n\n\nPERSON\n \nid=\np0103\n\n  \nNAME\nJane\n/NAME\n\n  \nBIDS\n\n     \nBID\n \nid=\nb0022\ndata\n/BID\n\n  \nBIDS\n\n\n/PERSON\n\n\n\n\n\nClassically, for example using the \nDOM\n, we would proceed in two steps:\n\n\n\n\nIf there is no \nBIDS\n element inside \nPERSON\n, then create one\n\n\nthen insert the \nBID\n element inside the \nBIDS\n element\n\n\n\n\nIn XQuery Update this would (incorrectly) be written like this:\n\n\ndeclare\n \nupdating\n \nfunction\n \ninsert\n-\nbid\n(\n$person\n,\n \n$bid\n)\n\n\n{\n\n  \nif\n(\nempty\n(\n$person\n/\nBIDS\n))\n\n    \nthen\n \ninsert\n \nnode\n \nBIDS\n/\n \ninto\n \n$person\n\n    \nelse\n \n(),\n\n  \ninsert\n \nnode\n \n$bid\n \nas\n \nlast\n \ninto\n \n$person\n/\nBIDS\n\n\n}\n\n\n\n\n\n\n\nInfo\n\n\nDon't try that: it won't work! Why?\n\nBecause the \nBIDS\n element will be created only at the very end, therefore the instruction insert ... as last into \n$person/BIDS\n will not find any node matching \n$person/BIDS\n, hence throw an execution error.\n\n\n\n\nSo what is a correct way of doing ? We need a self-sufficient solution for each of the two cases:   \n\n\ndeclare\n \nupdating\n \nfunction\n \ninsert\n-\nbid\n(\n$person\n,\n \n$bid\n)\n\n\n{\n\n \nif\n(\nempty\n(\n$person\n/\nBIDS\n))\n\n   \nthen\n \ninsert\n \nnode\n \nBIDS\n{\n$bids\n}\n/BIDS\n into $person\n\n   \nelse\n \ninsert\n \nnode\n \n$bid\n \nas\n \nlast\n \ninto\n \n$person\n/\nBIDS\n\n\n}\n\n\n\n\n\n\n\n\n\nThe pleasant consequence is that the document(s) on which you are working are stable during execution of your script. You can rest assured that you are not sawing the branch you are sitting on. For example you can quietly write:\n\n\nfor\n \n$x\n \nin\n \ncollection\n(...)\n//X\n\n\nreturn\n \ndelete\n \nnode\n \n$x\n\n\n\n\n\nThis is perfectly predictable and won't stop prematurely. Or you can replicate an element after itself without risking looping forever:\n\n\nfor\n \n$x\n \nin\n \ncollection\n(...)\n//X\n\n\nreturn\n \ninsert\n \nnode\n \n$x\n \nafter\n \n$x\n\n\n\n\n\n\n\n\n\nMixed Updates and Non-updating Expressions\n\n\nUpdating Expressions are XQuery expressions that encompass the 5 updating primitives.\n\n\nThere are rules about mixing Updating and Non-updating Expressions:\n\n\n\n\n\n\nFirst of all, let us remember that Updating Expressions do not return any value. They simply add an update request to a list. Eventually the updates in the list are applied at the end of a script execution (or at the end of the \nmodify\n clause in the case of the \ntransform\n expression).\n\n\n\n\n\n\nUpdating Expressions are therefore not allowed in places where a meaningful value is expected. For example the condition of a if, the right hand-side of a \nlet :=\n, the in part of a \nfor\n and so on.\n\n\n\n\n\n\nMixing Updating and Non-updating Expressions is not allowed in a sequence (the comma operator). Though technically feasible, it would not make much sense to mix expressions that return a value and expressions that don't remember that the sequence operator returns the concatenation of the sequences returned by its components.\n\n\n\n\n\n\nThe \nfn:error()\n function and the empty sequence () are special as they can appear both in Updating and in non-updating expressions.\n\n\n\n\n\n\nIn the same way, the branches of a \nif clause\n or a \ntypeswitch\n must be consistent: both Updating or both Non-updating. If both branches are Updating then the if itself is considered Updating, and conversely.\n\n\n\n\n\n\nIf the body of a function is an Updating Expression, then the function must be declared with the \nupdating\n keyword. Example:\n\n\ndeclare\n \nupdating\n \nfunction\n \ninsert\n-\nid\n(\n$elem\n,\n \n$id\n-\nvalue\n)\n \n{\n\n   \ninsert\n \nnode\n \nattribute\n \nid\n \n{\n \n$id\n-\nvalue\n \n}\n \ninto\n \n$elem\n\n\n}\n\n\n\n\n\nA call to such a function is itself considered an Updating Expression. Logically enough, an updating function returns no value and therefore is not allowed to declare a return type.\n\n\n\n\n\n\nOrders and conflicts\n\n\nAnother consequence of the \"Pending Updates\" mechanism is that the order in which updates are specified is not important. In the following example you can without any issue delete the attribute Id (pointed by \n$idattr\n), and after use \n$idattr/..\n (the parent ITEM element) for inserting! Or you could insert first and delete after.\n\n\nfor\n \n$idattr\n \nin\n \ndoc\n(\ndata.xml\n)\n//ITEM/@Id   (: selection :)\n\n\nreturn\n \n(\n                                   \n(\n:\n \nupdates\n \n:\n)\n\n   \ndelete\n \nnode\n \n$idattr\n,\n\n   \ninsert\n \nnode\n \nID\n{\nstring\n(\n$idattr\n)}\n/ID\n as first into $idattr/\n..\n\n\n)\n\n\n\n\n\nBut because of that, some conflicting changes can produce unpredictable results. For example two \nrename\n of the same node are conflicting, because we do not know in which order they would be applied. Other ambiguous operations: two \nreplace\n of the same node, two \nreplace value\n (or contents) of the same node.\n\n\nThe XQUF specifications take care of forbidding such ambiguous updates. An error is generated (during the apply-updates stage) when such a conflict is detected.\n\n\nA bit ironically, no error is generated for meaningless but non ambiguous conflicts, for example both renaming and deleting the same node (\ndelete node\n has priority over other operations).", 
            "title": "XPath and XQuery"
        }, 
        {
            "location": "/ag/pm/xpath/#xpath", 
            "text": "XPath is the XML Path Language which uses a \"path like\" syntax to browse through elements and attributes in an XML document.\nIt contains over 200 built-in functions for such as string values, numeric values, booleans, date and time comparison, node manipulation, sequence manipulation, and much more.  In XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document nodes.\nXML documents are treated as trees of nodes. The topmost element of the tree is called the root element.", 
            "title": "XPath"
        }, 
        {
            "location": "/ag/pm/xpath/#selecting-nodes", 
            "text": "XPath uses path expressions to select nodes in an XML document. The most useful path expressions are listed below:     Expression  Description      nodename  Selects all nodes with the name \"nodename\"    @  Selects attributes    /  Selects from the root node    //  Selects nodes in the document from the current node that  match the selection no matter where they are    .  Selects the current node    ..  Selects the parent of the current node     We will be presenting a couple of XPath examples for the following example of XML document :  bookstore \n   book \n     title   lang = en A Clockwork Orange / title \n     author Anthony Burgess / author \n     year 1962 / year \n     price 19.99 / price \n   / book \n   book \n     title   lang = en Nineteen Eighty-Four / title \n     author George Orwell / author \n     year 1949 / year \n     price 14.99 / price \n   / book  / bookstore   Here are some path expressions and the result of the expressions:     Path Expression  Result      bookstore  Selects all nodes with the name \"bookstore\"    /bookstore  Selects the root element bookstore. (Note: If the path starts with a slash ( / ) it always represents an absolute path to an element!)    bookstore/book  Selects all book elements that are children of bookstore    //book  Selects all book elements no matter where they are in the document    bookstore//book  Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element    //@lang  Selects all attributes that are named lang", 
            "title": "Selecting Nodes"
        }, 
        {
            "location": "/ag/pm/xpath/#predicates", 
            "text": "Predicates are used to find a specific node or a node that contains a specific value. Predicates are always embedded in square brackets.  In the table below we have listed some path expressions with predicates and the result of the expressions:     Path Expression  Result      /bookstore/book 1  Selects the first book element that is the child of the bookstore element. (Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is  1 . To solve this problem in IE, set the SelectionLanguage to XPath: In JavaScript: xml.setProperty(\"SelectionLanguage\",\"XPath\"); )    /bookstore/book[last()]  Selects the last book element that is the child of the bookstore element    /bookstore/book[last()-1]  Selects the last but one book element that is the child of the bookstore element    /bookstore/book[position() 3]  Selects the first two book elements that are children of the bookstore element    //title[@lang]  Selects all the title elements that have an attribute named lang    //title[@lang='en']  Selects all the title elements that have a \"lang\" attribute with a value of \"en\"    /bookstore/book[price 35.00]  Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00    /bookstore/book[price 35.00]/title  Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00", 
            "title": "Predicates"
        }, 
        {
            "location": "/ag/pm/xpath/#selecting-unknown-nodes", 
            "text": "XPath wildcards can be used to select unknown XML nodes.     Wildcard  Description      *  Matches any element node    @*  Matches any attribute node    node()  Matches any node of any kind     In the table below we have listed some path expressions and the result of the expressions:     Path Expression  Result      /bookstore/*  Selects all the child element nodes of the bookstore element    //*  Selects all elements in the document    //title[@*]  Selects all title elements which have at least one attribute of any kind", 
            "title": "Selecting Unknown Nodes"
        }, 
        {
            "location": "/ag/pm/xpath/#selecting-several-paths", 
            "text": "By using the | operator in an XPath expression you can select several paths.  In the table below we have listed some path expressions and the result of the expressions:     Path Expression  Result      //book/title | //book/price  Selects all the title AND price elements of all book elements    //title | //price  Selects all the title AND price elements in the document |    /bookstore/book/title | //price  Selects all the title elements of the book element of the bookstore element AND all the price elements in the document", 
            "title": "Selecting Several Paths"
        }, 
        {
            "location": "/ag/pm/xpath/#xpath-axes", 
            "text": "An axis defines a node-set relative to the current node.     AxisName  Result      ancestor  Selects all ancestors (parent, grandparent, etc.) of the current node    ancestor-or-self  Selects all ancestors (parent, grandparent, etc.) of the current node and the current node itself    attribute  Selects all attributes of the current node    child  Selects all children of the current node    descendant  Selects all descendants (children, grandchildren, etc.) of the current node    descendant-or-self  Selects all descendants (children, grandchildren, etc.) of the current node and the current node itself    following  Selects everything in the document after the closing tag of the current node    following-sibling  Selects all siblings after the current node    namespace  Selects all namespace nodes of the current node    parent  Selects the parent of the current node    preceding  Selects all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes    preceding-sibling  Selects all siblings before the current node    self  Selects the current node", 
            "title": "XPath Axes"
        }, 
        {
            "location": "/ag/pm/xpath/#xpath-operators", 
            "text": "Below is a list of the operators that can be used in XPath expressions:     Operator  Description  Example      |  Computes two node-sets  //book | //cd    +  Addition  6 + 4    -  Subtraction  6 - 4    *  Multiplication  6 * 4    div  Division  8 div 4    =  Equal  price=9.80    !=  Not equal  price!=9.80     Less than  price 9.80    =  Less than or equal to  price =9.80     Greater than  price 9.80    =  Greater than or equal to  price =9.80    or  or  price=9.80 or price=9.70    and  and  price 9.00 and price 9.90    mod  Modulus (division remainder)  5 mod 2", 
            "title": "XPath Operators"
        }, 
        {
            "location": "/ag/pm/xpath/#xquery", 
            "text": "XQuery is a language that designed to query XML data. It is built on XPath expressions so one that wants to use XQuery must know how to use XPath.   XQuery grounds on the five expressions whose acronym is FLWOR (pronounced \"flower\").   For  - selects a sequence of nodes  Let  - binds a sequence to a variable  Where  - filters the nodes  Order by  - sorts the nodes  Return  - what to return (gets evaluated once for every node)   With these expressions (not necessarily with all of them) one can query any XML data.  Besides the main features of XQuery there is an extension called XQuery Update Facility which introduces some useful features to XQuery.  The XQuery Update Facility is a relatively small extension of the XQuery language which provides convenient means of modifying XML documents or data. As of March 14, 2008, the  XQuery Update Facility specification  has become a \"Candidate Recommendation\", which means it is now pretty stable.  Why an update facility in XML Query?  \nThe answer seems obvious, yet after all the XQuery language itself - or its cousin XSLT2 - is powerful enough to write any transformation of an XML tree. Therefore a simple \"store\" or \"put\" function, applied to the result of such transformation, could seem sufficient to achieve any kind of database update operation. Well, perhaps. In practice this would be neither very natural, convenient, nor very efficient (such an approach requires storing back the whole document and makes optimizing very difficult). So as we will see the little complexity added by XQuery Update seems quite worth the effort.  The Instructions below give a quick yet comprehensive practical introduction to the XQuery Update extension, while highlighting some of its peculiarities.  Prerequisites:  the reader is presumed to have some acquaintance with XML Query and its Data Model (the abstract representation of XML data, involving nodes of six types: document, element, attribute, text, comment, processing-instruction).", 
            "title": "XQuery"
        }, 
        {
            "location": "/ag/pm/xpath/#processing-models", 
            "text": "There are two main ways of using the update primitives:    Direct update of an XML database:  In the examples in previous topic, nodes belonging to a database are selected then updated.   Note  The XQUF notion of a database is very general: it means any collection of XML documents or well-formed fragments (trees).   XQuery Update does not define precisely the protocol by which updating operations are applied to a database. This is left to implementations. For example transaction and isolation issues are not addressed by the specifications.  It is simply assumed that updates are applied to the database when the execution of a script completes. The language is designed in such a way that semantics of the \"apply-updates\" operation are precisely defined, yet as much space as possible is left for optimization by database implementations.     Points to be noticed:    Updates are not applied immediately as the updating expression executes. Instead they are accumulated into a \"Pending Update List\". At some point at the end of the execution, Pending Updates are applied all at once, and the database is updated atomically.    A noticeable consequence is that updates are not visible during the script execution, but only after. This can be fairly off-putting for a developer. It also has a definite influence on programming style. We will see later examples of this effect and how to cope with it.    The same expression can update several documents at once. The examples above could be applied to any collection of documents instead of the single document doc.xml. Example: for $name in collection( /allbooks )//CATEGORY/NAME\nreturn rename node $name as CATEGORY_NAME      Transforms without side effects:  The XQUF has a supplementary operation called transform which updates a copy of an existing node, without modifying the original, and returns the transformed tree.  The following example produces a transformed version of doc.xml without actually touching the original document:  copy   $d   :=   doc ( doc.xml )   modify   ( \n   for   $n   in   $d //CATEGORY/NAME \n   return   rename   node   $n   as   CATEGORY_NAME  )  return   $d   Notice that within the modify clause, XQUF forbids modifying the original version of copied trees (here the document doc.xml itself); only the copied trees can be modified. \nThe following expression would cause an error:  copy   $d   :=   doc ( doc.xml )  modify   ( \n   for   $n   in   doc ( doc.xml ) //CATEGORY/NAME(: *** wrong *** :) \n   return   rename   node   $n   as   CATEGORY_NAME  )  return   $d", 
            "title": "Processing models"
        }, 
        {
            "location": "/ag/pm/xpath/#primitive-operations", 
            "text": "The XQuery Update Facility (abbreviated as XQUF) provides five basic operations acting upon XML nodes:   insert  one or several nodes inside/after/before a specified node  delete  one or several nodes  replace a node  (and all its descendants if it is an element) by a sequence of nodes.  replace the contents  (children) of a node with a sequence of nodes, or the  value  of a node with a string value.  rename  a node (applicable to elements, attributes and processing instructions) without affecting its contents or attributes.   Combination of update primitives with the base language \nTypically, we use some plain query to select the node(s) we want to update, then we apply update operations on those nodes. This is similar to the  SQL UPDATE... WHERE...  instruction.  Example 1:  in a document doc.xml, rename all elements children of a  CATEGORY  as  CATEGORY_NAME :  for   $name   in   doc ( doc.xml ) //CATEGORY/NAME   (: selection :)  return   rename   node   $name   as   CATEGORY_NAME      ( :   update   : )   Example 2:  for all  BOOK  elements which have an attribute Id, replace that attribute with a child  ID  in first position:  for   $idattr   in   doc ( data.xml ) //BOOK/@Id     (: selection :)  return   (            \n    delete   node   $idattr ,                        ( :   update   1   : ) \n    insert   node   ID { string ( $idattr )} /ID     (: update 2 :) \n       as   first   into   $idattr / ..  )   With the latter script the following fragment  BOOK   Id= 0025 some content /BOOK    would be modified into:  BOOK ID 0025 /ID some content /BOOK     Note  In the second example, it is completely irrelevant whether the  delete  is written after or before the  insert node . This surprising property of XQUF is explained below.   There are some restrictions in the way the 5 updating operations can mix with the base XQuery language. XQUF makes a distinction between Updating Expressions (which encompass update primitives) and non-updating expressions. Updating Expressions cannot appear anywhere. This topic will be explained in more detail.", 
            "title": "Primitive operations"
        }, 
        {
            "location": "/ag/pm/xpath/#delete-nodes", 
            "text": "Syntax:  delete node location  delete nodes location  The expression location represents a sequence of nodes which are marked for deletion (the actual number of nodes does not need to match the keyword node or nodes).", 
            "title": "delete nodes"
        }, 
        {
            "location": "/ag/pm/xpath/#insert-nodes", 
            "text": "Syntax:  insert (node|nodes) items into path  insert (node|nodes) items as first into Path  insert (node|nodes) items as last into Path  insert (node|nodes) items before Path  insert (node|nodes) items after Path  The expression Path must point to a single target node.  The expression items must yield a sequence of items to insert relatively to the target node.  Notice that even though the keyword  node  or  nodes  are used, the inserted items can be non-node items. What happens actually is that the string values of non-node items are concatenated to form text nodes.    If either form of into is used, then the target node must be an element or a document. The items to insert are treated exactly as the contents of an element constructor.  For example if  $target  points to an empty element  CONT/ , insert nodes (attribute A { 5.4 },  child1/ ,  text , 2 to 4)\ninto $target  yields:  CONT   A= 5.4 child1/ text 2 3 4 /CONT   Therefore the same rules as in constructors apply: item order is preserved, a space is inserted between consecutive non-node items, inserted nodes are copied first, attribute nodes are not allowed after other item types, etc.    When the keywords  as first  (resp. as  last ) are used, the items are inserted before (resp. after) any existing children of the element.  For example if  $target  points to an element  parent kid/ /parent  insert node  elder/  as first into $target  yields:  parent elder/ kid/ /parent   When the only keyword into is used, the resulting position is implementation dependent. It is only guaranteed that as first into and as last into have priority over into.    If before or after are used, any node type is allowed for the target node.    Attributes are a special case: regardless of the before or after keyword used, attributes are always inserted into the parent element of the target. The order of inserted attributes is unspecified. Name conflicts can generate errors.", 
            "title": "insert nodes"
        }, 
        {
            "location": "/ag/pm/xpath/#replace-node", 
            "text": "Syntax:  replace node location with items  The expression location must point to a single target node.  The expression items must yield a sequence of items that will replace the target node.    Except for document and attribute node types, the target node can be replaced by any sequence of items. The replacing items are treated exactly as the contents of an element/document constructor.  For example if  $target  points to an element  P kid/ some text /P ,  replace node $target/kid with  here is   yields:  P here is some text /P     Attributes are a special case: they can only be replaced by an attribute node. Name conflicts can generate errors.", 
            "title": "replace node"
        }, 
        {
            "location": "/ag/pm/xpath/#replace-node-value", 
            "text": "Syntax:  replace value of node location with items  Here the identity of the target node is preserved. Only its value or contents (for an element or a document) is replaced.    If the target is an element or a document node, then all its former children are removed and replaced. The replacing items are treated exactly as the contents of a text constructor (so all node items are replaced by their string-value).  For example if  $target  points to an element  P kid/ some text /P ,  replace value of node $target with ( text let s count:  /text , 1 to 3,  ... )  yields:  P let s count: 1 2 3 ... /P   So the element contents are replaced by a text node whose value is the concatenation of the string values of replacing items.    If the target node is a leaf node (attribute, text, comment, processing-instruction) then its string value is replaced by the concatenation of the string values of replacing items.  For example if  $target  points to an element  P order= old some text /P ,  replace value of node $target/@order with (1 to 3,  ell ... /ell )  yields:  P   order= 1 2 3... some text /P", 
            "title": "replace node value"
        }, 
        {
            "location": "/ag/pm/xpath/#rename-node", 
            "text": "Syntax:  rename node location as name-expression  The expression location must point to a single target element, attribute or processing-instruction.  The expression name-expression must yield a single QName or string item.  For example if  $target  points to an element  CONT B= b some text /CONT  rename node $target as qName( some.namespace ,  CONTAINER ),\nrename node $target/B as  NEWB  \nyields: ns1:CONTAINER   NEWB= b   xmlns:ns1= some.namespace some text /ns1:CONTAINER", 
            "title": "rename node"
        }, 
        {
            "location": "/ag/pm/xpath/#transform", 
            "text": "Syntax:  copy   $var   :=   node   [,   $var2   :=   node2   ...]  modify   updating - expression  return   expression   Each node expression is copied (at least virtually) and bound to a variable.  The updating-expression contains or invokes one or several update primitives. These primitives are allowed to act only upon the copied XML trees, pointed by the bound variables. Therefore the transform expression has no side effect.  Before the return expression is evaluated, all updates are applied to the copied trees. Typically the return expression would be a bound variable, or a node constructor involving the bound variables, so it will yield the updated tree(s).  For example if  $target  points to an element  copy   $target   :=   CONT   id = 001 some   text /CONT  modify   ( \n    rename   node   $target   as   SECTION , \n    insert   node   TITLE The   title /TITLE  as first into $target  )  return   element   DOC   {   $target   }   returns: DOC SECTION   id= 001 TITLE The title /TITLE some text /SECTION /DOC", 
            "title": "transform"
        }, 
        {
            "location": "/ag/pm/xpath/#invisible-update-problem", 
            "text": "The fact that updates are applied only at the end of a script execution has two consequences on programming, one disturbing, one pleasant:    The disturbing consequence is that you don't see your updates until the end, therefore you cannot build on your changes to make other changes.  An example: suppose you have elements named PERSON. Inside a  PERSON  there can be a list of  BID  elements (representing bids made by this person), and you want the  BID  elements to be wrapped in a  BIDS  element. But initially the  PERSON  has no  BIDS  child.  Initially: PERSON   id= p0103 \n   NAME Jane /NAME  /PERSON   We want to insert  BID id= b0022 data /BID  to obtain:  PERSON   id= p0103 \n   NAME Jane /NAME \n   BIDS \n      BID   id= b0022 data /BID \n   BIDS  /PERSON   Classically, for example using the  DOM , we would proceed in two steps:   If there is no  BIDS  element inside  PERSON , then create one  then insert the  BID  element inside the  BIDS  element   In XQuery Update this would (incorrectly) be written like this:  declare   updating   function   insert - bid ( $person ,   $bid )  { \n   if ( empty ( $person / BIDS )) \n     then   insert   node   BIDS /   into   $person \n     else   (), \n   insert   node   $bid   as   last   into   $person / BIDS  }    Info  Don't try that: it won't work! Why? \nBecause the  BIDS  element will be created only at the very end, therefore the instruction insert ... as last into  $person/BIDS  will not find any node matching  $person/BIDS , hence throw an execution error.   So what is a correct way of doing ? We need a self-sufficient solution for each of the two cases:     declare   updating   function   insert - bid ( $person ,   $bid )  { \n  if ( empty ( $person / BIDS )) \n    then   insert   node   BIDS { $bids } /BIDS  into $person \n    else   insert   node   $bid   as   last   into   $person / BIDS  }     The pleasant consequence is that the document(s) on which you are working are stable during execution of your script. You can rest assured that you are not sawing the branch you are sitting on. For example you can quietly write:  for   $x   in   collection (...) //X  return   delete   node   $x   This is perfectly predictable and won't stop prematurely. Or you can replicate an element after itself without risking looping forever:  for   $x   in   collection (...) //X  return   insert   node   $x   after   $x", 
            "title": "Invisible update problem"
        }, 
        {
            "location": "/ag/pm/xpath/#mixed-updates-and-non-updating-expressions", 
            "text": "Updating Expressions are XQuery expressions that encompass the 5 updating primitives.  There are rules about mixing Updating and Non-updating Expressions:    First of all, let us remember that Updating Expressions do not return any value. They simply add an update request to a list. Eventually the updates in the list are applied at the end of a script execution (or at the end of the  modify  clause in the case of the  transform  expression).    Updating Expressions are therefore not allowed in places where a meaningful value is expected. For example the condition of a if, the right hand-side of a  let := , the in part of a  for  and so on.    Mixing Updating and Non-updating Expressions is not allowed in a sequence (the comma operator). Though technically feasible, it would not make much sense to mix expressions that return a value and expressions that don't remember that the sequence operator returns the concatenation of the sequences returned by its components.    The  fn:error()  function and the empty sequence () are special as they can appear both in Updating and in non-updating expressions.    In the same way, the branches of a  if clause  or a  typeswitch  must be consistent: both Updating or both Non-updating. If both branches are Updating then the if itself is considered Updating, and conversely.    If the body of a function is an Updating Expression, then the function must be declared with the  updating  keyword. Example:  declare   updating   function   insert - id ( $elem ,   $id - value )   { \n    insert   node   attribute   id   {   $id - value   }   into   $elem  }   A call to such a function is itself considered an Updating Expression. Logically enough, an updating function returns no value and therefore is not allowed to declare a return type.", 
            "title": "Mixed Updates and Non-updating Expressions"
        }, 
        {
            "location": "/ag/pm/xpath/#orders-and-conflicts", 
            "text": "Another consequence of the \"Pending Updates\" mechanism is that the order in which updates are specified is not important. In the following example you can without any issue delete the attribute Id (pointed by  $idattr ), and after use  $idattr/..  (the parent ITEM element) for inserting! Or you could insert first and delete after.  for   $idattr   in   doc ( data.xml ) //ITEM/@Id   (: selection :)  return   (                                     ( :   updates   : ) \n    delete   node   $idattr , \n    insert   node   ID { string ( $idattr )} /ID  as first into $idattr/ ..  )   But because of that, some conflicting changes can produce unpredictable results. For example two  rename  of the same node are conflicting, because we do not know in which order they would be applied. Other ambiguous operations: two  replace  of the same node, two  replace value  (or contents) of the same node.  The XQUF specifications take care of forbidding such ambiguous updates. An error is generated (during the apply-updates stage) when such a conflict is detected.  A bit ironically, no error is generated for meaningless but non ambiguous conflicts, for example both renaming and deleting the same node ( delete node  has priority over other operations).", 
            "title": "Orders and conflicts"
        }, 
        {
            "location": "/ag/pm/fo/forms_overview/", 
            "text": "Workrunner Forms are high performance and responsive HTML5 based user interfaces to display any kind of data. A form can be used as to display and modify process data or can be use as dashboard that displays graphical reports.\n\n\nWorkrunner uses MVC pattern to control user interface. Process data used as model, scripts are used to access or modify data as controller, form is used as view.   \n\n\n\n\nWorkrunner forms are highly dynamic and instantly respond when any change made on data model. For example; if script make a change on field on data model, related text box widget is automatically updates the displayed value on screen.\n\n\nForms consist of widgets that are containers or inputs. Each widget has own rules to control visibility or validation of certain operations.\n\n\nForms can be divide following topics by depending on usage;\n\n\nForm\n\nForms are user interface to display or modify process data when a task assigned to user. \n\n\nScreen\n\nScreens are displayed as dashboard or report when container folder is displayed.\n\n\nForm Template\n\nForm templates are reusable form parts to include in other form types.\n\n\nYou can learn how to create a form by watching this video:", 
            "title": "Forms Overview"
        }, 
        {
            "location": "/ag/pm/fo/controls_toc/", 
            "text": "Column\n \n\n\nText Box\n \n\n\nDate Time\n \n\n\nCheck Box\n \n\n\nRadio List\n \n\n\nIdentity Picker\n \n\n\nFile\n \n\n\nDropdown Content\n \n\n\nExpression Content\n \n\n\nTag List\n \n\n\nData Sources: \n\n\nDatabase Query\n \n\n\nStatic List Items\n \n\n\nXml Database Query\n \n\n\nForm Data Query\n \n\n\nWeb Service Query\n \n\n\nContent Types\n \n\n\n\n\n\n\nActivity Stream Design\n\n\nStatic Panel\n\n\nXml Query Content\n\n\nQuery Content\n\n\nApply Template\n\n\nLabel\n\n\nHtml Box\n\n\nNumeric\n\n\nRange\n\n\nMessage Control\n\n\nMoney Box\n\n\nContent Controls: \n\n\nRow Content\n\n\nRepeating Content\n\n\nTable Content\n\n\nTabbed Content\n\n\nData Table\n\n\nXSL Transform\n\n\nConditional Content", 
            "title": "Controls TOC"
        }, 
        {
            "location": "/ag/pm/fo/column/", 
            "text": "Columns are used in Row Layout Content to build a grid layout. In default there is only one column in each content and its width is set to fill whole width of its parent.\n\n\n\n\nDesign\n\n\nAlign\n\nAdjusts the alignment of the column with respect to its parent.\n\n\nWidth\n\nA row content is assumed to have a maximum width of 12 columns in total. Conforming to this, a column may have a width of 1 to 12 columns. If \"inherit from smaller\" option is selected, it inherits the width from the configuration for the smaller device, which is specified at responsive layout section.\n\n\nResponsive Layout\n\nDefines how the column is going to be displayed on mobile device screens. It provides width option selection for desktop, landscape and portrait orientations of a tablet and a regular mobile phone. Landscape orientation of tablet is the default width which is defined in the previous section.\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.\n\n\nAdd new is used to add the new column.", 
            "title": "Column"
        }, 
        {
            "location": "/ag/pm/fo/column/#design", 
            "text": "Align \nAdjusts the alignment of the column with respect to its parent.  Width \nA row content is assumed to have a maximum width of 12 columns in total. Conforming to this, a column may have a width of 1 to 12 columns. If \"inherit from smaller\" option is selected, it inherits the width from the configuration for the smaller device, which is specified at responsive layout section.  Responsive Layout \nDefines how the column is going to be displayed on mobile device screens. It provides width option selection for desktop, landscape and portrait orientations of a tablet and a regular mobile phone. Landscape orientation of tablet is the default width which is defined in the previous section.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/column/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.  Add new is used to add the new column.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/text_box/", 
            "text": "Text box is useful for getting input from users and displaying it.\n\n\n\n\nDesign\n\n\nUnder design tab on the right hand menu you can find the visibility and style options of the text box.\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the text box into its container.\n\n\nPlace Holder\n\nAny text in this area will be written as faded in the text box when it is empty.\n\n\nHints\n\nThe text in this area pops up when you hover text box.\n\n\nType\n\nSpecify the type of text box as text, password, email, search, and url. According to this type parameter a related icon shows up on the leftmost of text box. In addition when password type is selected, the input is displayed as star characters.\n\n\nRules\n\n\nRequired for Group\n\nEnter any name into this area to specify a validation group for the text box. After that when you enter this same validation group name into Validation Group area on any action button of any task, it will be checked for validation whenever the action is selected on the form.\n\n\nMaximum Length\n\nAllowed maximum length of text value.\n\n\nInput Mask\n\nAllowed input mask. You should use 9 for [0-9], a for [a-Z], * for [0-a-Z].\n\n\nDynamic Rules\n\nThrough this button you can add two types of rules to the text box control. Click one of them and you will see it is listed above the button. It has two buttons to edit and delete the rule.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nChanges XPath of the text box.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Text Box"
        }, 
        {
            "location": "/ag/pm/fo/text_box/#design", 
            "text": "Under design tab on the right hand menu you can find the visibility and style options of the text box.  Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the text box into its container.  Place Holder \nAny text in this area will be written as faded in the text box when it is empty.  Hints \nThe text in this area pops up when you hover text box.  Type \nSpecify the type of text box as text, password, email, search, and url. According to this type parameter a related icon shows up on the leftmost of text box. In addition when password type is selected, the input is displayed as star characters.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/text_box/#rules", 
            "text": "Required for Group \nEnter any name into this area to specify a validation group for the text box. After that when you enter this same validation group name into Validation Group area on any action button of any task, it will be checked for validation whenever the action is selected on the form.  Maximum Length \nAllowed maximum length of text value.  Input Mask \nAllowed input mask. You should use 9 for [0-9], a for [a-Z], * for [0-a-Z].  Dynamic Rules \nThrough this button you can add two types of rules to the text box control. Click one of them and you will see it is listed above the button. It has two buttons to edit and delete the rule.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/text_box/#data", 
            "text": "Bound Xpath \nChanges XPath of the text box.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/date_time/", 
            "text": "This control accepts datetime values as input and optionally displays it in literal or relative date format.\n\n\n\n\nDesign\n\n\nIs Literal?\n\nIf the datetime needs to be displayed as literal instead of relative format (like a datetime instead of saying 2 days ago) this options must be checked. If the default configuration for datetime format is specified in the application file, it overrides this option. Consult support service for further information.\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the date time box into its container. \n\n\nPlace Holder\n\nAny text in this area will be written as faded in the date time box when it is an empty. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nFormat\n\nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nChanges XPath of the date time box.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Date Time"
        }, 
        {
            "location": "/ag/pm/fo/date_time/#design", 
            "text": "Is Literal? \nIf the datetime needs to be displayed as literal instead of relative format (like a datetime instead of saying 2 days ago) this options must be checked. If the default configuration for datetime format is specified in the application file, it overrides this option. Consult support service for further information.  Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the date time box into its container.   Place Holder \nAny text in this area will be written as faded in the date time box when it is an empty.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/date_time/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Format \nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/date_time/#data", 
            "text": "Bound Xpath \nChanges XPath of the date time box.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/check_box/", 
            "text": "This control creates a check box to display a choice between one of two possible options. When it is checked it holds a true value in the XML and it becomes empty string when it is unchecked. You need to set type of \"Check\" in the data model to use it when designing form.\n\n\n\n\nDesign\n\n\nLabel\n\nLabel is a caption of the checkbox on the user interface.\n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nData\n\n\nBound XPath\n\nChanges XPath of the check box.\n\n\nChecked Value\n\nIt represents true value.\n\n\nUnchecked Value\n\nIt represents an empty string value.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Check Box"
        }, 
        {
            "location": "/ag/pm/fo/check_box/#design", 
            "text": "Label \nLabel is a caption of the checkbox on the user interface.  Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/check_box/#data", 
            "text": "Bound XPath \nChanges XPath of the check box.  Checked Value \nIt represents true value.  Unchecked Value \nIt represents an empty string value.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/radio_list/", 
            "text": "This control creates a radio list element.\n\n\n\n\nDesign\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nFormat\n\nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nValue XPath\n\nXPath to store selection value.\n\n\nCaption XPath\n\nXPath to store selection text value.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Radio List"
        }, 
        {
            "location": "/ag/pm/fo/radio_list/#design", 
            "text": "Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/radio_list/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Format \nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/radio_list/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.  Value XPath \nXPath to store selection value.  Caption XPath \nXPath to store selection text value.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/identity_picker/", 
            "text": "Identity Picker is a search tool that queries the Organizational tables and lists the results of your search. It also has autocomplete feature. Before starting it is recommended that you examine the default graph of Organization Structure. In order to use Identity Picker control one needs to add its namespace to the \nNamespaces\n page on form design.\n\n\n\n\nDesign\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the identity picker into its container. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nFormat\n\nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nMappings\n\n\nAdding a mapping will write the stated column data of queried organization unit into the desired Xpath. \n\n\nSource\n\nA column from related organization tables to be mapped. will be update\n\n\nExample: Employee.Department.Name\n\n\nTarget\n\nTarget Xpath to map the data. will be update\n\n\nExample: PersonnelInformations/Department\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Identity Picker"
        }, 
        {
            "location": "/ag/pm/fo/identity_picker/#design", 
            "text": "Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the identity picker into its container.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/identity_picker/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Format \nDefine the way how datetime to be displayed. It can be displayed as only date, only time or both.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/identity_picker/#mappings", 
            "text": "Adding a mapping will write the stated column data of queried organization unit into the desired Xpath.   Source \nA column from related organization tables to be mapped. will be update  Example: Employee.Department.Name  Target \nTarget Xpath to map the data. will be update  Example: PersonnelInformations/Department", 
            "title": "Mappings"
        }, 
        {
            "location": "/ag/pm/fo/identity_picker/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/file/", 
            "text": "This control serves for file upload. To use this feature, on the form design page click on any container, click the convert button from the appearing menu and select File.\n\n\n\n\nDesign\n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nChanges XPath of the file.\n\n\nFile Name XPath\n\nXPath to store name of file. \n\n\nFile Hash XPath\n\nXPath to store digest value of file. \n\n\nHash Algorithm\n\nType of digest to be use. \n\n\n\n\nDefault (SHA1), \n\n\nSHA-256, \n\n\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "File"
        }, 
        {
            "location": "/ag/pm/fo/file/#design", 
            "text": "Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/file/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/file/#data", 
            "text": "Bound XPath \nChanges XPath of the file.  File Name XPath \nXPath to store name of file.   File Hash XPath \nXPath to store digest value of file.   Hash Algorithm \nType of digest to be use.    Default (SHA1),   SHA-256,    Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/dropdown_content/", 
            "text": "Dropdown content allows to design to list box. You can create to value list for using different dropdown content of options.\n\n\n\n\nDesign\n\n\nAuto Select Value\n\nThis option provides to bring the topmost value when open the form.\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nChanges XPath of the dropdown.\n\n\nValue XPath\n\nXPath to store selection value.\n\n\nCaption XPath\n\nXPath to store selection text value.\n\n\nData Sources\n \n\n\n\n\nDatabase Query\n \n\n\nStatic List Items\n \n\n\nXml Database Query\n \n\n\nForm Data Query\n \n\n\nWeb Service Query\n \n\n\nContent Types\n \n\n\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Dropdown Content"
        }, 
        {
            "location": "/ag/pm/fo/dropdown_content/#design", 
            "text": "Auto Select Value \nThis option provides to bring the topmost value when open the form.  Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/dropdown_content/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/dropdown_content/#data", 
            "text": "Bound XPath \nChanges XPath of the dropdown.  Value XPath \nXPath to store selection value.  Caption XPath \nXPath to store selection text value.  Data Sources     Database Query    Static List Items    Xml Database Query    Form Data Query    Web Service Query    Content Types     Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/expression_content/", 
            "text": "Evaluates an expression given in double curly braces such as a mathmetical operation, displays the result on the form and loads it into the specified target XPath.\n\n\n\n\nHints\n\nThe text entered in this area pops up when you hover the field. \n\n\nTarget\n\nXPath to load the result of expression.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Expression Content"
        }, 
        {
            "location": "/ag/pm/fo/tag_list/", 
            "text": "Displays entered texts as separated tags. Press enter or click outside the box to turn a text into a tag.\n\n\nDesign\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. Further information \nhere\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nChanges XPath of the tag list.\n\n\nValue XPath\n\nXPath to store selection value.\n\n\nCaption XPath\n\nXPath to store selection text value.\n\n\nItem XPath\n\nItems of a tag list content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath. \n\n\nData Sources\n \n\n\n\n\nDatabase Query\n \n\n\nStatic List Items\n \n\n\nXml Database Query\n \n\n\nForm Data Query\n \n\n\nWeb Service Query\n \n\n\nContent Types\n \n\n\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Tag List"
        }, 
        {
            "location": "/ag/pm/fo/tag_list/#design", 
            "text": "Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the radio list into its container.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/tag_list/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here    Validation rules, allow you to validate the data that is entered by the end-user. Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/tag_list/#data", 
            "text": "Bound XPath \nChanges XPath of the tag list.  Value XPath \nXPath to store selection value.  Caption XPath \nXPath to store selection text value.  Item XPath \nItems of a tag list content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath.   Data Sources     Database Query    Static List Items    Xml Database Query    Form Data Query    Web Service Query    Content Types     Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/database_query/", 
            "text": "This control provides querying for relational databases. When this control is selected, there appears a floating menu next to it. Click Edit button from that menu to open the Query Designer.\n\n\n\n\nQuery\n\n\nParameters\n\n\nTarget schema, table and to include all fields option is presented at this section.\n\n\nTarget Schema\n\nSelect one of the newly created or imported database schemas from this dropdown menu.\n\n\nTarget Table\n\nAfter selecting the target schema, select a newly created or imported database table from dropdown menu.\n\n\nInclude All Fields?\n\n\n\n\nYes, include all fields always. : Check this option if you want to include all fields in the query result.\n\n\n\n\nFields\n\n\nSelect the fields you want to include in the query result. You can specify field order using arrow buttons on the right side.\n\n\nField\n\nLists columns of selected database and its related tables.\n\n\nCaption\n\nCaption to display to user. If not specified field is hidden to user.\n\n\nFormula\n\nThe formula to use for aggregate values.\n\n\nMapped XPath\n\nXPath to map field value on data model. If not specified Name property is used.\n\n\nOrder\n\n\nField\n\nSpecify field(s) to regard when ordering.\n\n\nOrder Type\n\nSelect ordering type.\n\n\n\n\nAscending\n\n\nDescending\n\n\n\n\nCriteria\n\n\nAdd as many criteria as you want to create you where clause.\n\n\nField\n\nSpecify field(s) to filter select query.\n\n\nFormula\n\nThe formula to use for aggregate values.\n\n\n\n\nCount\n\n\nSum\n\n\nAverage\n\n\nMinimum\n\n\nMaksimum\n\n\nAverage of distinct values\n\n\nSum of distinct values\n\n\nCount of distinct values\n\n\n\n\nComparison\n\nCriteria value comparison.\n\n\n\n\nEquals\n\n\nDifferent\n\n\nLike\n\n\nLess than\n\n\nGreater than\n\n\nLess than or equals\n\n\nGreater than or equals\n\n\n\n\nValue\n\nThe criteria value. You may use expression { and } identifiers when needed.\n\n\nCondition\n\nCondition to merge with next criteria.\n\n\n\n\nAnd\n\n\nOr\n\n\n\n\nIgnore Values\n\nEnter value(s) to ignore in select query.\n\n\nBlocks\n\n\nIn order to isolate conditions properly you may use block structure for where clause. Add as many block as you want and select their condition.\n\n\nSub Queries\n\n\nCreates a sub query in your select query.\n\n\nRelation\n\nLists relations of the specified table from main query.\n\n\nMapped XPath\n\nXPath to map field value on data model. If not specified Name property is used.\n\n\nInclude All Fields\n\nCheck this option if you want to include all fields in the query result.\n\n\nResults\n\n\nOptions to map and format the result data.\n\n\nItem XPath\n\nXPath of item that will be listed in dropbox. If it is left empty, which is same with * value, all resulting items are being listed.\n\n\nList Item Formatting\n\n\nCustomizes format of dropdown's options.\n\n\nDisplay Text Format\n\nSpecify the format to display result text. You can use column names inside curly braces. Ex: {{Name}} - {{Id}}\n\n\nValue Format\n\nSpecify the format of value. You can use column names inside curly braces. Ex:  {{Id}} - {{Type}}\n\n\nSelection Mappings\n\n\nIn order to map a column data from query result into an XPath, create a mapping by pressing Add New button.\n\n\nSource\n\nName of data column to be mapped.\n\n\nTarget\n\nXPath to map data.\n\n\nHierarchy Column\n\nIn case you have an hierarchy on a table determined by one of its column, use this section to specify parent column's name to display your data in a hierarchical way or leave it empty to display data as a plain list.", 
            "title": "Database Query"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#query", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#parameters", 
            "text": "Target schema, table and to include all fields option is presented at this section.  Target Schema \nSelect one of the newly created or imported database schemas from this dropdown menu.  Target Table \nAfter selecting the target schema, select a newly created or imported database table from dropdown menu.  Include All Fields?   Yes, include all fields always. : Check this option if you want to include all fields in the query result.", 
            "title": "Parameters"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#fields", 
            "text": "Select the fields you want to include in the query result. You can specify field order using arrow buttons on the right side.  Field \nLists columns of selected database and its related tables.  Caption \nCaption to display to user. If not specified field is hidden to user.  Formula \nThe formula to use for aggregate values.  Mapped XPath \nXPath to map field value on data model. If not specified Name property is used.", 
            "title": "Fields"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#order", 
            "text": "Field \nSpecify field(s) to regard when ordering.  Order Type \nSelect ordering type.   Ascending  Descending", 
            "title": "Order"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#criteria", 
            "text": "Add as many criteria as you want to create you where clause.  Field \nSpecify field(s) to filter select query.  Formula \nThe formula to use for aggregate values.   Count  Sum  Average  Minimum  Maksimum  Average of distinct values  Sum of distinct values  Count of distinct values   Comparison \nCriteria value comparison.   Equals  Different  Like  Less than  Greater than  Less than or equals  Greater than or equals   Value \nThe criteria value. You may use expression { and } identifiers when needed.  Condition \nCondition to merge with next criteria.   And  Or   Ignore Values \nEnter value(s) to ignore in select query.", 
            "title": "Criteria"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#blocks", 
            "text": "In order to isolate conditions properly you may use block structure for where clause. Add as many block as you want and select their condition.", 
            "title": "Blocks"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#sub-queries", 
            "text": "Creates a sub query in your select query.  Relation \nLists relations of the specified table from main query.  Mapped XPath \nXPath to map field value on data model. If not specified Name property is used.  Include All Fields \nCheck this option if you want to include all fields in the query result.", 
            "title": "Sub Queries"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#results", 
            "text": "Options to map and format the result data.  Item XPath \nXPath of item that will be listed in dropbox. If it is left empty, which is same with * value, all resulting items are being listed.", 
            "title": "Results"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#list-item-formatting", 
            "text": "Customizes format of dropdown's options.  Display Text Format \nSpecify the format to display result text. You can use column names inside curly braces. Ex: {{Name}} - {{Id}}  Value Format \nSpecify the format of value. You can use column names inside curly braces. Ex:  {{Id}} - {{Type}}", 
            "title": "List Item Formatting"
        }, 
        {
            "location": "/ag/pm/fo/database_query/#selection-mappings", 
            "text": "In order to map a column data from query result into an XPath, create a mapping by pressing Add New button.  Source \nName of data column to be mapped.  Target \nXPath to map data.  Hierarchy Column \nIn case you have an hierarchy on a table determined by one of its column, use this section to specify parent column's name to display your data in a hierarchical way or leave it empty to display data as a plain list.", 
            "title": "Selection Mappings"
        }, 
        {
            "location": "/ag/pm/fo/static_list_items/", 
            "text": "Static list option provides to add list of value in to dropdown content manually.\n\n\nText\n\nName of list value.\n\n\nValue\n\nNumber of list value.", 
            "title": "Static List Items"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/", 
            "text": "Fetches data from XML database and loads into the dropdown control.\n\n\nQuery\n\n\nWrite your xQuery script here.\n\n\nParameters\n\n\nOptions of which database to query and parameter assignments.\n\n\nRepository\n\nSelect the location of data to query, either Domain or Process repository.\n\n\nParameters\n\n\n\n\nName : Parameter name to be used in the xQuery.\n\n\nValue : Xpath for parameter data to be assigned.\n\n\n\n\nResults\n\n\nOptions to map and format the result data.\n\n\nItem XPath\n\nSpecifies item that will be listed in dropbox. If it is left empty, which is same with * value, all resulting items are being listed.\n\n\nList Item Formatting\n\n\nCustomizes format of query result.\n\n\nDisplay Text Format\n\nSpecify the format to display result text. You can use XPath inside curly braces. Ex: {{name}} - {{id}}\n\n\nValue Format\n\nSpecify the format of value. You can use XPath inside curly braces. Ex:  {{id}} - {{type}}\n\n\nSelection Mappings\n\n\nIn order to map the selected data from xQuery result into a node of the form, create a mapping by pressing Add New button.\n\n\nSource\n\nNode name to map its data.\n\n\nTarget\n\nXPath to map data into.\n\n\nHierarchy XPath\n\nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".\n\n\nFolders\n\n    \nFolder\n\n        \nName\nfolder1\n/Name\n\n    \n/Folder\n\n    \nFolder\n\n        \nName\nfolder2\n/Name\n\n        \nFolders\n\n            \nFolder\n\n                \nName\nfolder2a\n/Name\n\n            \n/Folder\n\n            \nFolder\n\n                \nName\nfolder2b\n/Name\n\n            \n/Folder\n\n        \n/Folders\n\n    \n/Folder\n\n\n/Folders", 
            "title": "Xml Database Query"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/#query", 
            "text": "Write your xQuery script here.", 
            "title": "Query"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/#parameters", 
            "text": "Options of which database to query and parameter assignments.  Repository \nSelect the location of data to query, either Domain or Process repository.  Parameters   Name : Parameter name to be used in the xQuery.  Value : Xpath for parameter data to be assigned.", 
            "title": "Parameters"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/#results", 
            "text": "Options to map and format the result data.  Item XPath \nSpecifies item that will be listed in dropbox. If it is left empty, which is same with * value, all resulting items are being listed.", 
            "title": "Results"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/#list-item-formatting", 
            "text": "Customizes format of query result.  Display Text Format \nSpecify the format to display result text. You can use XPath inside curly braces. Ex: {{name}} - {{id}}  Value Format \nSpecify the format of value. You can use XPath inside curly braces. Ex:  {{id}} - {{type}}", 
            "title": "List Item Formatting"
        }, 
        {
            "location": "/ag/pm/fo/xml_database_query/#selection-mappings", 
            "text": "In order to map the selected data from xQuery result into a node of the form, create a mapping by pressing Add New button.  Source \nNode name to map its data.  Target \nXPath to map data into.  Hierarchy XPath \nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".  Folders \n     Folder \n         Name folder1 /Name \n     /Folder \n     Folder \n         Name folder2 /Name \n         Folders \n             Folder \n                 Name folder2a /Name \n             /Folder \n             Folder \n                 Name folder2b /Name \n             /Folder \n         /Folders \n     /Folder  /Folders", 
            "title": "Selection Mappings"
        }, 
        {
            "location": "/ag/pm/fo/form_data_query/", 
            "text": "This data source may be used to fetch data from current form.\n\n\nQuery\n\n\nSource XPath\n\nXPath to fetch data from the form.\n\n\nResults\n\n\nOptions to map and format result data.\n\n\nItem XPath\n\nXPath of item that will be listed in dropbox. If it is left empty, which is the same with * value, all resulting items are being listed.\n\n\nList Item Formatting\n\n\nCustomizes format of dropdown's options.\n\n\nDisplay Text Format\n\nSpecify the format to display result text. You can use column names inside curly braces. Ex: {{Name}} - {{Id}}\n\n\nValue Format\n\nSpecify the format of value. You can use column names inside curly braces. Ex:  {{Id}} - {{Type}}\n\n\nSelection Mappings\n\n\nIn order to map the selected data from current form into an XPath, create a mapping by pressing Add New button.\n\n\nSource\n\nNode name to map its data.\n\n\nTarget\n\nXPath to map data into.\n\n\nHierarchy XPath\n\nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".\n\n\nFolders\n\n    \nFolder\n\n        \nName\nfolder1\n/Name\n\n    \n/Folder\n\n    \nFolder\n\n        \nName\nfolder2\n/Name\n\n        \nFolders\n\n            \nFolder\n\n                \nName\nfolder2a\n/Name\n\n            \n/Folder\n\n            \nFolder\n\n                \nName\nfolder2b\n/Name\n\n            \n/Folder\n\n        \n/Folders\n\n    \n/Folder\n\n\n/Folders", 
            "title": "Form Data Query"
        }, 
        {
            "location": "/ag/pm/fo/form_data_query/#query", 
            "text": "Source XPath \nXPath to fetch data from the form.", 
            "title": "Query"
        }, 
        {
            "location": "/ag/pm/fo/form_data_query/#results", 
            "text": "Options to map and format result data.  Item XPath \nXPath of item that will be listed in dropbox. If it is left empty, which is the same with * value, all resulting items are being listed.", 
            "title": "Results"
        }, 
        {
            "location": "/ag/pm/fo/form_data_query/#list-item-formatting", 
            "text": "Customizes format of dropdown's options.  Display Text Format \nSpecify the format to display result text. You can use column names inside curly braces. Ex: {{Name}} - {{Id}}  Value Format \nSpecify the format of value. You can use column names inside curly braces. Ex:  {{Id}} - {{Type}}", 
            "title": "List Item Formatting"
        }, 
        {
            "location": "/ag/pm/fo/form_data_query/#selection-mappings", 
            "text": "In order to map the selected data from current form into an XPath, create a mapping by pressing Add New button.  Source \nNode name to map its data.  Target \nXPath to map data into.  Hierarchy XPath \nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".  Folders \n     Folder \n         Name folder1 /Name \n     /Folder \n     Folder \n         Name folder2 /Name \n         Folders \n             Folder \n                 Name folder2a /Name \n             /Folder \n             Folder \n                 Name folder2b /Name \n             /Folder \n         /Folders \n     /Folder  /Folders", 
            "title": "Selection Mappings"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/", 
            "text": "tbd\n\n\nQuery\n\n\nWeb Service\n\n\nService\n\n\nContract\n\n\nOperation\n\n\nParameters\n\n\nResults\n\n\nItem XPath\n\n\nList Item Formatting\n\n\nDisplay Text Format\n\n\nValue Format\n\n\nSelection Mappings\n\n\nAdd New\n\n\nSource\n\n\nTarget\n\n\nHierarchy Column", 
            "title": "Web Service Query"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#query", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#web-service", 
            "text": "Service  Contract  Operation", 
            "title": "Web Service"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#parameters", 
            "text": "", 
            "title": "Parameters"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#results", 
            "text": "Item XPath", 
            "title": "Results"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#list-item-formatting", 
            "text": "Display Text Format  Value Format", 
            "title": "List Item Formatting"
        }, 
        {
            "location": "/ag/pm/fo/web_service_query/#selection-mappings", 
            "text": "Add New  Source  Target  Hierarchy Column", 
            "title": "Selection Mappings"
        }, 
        {
            "location": "/ag/pm/fo/content_types/", 
            "text": "Lists content types that are registered for the domain.", 
            "title": "Content Types"
        }, 
        {
            "location": "/ag/pm/fo/activity_stream_design/", 
            "text": "Will be updated.\n\n\n\n\nData\n\n\nWill be updated.\n\n\nLink Template\n\nWill be updated.\n\n\nObject Id XPath\n\nWill be updated.\n\n\nRules\n\n\nSection Name\n\nSection name to control visibility of control.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information \nhere\n\n\nValidation rules, allow you to validate the data that is entered by the end-user.Further information \nhere\n\n\n\n\nData\n\n\nWill be updated.\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Activity Stream Design"
        }, 
        {
            "location": "/ag/pm/fo/activity_stream_design/#data", 
            "text": "Will be updated.  Link Template \nWill be updated.  Object Id XPath \nWill be updated.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/activity_stream_design/#rules", 
            "text": "Section Name \nSection name to control visibility of control.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.   Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. Further information  here  Validation rules, allow you to validate the data that is entered by the end-user.Further information  here", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/activity_stream_design/#data_1", 
            "text": "Will be updated.  Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/static_panel/", 
            "text": "Deprecated.\n\n\nRules\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in \ntask\n properties.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\nData\n\n\nBound XPath\n\n\nChanges XPath of the static panel.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Static Panel"
        }, 
        {
            "location": "/ag/pm/fo/static_panel/#rules", 
            "text": "Section Name \nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in  task  properties.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.   Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .  Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/static_panel/#data", 
            "text": "Bound XPath  Changes XPath of the static panel.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/xml_query_content/", 
            "text": "Performs queries on XML databases. Click on this content and then the Edit button to open the query window.\n\n\nDesign\n\n\nAuto Search\n\nSpecifies the query control should perform search immediately when visible. Visibility of control can be controlled by Rules or Section Name properties. When this attribute set to True value Filter content is not visible.\n\n\nClear First\n\nSpecifies the before query results populated on data model all existing records are removed.\n\n\nRules\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in \ntask\n properties.\n\n\nValidation Group\n\nName of validation group rules before executing query. When any rule is failed, error is shown on screen and query is not executed.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nXPath\n\nXPath of data model to bind control. If not set uses current node on data model.\n\n\nTarget XPath\n\nSpecifies the xpath of target container node to import query results. Specified xpath is relative to parent of current node not XPath attribute.", 
            "title": "Xml Query Content"
        }, 
        {
            "location": "/ag/pm/fo/xml_query_content/#design", 
            "text": "Auto Search \nSpecifies the query control should perform search immediately when visible. Visibility of control can be controlled by Rules or Section Name properties. When this attribute set to True value Filter content is not visible.  Clear First \nSpecifies the before query results populated on data model all existing records are removed.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/xml_query_content/#rules", 
            "text": "Section Name \nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in  task  properties.  Validation Group \nName of validation group rules before executing query. When any rule is failed, error is shown on screen and query is not executed.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.   Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .  Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/xml_query_content/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.   XPath \nXPath of data model to bind control. If not set uses current node on data model.  Target XPath \nSpecifies the xpath of target container node to import query results. Specified xpath is relative to parent of current node not XPath attribute.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/query_content/", 
            "text": "Performs \nrelational database\n queries on domain SQL database.\n\n\nDesign\n\n\nAuto Search\n\nSpecifies the query control should perform search immediately when visible. Visibility of control can be controlled by Rules or Section Name properties. When this attribute set to True value Filter content is not visible.\n\n\nAuto Select All (v4.5)\n\nSpecifies the query result picker is must be shown. Result picker allows to select individual rows to edit. If you work with too many rows picker is better method for performance. When set to True all matching rows are immediately imported.\n\n\nClear First\n\nSpecifies the before query results populated on data model all existing records are removed.\n\n\nRules\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n properties.  \n\n\nValidation Group\n\nName of validation group rules before executing query. When any rule is failed, error is shown on screen and query is not executed.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nXPath\n\nXPath of data model to bind control. If not set uses current node on data model.\n\n\nTarget XPath\n\nSpecifies the xpath of target container node to import query results. Specified xpath is relative to parent of current node not XPath attribute.\n\n\nFor example, use \"Filter\" node for XPath attribute and use \"Results\" xpath for TargetXPath attribute.\n\n\nData\n\n    \nFilter\n\n        \nSearchField\n \n/\n\n    \n/\nFilter\n\n    \nResults\n\n        \nRow\n\n            \nColumn\n \n/\n\n        \n/\nRow\n\n    \n/\nResults\n\n\n/\nData\n\n\n\n\n\nQuery Syntax\n\n\nRelational database queries uses special markup to specify query to execute. Query structure is similar to SQL Select command but you may use sub queries and join clauses automatically handled.\n\n\nQuery Structure\n\n\nQuery\n\n\n\nStart\n=\nStart index of results to fetch. If not specified 0 value is used.\n\n\n\nMaxLength\n=\n-1\nMaximum number of results to fetch. If not specified -1 (maximum results) is used.\n\n\n\nParameters\nQuery parameters.\n\n\n\nTargetSchema\nMySchema\n/\nTargetSchema\nName of schema of query target. Required.\n\n\n\nTargetTable\nMyTable\n/\nTargetTable\nName of table of query target. Required.\n\n\n\n/\nParameters\n\n\n\nColumns\nList of columns to include in results.\n\n\n\nColumn\n \nThe c\nolumn definition. Any number of column can be specified.\n\n\n\nName\n=\nMyColumn\nName of column or relation path. Required.\n\n\n\nFormula\n=\nNone\nAggregation formula like count, max etc. \n \nIf not specified no aggregation is applied.\n \n\n  \n\n\n\n\n\nProperties\nColumn specific properties. Currently \n \n\n\n\nXPath\n/\nXPath\nXPath of column value mapping for rows. If not specified column name is used.\n\n\n\nLanguage\n/\nLanguage\nBy default all columns are automatically localized by user language but with this property you can ask for explicitly specify the language. If language is not available, original\n  column value is used.\n\n\n\n/\nProperties\n\n\n\n/\nColumn\n\n\n\nColumn\n/\nColumn\n\n\n\nColumn\n/\nColumn\n\n\n\n/\nColumns\n\n\n\nWhere\nQuery criteria and block list. Criteria can be consist of criteria definitions or block definitions to group criteria for logical conditions (and / or).\n\n\n\nCriteria\nList of criteria values.\n \n\n\n\nCriteria\nThe criteria definition. Any number of criteria can be specified.\n \n\n\n\nName\n=\nMyColumn\nColumn name or relation path to criteria to apply. Required.\n\n\n\n\n\nComparison\n=\nEquals\nComparison method of criteria like equals or greater etc. If not specified Equals value is used. \n \n\n\n\nCondition\n=\nAnd\nCondition of criteria to merge with previous criteria in list. \nAnd\n, \nOr\n values are valid. If not used \nAnd\n value is used.\n\n\n\nFormula\n=\nNone\nAggregation formula like count, max etc. \nIf not specified no aggregation is applied.\n \n\n\n\n\n\nValue\n/\nValue\nValue of criteria. Value can be specified in static value or template format like \n{{Code}}\n or \n000-{{Code}}-1111\n to dynamically evaluate.\nIf not specified value used as empty string.\nYou can use \nNULL\n string value to specify null value.\n\n\n\nProperties\nCriteria specific custom properties. Currently IgnoreIfEquals only used.\n\n\n\n/\nProperties\n\n\n\nIgnoredValues\nThe list of values to ignore criteria completely. For example; when product name criteria is set to empty value you may want to list all products, not empty named products.\n\n\n\nValue\n/Value\nValue of criteria.\n\n\n\n/IgnoredValues\n\n\n\n/\nCriteria\n\n\n\nCriteria\n ............ \n/\nCriteria\n\n\n\n/\nCriteria\n\n\n\nBlocks\nList of blocks to group criteria.\n \n\n\n\nBlock\nThe block definition.\n \n\n\n\nCondition\n=\nAnd\nCondition to merge with previous blocks. If not specified And value is used.\n\n\n\nCriteria\nList of criteria. Same with above criteria definition.\n \n\n\n\nCriteria\n ............ \n/\nCriteria\n\n\n\n/\nCriteria\n\n\n\n/\nBlock\n\n\n\n/\nBlocks\n\n\n\n/\nWhere\n\n\n\nOrder\nList of ordering columns.\n \n\n\n\nOrder\nThe order definition.\n \n\n\n\nName\n=\nMyColumn\nColumn name or relation path to apply order. Required.\n\n\n\n\n\nType\n=\nAscending\n/\nType of ordering. \nAscending\n, \nDescending\n values are valid. If not specified \nAscending\n value is used.\n\n\n\n/\nOrder\n\n\n\nSubQueries\nList of subqueries to return as related child rows.\n \n\n\n\nQuery\nSubquery definition. Same with above only Name attribute is required.\n\n\n\nName\n=\nName of table relation to get rows as child. If relation is not found in table definition error is thrown.\n\n\n\n/\nQuery\n\n\n\n/\nSubQueries\n\n\n\n/\nQuery\n\n\n\n\n\nFormula\n\n\nFormula specifies the method of evaluation of row values. Formula enumeration can be one of following values;\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNone\n\n\nNo aggregation is applied. All values in rows.\n\n\n\n\n\n\nCount\n\n\nCount of row values\n\n\n\n\n\n\nCountDistinct\n\n\nCount of distinct values in rows\n\n\n\n\n\n\nSum\n\n\nSum of row values. Valid for numeric type columns.\n\n\n\n\n\n\nSumDistinct\n\n\nSum of distinct values in rows. Valid for numeric type columns.\n\n\n\n\n\n\nAvg\n\n\nAverage of row values. Valid for numeric type columns.\n\n\n\n\n\n\nAvgDistinct\n\n\nAverage of distinct values in rows. Valid for numeric type columns.\n\n\n\n\n\n\nMin\n\n\nMinimum value in rows.\n\n\n\n\n\n\nMax\n\n\nMaximum value in row values.\n\n\n\n\n\n\n\n\nComparison\n\n\nSpecifies the comparison method of criteria value.\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDifferent\n\n\nAll rows with different than criteria value.\n\n\n\n\n\n\nEquals\n\n\nAll rows with same value.\n\n\n\n\n\n\nGreaterThan\n\n\nAll rows that greater than criteria value.\n\n\n\n\n\n\nGreaterThanOrEqualTo\n\n\nAll rows that greater or equals to criteria value.\n\n\n\n\n\n\nLessThan\n\n\nAll rows that less than criteria value.\n\n\n\n\n\n\nLessThanOrEqualTo\n\n\nAll rows that less or equals to criteria value.\n\n\n\n\n\n\nLike\n\n\nAll rows that likes to criteria value. Criteria value can be used with * (star character) Like \nABC, ABC\n, \nABC\n\n\n\n\n\n\n\n\nColumn Name\n\n\nColumn names can be specified as directly column name or relation path. Relation paths can be specified as \"Relation.Relation.Column\" format.\n\n\n\n\nFor example you can use following values as column names for above relational database model.\n\n\n\n\n\n\n\n\nColumn Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nName of customer\n\n\n\n\n\n\nOrders.Id\n\n\nId of order\n\n\n\n\n\n\nOrders.Product.Name\n\n\nName of ordered product\n\n\n\n\n\n\n\n\nExample Query\n\n\nFollowing query returns the all customer name and count of orders by product name criteria. Each row also contains the list of related customer orders as a child rows. \n\n\nQuery\n\n    \nParameters\n\n        \nTargetSchema\nCustomer\n/\nTargetSchema\n\n        \nTargetTable\nMySchema\n/\nTargetTable\n\n    \n/\nParameters\n\n    \nColumns\n\n        \nColumn\n \nName\n=\nName\n \nFormula\n=\nNone\n \n/\n\n        \nColumn\n \nName\n=\nOrders.Id\n \nFormula\n=\nCount\n \n/\n\n    \n/\nColumns\n\n    \nWhere\n\n        \nCriteria\n\n            \nCriteria\n \nName\n=\nOrders.Product.Name\n \nComparison\n=\nLike\n\n                \nValue\n{{ProductName}}\n/\nValue\n\n                \nIgnoredValues\n\n                    \nValue\n/\nValue\n\n                    \nValue\n*All*\n/\nValue\n\n                \n/\nIgnoredValues\n\n            \n/\nCriteria\n\n        \n/\nCriteria\n\n    \n/\nWhere\n\n    \nOrder\n\n        \nOrder\n \nName\n=\nOrders.Product.Name\n \nType\n=\nAscending\n/\n \n    \n/\nOrder\n\n    \nSubQueries\n\n        \nQuery\n \nName\n=\nOrders\n\n            \nColumns\n\n                \nColumn\n \nName\n=\nId\n \n/\n\n                \nColumn\n \nName\n=\nProductId\n \n/\n\n            \n/\nColumns\n\n            \nOrder\n\n                \nOrder\n \nName\n=\nProduct.Name\n \nType\n=\nAscending\n/\n \n            \n/\nOrder\n\n        \n/\nQuery\n\n    \n/\nSubQueries\n\n\n/\nQuery", 
            "title": "Query Content"
        }, 
        {
            "location": "/ag/pm/fo/query_content/#design", 
            "text": "Auto Search \nSpecifies the query control should perform search immediately when visible. Visibility of control can be controlled by Rules or Section Name properties. When this attribute set to True value Filter content is not visible.  Auto Select All (v4.5) \nSpecifies the query result picker is must be shown. Result picker allows to select individual rows to edit. If you work with too many rows picker is better method for performance. When set to True all matching rows are immediately imported.  Clear First \nSpecifies the before query results populated on data model all existing records are removed.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/query_content/#rules", 
            "text": "Section Name \nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in  task  properties.    Validation Group \nName of validation group rules before executing query. When any rule is failed, error is shown on screen and query is not executed.  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/query_content/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.  XPath \nXPath of data model to bind control. If not set uses current node on data model.  Target XPath \nSpecifies the xpath of target container node to import query results. Specified xpath is relative to parent of current node not XPath attribute.  For example, use \"Filter\" node for XPath attribute and use \"Results\" xpath for TargetXPath attribute.  Data \n     Filter \n         SearchField   / \n     / Filter \n     Results \n         Row \n             Column   / \n         / Row \n     / Results  / Data", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/query_content/#query-syntax", 
            "text": "Relational database queries uses special markup to specify query to execute. Query structure is similar to SQL Select command but you may use sub queries and join clauses automatically handled.  Query Structure  Query  Start = Start index of results to fetch. If not specified 0 value is used.  MaxLength = -1 Maximum number of results to fetch. If not specified -1 (maximum results) is used.  Parameters Query parameters.  TargetSchema MySchema / TargetSchema Name of schema of query target. Required.  TargetTable MyTable / TargetTable Name of table of query target. Required.  / Parameters  Columns List of columns to include in results.  Column   The c olumn definition. Any number of column can be specified.  Name = MyColumn Name of column or relation path. Required.  Formula = None Aggregation formula like count, max etc.    If not specified no aggregation is applied.   \n     Properties Column specific properties. Currently     XPath / XPath XPath of column value mapping for rows. If not specified column name is used.  Language / Language By default all columns are automatically localized by user language but with this property you can ask for explicitly specify the language. If language is not available, original\n  column value is used.  / Properties  / Column  Column / Column  Column / Column  / Columns  Where Query criteria and block list. Criteria can be consist of criteria definitions or block definitions to group criteria for logical conditions (and / or).  Criteria List of criteria values.    Criteria The criteria definition. Any number of criteria can be specified.    Name = MyColumn Column name or relation path to criteria to apply. Required.   Comparison = Equals Comparison method of criteria like equals or greater etc. If not specified Equals value is used.     Condition = And Condition of criteria to merge with previous criteria in list.  And ,  Or  values are valid. If not used  And  value is used.  Formula = None Aggregation formula like count, max etc.  If not specified no aggregation is applied.     Value / Value Value of criteria. Value can be specified in static value or template format like  {{Code}}  or  000-{{Code}}-1111  to dynamically evaluate. If not specified value used as empty string. You can use  NULL  string value to specify null value.  Properties Criteria specific custom properties. Currently IgnoreIfEquals only used.  / Properties  IgnoredValues The list of values to ignore criteria completely. For example; when product name criteria is set to empty value you may want to list all products, not empty named products.  Value /Value Value of criteria.  /IgnoredValues  / Criteria  Criteria  ............  / Criteria  / Criteria  Blocks List of blocks to group criteria.    Block The block definition.    Condition = And Condition to merge with previous blocks. If not specified And value is used.  Criteria List of criteria. Same with above criteria definition.    Criteria  ............  / Criteria  / Criteria  / Block  / Blocks  / Where  Order List of ordering columns.    Order The order definition.    Name = MyColumn Column name or relation path to apply order. Required.   Type = Ascending / Type of ordering.  Ascending ,  Descending  values are valid. If not specified  Ascending  value is used.  / Order  SubQueries List of subqueries to return as related child rows.    Query Subquery definition. Same with above only Name attribute is required.  Name = Name of table relation to get rows as child. If relation is not found in table definition error is thrown.  / Query  / SubQueries  / Query   Formula  Formula specifies the method of evaluation of row values. Formula enumeration can be one of following values;     Value  Description      None  No aggregation is applied. All values in rows.    Count  Count of row values    CountDistinct  Count of distinct values in rows    Sum  Sum of row values. Valid for numeric type columns.    SumDistinct  Sum of distinct values in rows. Valid for numeric type columns.    Avg  Average of row values. Valid for numeric type columns.    AvgDistinct  Average of distinct values in rows. Valid for numeric type columns.    Min  Minimum value in rows.    Max  Maximum value in row values.     Comparison  Specifies the comparison method of criteria value.     Value  Description      Different  All rows with different than criteria value.    Equals  All rows with same value.    GreaterThan  All rows that greater than criteria value.    GreaterThanOrEqualTo  All rows that greater or equals to criteria value.    LessThan  All rows that less than criteria value.    LessThanOrEqualTo  All rows that less or equals to criteria value.    Like  All rows that likes to criteria value. Criteria value can be used with * (star character) Like  ABC, ABC ,  ABC     Column Name  Column names can be specified as directly column name or relation path. Relation paths can be specified as \"Relation.Relation.Column\" format.   For example you can use following values as column names for above relational database model.     Column Name  Description      Name  Name of customer    Orders.Id  Id of order    Orders.Product.Name  Name of ordered product     Example Query  Following query returns the all customer name and count of orders by product name criteria. Each row also contains the list of related customer orders as a child rows.   Query \n     Parameters \n         TargetSchema Customer / TargetSchema \n         TargetTable MySchema / TargetTable \n     / Parameters \n     Columns \n         Column   Name = Name   Formula = None   / \n         Column   Name = Orders.Id   Formula = Count   / \n     / Columns \n     Where \n         Criteria \n             Criteria   Name = Orders.Product.Name   Comparison = Like \n                 Value {{ProductName}} / Value \n                 IgnoredValues \n                     Value / Value \n                     Value *All* / Value \n                 / IgnoredValues \n             / Criteria \n         / Criteria \n     / Where \n     Order \n         Order   Name = Orders.Product.Name   Type = Ascending /  \n     / Order \n     SubQueries \n         Query   Name = Orders \n             Columns \n                 Column   Name = Id   / \n                 Column   Name = ProductId   / \n             / Columns \n             Order \n                 Order   Name = Product.Name   Type = Ascending /  \n             / Order \n         / Query \n     / SubQueries  / Query", 
            "title": "Query Syntax"
        }, 
        {
            "location": "/ag/pm/fo/apply_template/", 
            "text": "Apply Template control allows including pre-defined templates on forms. After defining form templates on the main design page they show up in the Add New content menu on the form.\n\n\n\n\nRules\n\n\nSection Name\n\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n properties.  \n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound XPath\n\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nOther properties\n\n\n\n\nCut is used to move apply template.\n\n\nCopy is used to copy apply template.\n\n\nDelete is used to delete apply template.\n\n\nXML is used to view or add xml of the apply template.\n\n\nConvert is used to change apply template to other content controls.\n\n\nAdd new is used to add the new apply template.", 
            "title": "Apply Template"
        }, 
        {
            "location": "/ag/pm/fo/apply_template/#rules", 
            "text": "Section Name  Name of section is for controlling read only or visible state of a section. If set to a value this section can be configured in  task  properties.    Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/apply_template/#data", 
            "text": "Bound XPath  XPath of the element. If set to empty, it uses parent xpath.  Other properties   Cut is used to move apply template.  Copy is used to copy apply template.  Delete is used to delete apply template.  XML is used to view or add xml of the apply template.  Convert is used to change apply template to other content controls.  Add new is used to add the new apply template.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/label/", 
            "text": "Label control is the simplest way of displaying a text on the form. When entered plain text it is displayed without any operation. If you want to perform mathematical operations or get value(s) from the XML, you must use double braces around the statement, for example \n{{ LeaveInformation/RemainingDays + 1 }}\n or \n{{ Personnel/Age }}\n.", 
            "title": "Label"
        }, 
        {
            "location": "/ag/pm/fo/html_box/", 
            "text": "HTML Editor is capable of applying HTML formatting to the text entered into this area.\n\n\n\n\nDesign\n\n\nRich Editor\n\nThis selection enables / disables the HTML format menu.\n\n\nTrack Changes ?\n\nWhen this checkbox is selected changes made on the content of HTML box are recorded and are shown with a different background color. Changes can be made visible / hidden with the Show Changes button on HTML format menu. Track Changes option also enables a text box named Allow Commit Changes XPath on the form design.\n\n\nAllow Commit Changes XPath\n\nThis option accepts only 0 and 1 values. You can simply type the value or the Xpath to get it.\n\n\n\n\n\n\nWhen entered 1; changes made on the content can be accepted or rejected via the buttons on the format menu. These buttons show up when the changed text is selected. If rejected, changes are discarded. However if the changes are accepted their background color dissappear and they are displayed as the same with main text. Later if any accepted text is deleted, it is displayed with strikethrough (\nexample\n) and these parts become visible / hidden when Show Changes button is clicked.\n\n\n\n\n\n\nWhen entered 0; changes are always displayed with the different background color.\n\n\n\n\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the html box into its container.  \n\n\nPlace Holder\n\nAny text in this area will be written as faded in the html box when it is empty. \n\n\nHints\n\nThe text entered in this area pops up when you hover the field.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled. \n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Html Box"
        }, 
        {
            "location": "/ag/pm/fo/html_box/#design", 
            "text": "Rich Editor \nThis selection enables / disables the HTML format menu.  Track Changes ? \nWhen this checkbox is selected changes made on the content of HTML box are recorded and are shown with a different background color. Changes can be made visible / hidden with the Show Changes button on HTML format menu. Track Changes option also enables a text box named Allow Commit Changes XPath on the form design.  Allow Commit Changes XPath \nThis option accepts only 0 and 1 values. You can simply type the value or the Xpath to get it.    When entered 1; changes made on the content can be accepted or rejected via the buttons on the format menu. These buttons show up when the changed text is selected. If rejected, changes are discarded. However if the changes are accepted their background color dissappear and they are displayed as the same with main text. Later if any accepted text is deleted, it is displayed with strikethrough ( example ) and these parts become visible / hidden when Show Changes button is clicked.    When entered 0; changes are always displayed with the different background color.    Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the html box into its container.    Place Holder \nAny text in this area will be written as faded in the html box when it is empty.   Hints \nThe text entered in this area pops up when you hover the field.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/html_box/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.   Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/html_box/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.   Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/numeric/", 
            "text": "Displays numeric entries. Accepts only numerical entries. In order to use this box, set the data type to number from Data Model.\n\n\n\n\nDesign\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the money box into its container. \n\n\nPlace Holder\n\nAny text in this area will be written as faded in the place holder when it is empty.  \n\n\nHints\n\nThe text entered in this area pops up when you hover the field. \n\n\nDecimals\n\nNumber of decimals to display after dot.\n\n\nShow Digit Seperator\n\nYes, use digit seperator for thousand.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Numeric"
        }, 
        {
            "location": "/ag/pm/fo/numeric/#design", 
            "text": "Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the money box into its container.   Place Holder \nAny text in this area will be written as faded in the place holder when it is empty.    Hints \nThe text entered in this area pops up when you hover the field.   Decimals \nNumber of decimals to display after dot.  Show Digit Seperator \nYes, use digit seperator for thousand.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/numeric/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/numeric/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.   Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/range/", 
            "text": "Displays a number line which covers the interval specified. Practical use of this control is to specify tax rates.\nIn order to use this box, select the number type in Data Model and select Range from the Convert menu on the form.\n\n\n\n\nDesign\n\n\nMinimum XPath\n\nXpath of minimum value. Ex: 0 or any XPath that contains the value\n\n\nMaximum XPath\n\nXpath of maximum value. Ex: 100 or any XPath that contains the value\n\n\nStep XPath\n\nXpath step of value. Ex: 10 or any XPath that contains the value\n\n\nRules\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nValue XPath\n\nXpath of value to store.\n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Range"
        }, 
        {
            "location": "/ag/pm/fo/range/#design", 
            "text": "Minimum XPath \nXpath of minimum value. Ex: 0 or any XPath that contains the value  Maximum XPath \nXpath of maximum value. Ex: 100 or any XPath that contains the value  Step XPath \nXpath step of value. Ex: 10 or any XPath that contains the value", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/range/#rules", 
            "text": "Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/range/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.   Value XPath \nXpath of value to store.  Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/message_control/", 
            "text": "This control is practical for displaying a message on the form. It is visible as default but with formatting rules it might be useful for showing / hiding a dynamic information note on the form.\n\n\nDesign\n\n\nType\n\nType of message. The icon displayed before the text and border color change according to selected type. Available options are :\n\n\n\n\n\n\nInfo\n\n\n\n\n\n\n\nError\n\n\n\n\n\n\n\nSuccess\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\n\n\nContent\n\nText message to display.\n\n\nRules\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n properties.  \n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.", 
            "title": "Message Control"
        }, 
        {
            "location": "/ag/pm/fo/message_control/#design", 
            "text": "Type \nType of message. The icon displayed before the text and border color change according to selected type. Available options are :    Info    Error    Success    Warning    Content \nText message to display.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/message_control/#rules", 
            "text": "Section Name \nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in  task  properties.    Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/message_control/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/money_box/", 
            "text": "Allows numerical entries and displays value with a money sign on the left. In order to use this box, set the data type to number from Data Model and select Money Box from the Convert menu on the form.\n\n\n\n\nDesign\n\n\nSize\n\nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the money box into its container. \n\n\nPlace Holder\n\nAny text in this area will be written as faded in the place holder when it is empty.  \n\n\nHints\n\nThe text entered in this area pops up when you hover the field. \n\n\nDecimals\n\nNumber of decimals to display after dot.\n\n\nShow Digit Seperator\n\nYes, use digit seperator for thousand.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nOther Properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Money Box"
        }, 
        {
            "location": "/ag/pm/fo/money_box/#design", 
            "text": "Size \nLarge, Big, Medium, and Small options are listed. Selecting one of these will shrink or fit the money box into its container.   Place Holder \nAny text in this area will be written as faded in the place holder when it is empty.    Hints \nThe text entered in this area pops up when you hover the field.   Decimals \nNumber of decimals to display after dot.  Show Digit Seperator \nYes, use digit seperator for thousand.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/money_box/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/money_box/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.   Other Properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/row_content/", 
            "text": "A control container that fills all width. Row content may also contain one or more columns to build a grid layout. Row content also provides responsive layouts for small devices and may change columns to fit all controls.\n\n\n\n\nFor row content you can configure following properties:\n\n\nDesign\n\n\nLabel\n\nLabel to show top of row. If set to empty title is not visible at running form.\n\n\nType\n\nType of row layout. When selected as a \"Section\" row style is changed to section layout.\nWhen section type is selected, a new menu, named Collapsing, shows.\n\n\nCollapsing\n\nThis feature allows you to display a section as expanded or collapsed.\n\n\n\n\nExpanded : Section loads as opened on the form. You can collapse it with arrow icon.\n\n\nCollapsed : Section loads as closed on the form. You can expand it with arrow icon.\n\n\n\n\nBold\n\nwill be update\n\n\nItalic\n\nwill be update\n\n\nText Color\n\nwill be update\n\n\nBackground Color\n\nwill be update\n\n\nRules\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in \ntask\n properties.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n* Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\nData\n\n\nBound Xpath\n\nXPath of the element. If set to empty, it uses parent xpath. \n\n\nOther Properties\n\n\n\n\nCut is used to move row layout  content.\n\n\nCopy is used to copy row layout content.\n\n\nDelete is used to delete row layout content.\n\n\nXML is used to view or add xml of the row layout content.\n\n\nConvert is used to change row layout content to other content controls those are database query, XML database query, conditional content, tabbed layout content, static panel, guide  message, flow layout content, activity stream, expression, XSL transform, Html or label.\n\n\nColumns is used to divide row layout content to element section.", 
            "title": "Row Content"
        }, 
        {
            "location": "/ag/pm/fo/row_content/#design", 
            "text": "Label \nLabel to show top of row. If set to empty title is not visible at running form.  Type \nType of row layout. When selected as a \"Section\" row style is changed to section layout.\nWhen section type is selected, a new menu, named Collapsing, shows.  Collapsing \nThis feature allows you to display a section as expanded or collapsed.   Expanded : Section loads as opened on the form. You can collapse it with arrow icon.  Collapsed : Section loads as closed on the form. You can expand it with arrow icon.   Bold \nwill be update  Italic \nwill be update  Text Color \nwill be update  Background Color \nwill be update", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/row_content/#rules", 
            "text": "Section Name \nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in  task  properties.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n* Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .   Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/row_content/#data", 
            "text": "Bound Xpath \nXPath of the element. If set to empty, it uses parent xpath.   Other Properties   Cut is used to move row layout  content.  Copy is used to copy row layout content.  Delete is used to delete row layout content.  XML is used to view or add xml of the row layout content.  Convert is used to change row layout content to other content controls those are database query, XML database query, conditional content, tabbed layout content, static panel, guide  message, flow layout content, activity stream, expression, XSL transform, Html or label.  Columns is used to divide row layout content to element section.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/repeating_content/", 
            "text": "This control provides adding multiple content via its \"Add New\" button on the form.\n\n\n\n\nDesign\n\n\nAdd New Label\n\nSpecifies a name for \"Add New\" button. This button adds new row to repeating content.\n\n\nExpandable Details\n\nThis option sets each repeating row hidden and shows a Details button instead. Content displays when clicked this button. Might come in handy when repeating content is big.\n\n\n\n\nYes,\n\n\nNo,\n\n\n\n\nShow Blank Slate\n\n\nRow Width\n\nSpecify custom pixel width for row. 0 is default which fills all the width.\n\n\nRow Height\n\nSpecify custom pixel height for row. 0 is default which fills all the height.\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in task properties.\n\n\nDynamic Rules\n\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nBound XPath\n\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nRow Id XPath\n\nGive a specific Id for each row by filling this box with an XPath.  \n\n\nItem XPath\n\nItems of a repeating content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath.\n\n\nFilter XPath\n \nFilters rows according to this Xpath. The rows will display if their Filter XPath return true.\n\n\nSort XPath\n\nSorts rows with respect to this XPath\n\n\nOther\n\n\nAllow Moving XPath\n\nXpath to control item movement in list. Please use \"0\" to disable for always.\n\n\nAllow Move Up/Down XPath\n\nXpath to control vertical item movement in list. Please use \"0\" to disable for always. \n\n\nAllow New XPath\n\nXpath to control adding new items movement to list. Please use \"0\" to disable for always. \n\n\nAllow Delete XPath\n\nXpath to control deleting items movement from list. Please use \"0\" to disable for always.  \n\n\nAllow Delete All XPath\n\nXpath to control clear the list. Please use \"0\" to disable for always.   \n\n\nMonitored XPaths\n\nNormally repeating content refreshes itself if specified XPath for filtering, ordering etc. changes. In cases you want to adjust repeating content to watch XPath(s) other than the ones in it, you may specify them at this section.\n\n\nOther properties\n\n\n\n\nCut is used to move control.\n\n\nCopy is used to copy control.\n\n\nDelete is used to delete control.\n\n\nXML is used to view and edit xml of the control.\n\n\nConvert is used to change content control into other controls.", 
            "title": "Repeating Content"
        }, 
        {
            "location": "/ag/pm/fo/repeating_content/#design", 
            "text": "Add New Label \nSpecifies a name for \"Add New\" button. This button adds new row to repeating content.  Expandable Details \nThis option sets each repeating row hidden and shows a Details button instead. Content displays when clicked this button. Might come in handy when repeating content is big.   Yes,  No,   Show Blank Slate  Row Width \nSpecify custom pixel width for row. 0 is default which fills all the width.  Row Height \nSpecify custom pixel height for row. 0 is default which fills all the height.", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/repeating_content/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Section Name \nName of section is for controlling read only or visible state of a section. After setting value, you can configure section in task properties.  Dynamic Rules  Dynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/repeating_content/#data", 
            "text": "Bound XPath  XPath of the element. If set to empty, it uses parent xpath.  Row Id XPath \nGive a specific Id for each row by filling this box with an XPath.    Item XPath \nItems of a repeating content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath.  Filter XPath  \nFilters rows according to this Xpath. The rows will display if their Filter XPath return true.  Sort XPath \nSorts rows with respect to this XPath", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/repeating_content/#other", 
            "text": "Allow Moving XPath \nXpath to control item movement in list. Please use \"0\" to disable for always.  Allow Move Up/Down XPath \nXpath to control vertical item movement in list. Please use \"0\" to disable for always.   Allow New XPath \nXpath to control adding new items movement to list. Please use \"0\" to disable for always.   Allow Delete XPath \nXpath to control deleting items movement from list. Please use \"0\" to disable for always.    Allow Delete All XPath \nXpath to control clear the list. Please use \"0\" to disable for always.     Monitored XPaths \nNormally repeating content refreshes itself if specified XPath for filtering, ordering etc. changes. In cases you want to adjust repeating content to watch XPath(s) other than the ones in it, you may specify them at this section.  Other properties   Cut is used to move control.  Copy is used to copy control.  Delete is used to delete control.  XML is used to view and edit xml of the control.  Convert is used to change content control into other controls.", 
            "title": "Other"
        }, 
        {
            "location": "/ag/pm/fo/table_content/", 
            "text": "Table content control allows listing multiple records.\n\n\n\n\nDesign\n\n\nAdd New Label\n\nSpecifies a name for Add New button. This button adds new row to table content.\n\n\nShow Blank Slate\n\n\nRules\n\n\nRequired for Group\n\nEnter any name into this area to specify a validation group for the table content. After that when you enter this same validation group name into Validation Group area on any action button of any task, it will be checked for validation whenever the action is selected on the form. \n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n properties.  \n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nRow Rules\n\nSame rules as the dynamic rules are available but it applies only to the rows that satisfy the condition.\n\n\nData\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nRow Id XPath\n\nGive a specific Id for each row by filling this box with an XPath.   \n\n\nItem XPath\n\nItems of a table content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath. \n\n\nHierarchy XPath\n\nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".\n\n\nFolders\n\n    \nFolder\n\n        \nName\nfolder1\n/\nName\n\n    \n/\nFolder\n\n    \nFolder\n\n        \nName\nfolder2\n/\nName\n\n        \nFolders\n\n            \nFolder\n\n                \nName\nfolder2a\n/\nName\n\n            \n/\nFolder\n\n            \nFolder\n\n                \nName\nfolder2b\n/\nName\n\n            \n/\nFolder\n\n        \n/\nFolders\n\n    \n/\nFolder\n\n\n/\nFolders\n\n\n\n\nFolders\n\n    \nFolder\n\n        \nName\nfolder1\n/\nName\n\n    \n/\nFolder\n\n    \nFolder\n\n        \nName\nfolder2\n/\nName\n\n        \nFolders\n\n            \nFolder\n\n                \nName\nfolder2a\n/\nName\n\n            \n/\nFolder\n\n            \nFolder\n\n                \nName\nfolder2b\n/\nName\n\n            \n/\nFolder\n\n        \n/\nFolders\n\n    \n/\nFolder\n\n\n/\nFolders\n\n\n\n\nFilter XPath\n\nBy using Filter Xpath, it is possible to refine the content of the table. For this example, only the rows where \nIsCustomer\n node is set to \ntrue\n, will be displayed.\n\n\n\n\nExport to Excel\n\nThis control allows you to export your records to excel. In order to accomplish this, all you have to do is, enable AllowExport in DataExchange and define the columns in this property.\n\n\nDataExchange\n \nAllowImport\n=\nFalse\n \nAllowExport\n=\nTrue\n\n        \nColumns\n\n            \nColumn\n \nCaption\n=\nForm No\n \nType\n=\nText\n\n                \nXPath\n![CDATA[FormNo]]\n/\nXPath\n\n            \n/\nColumn\n\n            \nColumn\n \nCaption\n=\nOwner\n \nType\n=\nText\n\n                \nXPath\n![CDATA[Owner]]\n/\nXPath\n\n            \n/\nColumn\n\n            \nColumn\n \nCaption\n=\nDate\n \nType\n=\nDateTime\n\n                \nXPath\n![CDATA[FormDate]]\n/\nXPath\n\n            \n/\nColumn\n\n        \n/\nColumns\n\n    \n/\nDataExchange\n\n\n\n\n\nSort XPath\n\nSorts rows with respect to this XPath.\n\n\nOther\n\n\nAllow Moving XPath\n\nXpath to control item movement in list. Please use \"0\" to disable for always.\n\n\nAllow Move Up/Down XPath\n\nXpath to control vertical item movement in list. Please use \"0\" to disable for always. \n\n\nAllow New XPath\n\nXpath to control adding new items movement to list. Please use \"0\" to disable for always. \n\n\nAllow Delete XPath\n\nXpath to control deleting items movement from list. Please use \"0\" to disable for always.  \n\n\nAllow Delete All XPath\n\nXpath to control clear the list. Please use \"0\" to disable for always.   \n\n\nMonitored XPaths\n\nNormally repeating content refreshes itself if specified XPath for filtering, ordering etc. changes. In cases you want to adjust repeating content to watch XPath(s) other than the ones in it, you may specify them at this section.\n\n\nOther properties\n\n\n\n\nCut is used to move table  content.\n\n\nCopy is used to copy table content.\n\n\nDelete is used to delete table content.\n\n\nXML is used to view or add xml of the table content.\n\n\nConvert is used to change table content to other content controls.\n\n\nAdd new is used to add the new columns in to table.", 
            "title": "Table Content"
        }, 
        {
            "location": "/ag/pm/fo/table_content/#design", 
            "text": "Add New Label \nSpecifies a name for Add New button. This button adds new row to table content.  Show Blank Slate", 
            "title": "Design"
        }, 
        {
            "location": "/ag/pm/fo/table_content/#rules", 
            "text": "Required for Group \nEnter any name into this area to specify a validation group for the table content. After that when you enter this same validation group name into Validation Group area on any action button of any task, it will be checked for validation whenever the action is selected on the form.   Section Name \nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in  task  properties.    Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .    Row Rules \nSame rules as the dynamic rules are available but it applies only to the rows that satisfy the condition.", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/table_content/#data", 
            "text": "Bound XPath \nXPath of the element. If set to empty, it uses parent xpath.  Row Id XPath \nGive a specific Id for each row by filling this box with an XPath.     Item XPath \nItems of a table content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath.   Hierarchy XPath \nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".  Folders \n     Folder \n         Name folder1 / Name \n     / Folder \n     Folder \n         Name folder2 / Name \n         Folders \n             Folder \n                 Name folder2a / Name \n             / Folder \n             Folder \n                 Name folder2b / Name \n             / Folder \n         / Folders \n     / Folder  / Folders   Folders \n     Folder \n         Name folder1 / Name \n     / Folder \n     Folder \n         Name folder2 / Name \n         Folders \n             Folder \n                 Name folder2a / Name \n             / Folder \n             Folder \n                 Name folder2b / Name \n             / Folder \n         / Folders \n     / Folder  / Folders   Filter XPath \nBy using Filter Xpath, it is possible to refine the content of the table. For this example, only the rows where  IsCustomer  node is set to  true , will be displayed.   Export to Excel \nThis control allows you to export your records to excel. In order to accomplish this, all you have to do is, enable AllowExport in DataExchange and define the columns in this property.  DataExchange   AllowImport = False   AllowExport = True \n         Columns \n             Column   Caption = Form No   Type = Text \n                 XPath ![CDATA[FormNo]] / XPath \n             / Column \n             Column   Caption = Owner   Type = Text \n                 XPath ![CDATA[Owner]] / XPath \n             / Column \n             Column   Caption = Date   Type = DateTime \n                 XPath ![CDATA[FormDate]] / XPath \n             / Column \n         / Columns \n     / DataExchange   Sort XPath \nSorts rows with respect to this XPath.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/table_content/#other", 
            "text": "Allow Moving XPath \nXpath to control item movement in list. Please use \"0\" to disable for always.  Allow Move Up/Down XPath \nXpath to control vertical item movement in list. Please use \"0\" to disable for always.   Allow New XPath \nXpath to control adding new items movement to list. Please use \"0\" to disable for always.   Allow Delete XPath \nXpath to control deleting items movement from list. Please use \"0\" to disable for always.    Allow Delete All XPath \nXpath to control clear the list. Please use \"0\" to disable for always.     Monitored XPaths \nNormally repeating content refreshes itself if specified XPath for filtering, ordering etc. changes. In cases you want to adjust repeating content to watch XPath(s) other than the ones in it, you may specify them at this section.  Other properties   Cut is used to move table  content.  Copy is used to copy table content.  Delete is used to delete table content.  XML is used to view or add xml of the table content.  Convert is used to change table content to other content controls.  Add new is used to add the new columns in to table.", 
            "title": "Other"
        }, 
        {
            "location": "/ag/pm/fo/tabbed_content/", 
            "text": "A tab layout control container. Tabbed Content allows to use many controls in small space. \n\n\nFor small devices please avoid using of tabbed content and consider alternative layouts.\n\n\n\n\nFor a tabbed content you can configure the following properties:\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n  properties. \n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n* Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\nData\n\nXPath to data model to be attached. If set to empty parent data element is used.\n\n\nActive Tab XPath\n\nXPath of active tab index as number value. Updating value of this XPath causes to automatically switch specified tab page.\n\n\nTab Page\n\n\nYou may also need to control tab pages individually and you can configure the following properties for a tab page:\n\n\nLabel\n\nLabel to show as header of tab page.\n\n\nSection Name\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nBound XPath\n \nXPath of the element. If set to empty, it uses parent xpath.\n\n\nOther properties\n\n\n\n\nCut is used to move tabbed content.\n\n\nCopy is used to copy tabbed content.\n\n\nDelete is used to delete tabbed content.\n\n\nXML is used to view or add xml of the tabbed content.\n\n\nConvert is used to change tabbed content to other content controls. \n\n\nAdd new is used to open new tabbed content page.", 
            "title": "Tabbed Content"
        }, 
        {
            "location": "/ag/pm/fo/tabbed_content/#tab-page", 
            "text": "You may also need to control tab pages individually and you can configure the following properties for a tab page:  Label \nLabel to show as header of tab page.  Section Name \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .  Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .  Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .    Bound XPath  \nXPath of the element. If set to empty, it uses parent xpath.  Other properties   Cut is used to move tabbed content.  Copy is used to copy tabbed content.  Delete is used to delete tabbed content.  XML is used to view or add xml of the tabbed content.  Convert is used to change tabbed content to other content controls.   Add new is used to open new tabbed content page.", 
            "title": "Tab Page"
        }, 
        {
            "location": "/ag/pm/fo/data_table/", 
            "text": "Data table control allows listing multiple records. Besides being similar to other content controls such as Table Content Control, it offers a better performance and has built-in pagination. It also allows displaying links in the content.\n\n\n\n\nRules\n\n\nRequired for Group\n\nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the \nvalidation group\n field from the right side menu will require this section to be filled.\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\n properties.  \n\n\nDynamic Rules\n\nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.\n\n\n\n\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information \nhere\n.\n\n\n\n\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. \nFurther information \nhere\n.\n\n\n\n\n\n\nData\n\n\nXPath to data model to be attached. If set to empty parent data element is used.\n\n\nBound XPath\n \nXPath of the element. If set to empty, it uses parent xpath. \n\n\nRow Id XPath\n\nGive a specific Id for each row by filling this box with an XPath. \n\n\nItem XPath\n\nItems of a data table content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath. \n\n\nHierarchy XPath\n\nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".\n\n\nFolders\n\n    \nFolder\n\n        \nName\nfolder1\n/\nName\n\n    \n/\nFolder\n\n    \nFolder\n\n        \nName\nfolder2\n/\nName\n\n        \nFolders\n\n            \nFolder\n\n                \nName\nfolder2a\n/\nName\n\n            \n/\nFolder\n\n            \nFolder\n\n                \nName\nfolder2b\n/\nName\n\n            \n/\nFolder\n\n        \n/\nFolders\n\n    \n/\nFolder\n\n\n/\nFolders\n\n\n\n\n\nFilter XPath\n\nFilters rows according to this Xpath. The rows will display if their Filter XPath return true.\n\n\nSort XPath\n\nSorts rows with respect to this XPath.\n\n\nOther\n\n\nAllow Moving XPath\n\nXpath to control item movement in list. Please use \"0\" to disable for always.\n\n\nAllow Move Up/Down XPath\n\nXpath to control vertical item movement in list. Please use \"0\" to disable for always. \n\n\nAllow New XPath\n\nXpath to control adding new items movement to list. Please use \"0\" to disable for always. \n\n\nAllow Delete XPath\n\nXpath to control deleting items movement from list. Please use \"0\" to disable for always.  \n\n\nAllow Delete All XPath\n\nXpath to control clear the list. Please use \"0\" to disable for always.   \n\n\nMonitored XPaths\n\nWill be updated.\n\n\nOther properties\n\n\n\n\nCut is used to move data table  content.\n\n\nCopy is used to copy data table content.\n\n\nDelete is used to delete data table content.\n\n\nXML is used to view or add xml of the data table content.\n\n\nConvert is used to change data table content to other content controls.\n\n\nAdd new is used to add the new columns in to table.", 
            "title": "Data Table"
        }, 
        {
            "location": "/ag/pm/fo/data_table/#rules", 
            "text": "Required for Group \nThis section is useful for giving a section a name to mark it as required when taking a specific action. When required for group section is filled for any element or section in the form, system doesn't let one to leave it empty and displays a warning. Setting a rule by clicking on any action on the process diagram and entering its name into the  validation group  field from the right side menu will require this section to be filled.  Section Name \nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in  task  properties.    Dynamic Rules \nDynamic rules section allows to specify format and warning messages of any element and section. Dynamic rules section consists of two parts, one of them is for formatting rules and the other one is for validation rules.    Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition. \nFurther information  here .    Validation rules, allow you to validate the data that is entered by the end-user. \nFurther information  here .", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/data_table/#data", 
            "text": "XPath to data model to be attached. If set to empty parent data element is used.  Bound XPath  \nXPath of the element. If set to empty, it uses parent xpath.   Row Id XPath \nGive a specific Id for each row by filling this box with an XPath.   Item XPath \nItems of a data table content change depending on this setting. Default is \" * \" which sets it to regard all items as in the same structure. If you want to use different contents for different items you should dictate it by specifying an XPath.   Hierarchy XPath \nIn a nested xml node structure, for example if your XML looks like the excerpt below, you may specify the starting node of the recurrence. In this example Hierarchy XPath is \"Folders\".  Folders \n     Folder \n         Name folder1 / Name \n     / Folder \n     Folder \n         Name folder2 / Name \n         Folders \n             Folder \n                 Name folder2a / Name \n             / Folder \n             Folder \n                 Name folder2b / Name \n             / Folder \n         / Folders \n     / Folder  / Folders   Filter XPath \nFilters rows according to this Xpath. The rows will display if their Filter XPath return true.  Sort XPath \nSorts rows with respect to this XPath.", 
            "title": "Data"
        }, 
        {
            "location": "/ag/pm/fo/data_table/#other", 
            "text": "Allow Moving XPath \nXpath to control item movement in list. Please use \"0\" to disable for always.  Allow Move Up/Down XPath \nXpath to control vertical item movement in list. Please use \"0\" to disable for always.   Allow New XPath \nXpath to control adding new items movement to list. Please use \"0\" to disable for always.   Allow Delete XPath \nXpath to control deleting items movement from list. Please use \"0\" to disable for always.    Allow Delete All XPath \nXpath to control clear the list. Please use \"0\" to disable for always.     Monitored XPaths \nWill be updated.  Other properties   Cut is used to move data table  content.  Copy is used to copy data table content.  Delete is used to delete data table content.  XML is used to view or add xml of the data table content.  Convert is used to change data table content to other content controls.  Add new is used to add the new columns in to table.", 
            "title": "Other"
        }, 
        {
            "location": "/ag/pm/fo/xsl_transform/", 
            "text": "XSL Transform control is used to format any XML data and to display it on the form. It has an editing screen which you can open by clicking the Edit button on the control's floating menu. The script written into that screen transforms the XML data and loads it into the given Target XPath.\n\n\nXSL is a styling language for XML. It is useful for transforming XML into other formats such as HTML.\n\n\nBound XPath\n\nXPath of the element. If set to empty, it uses parent xpath.\n\n\nTarget XPath\n\nSpecifies the xpath of target container node to display transformed xml", 
            "title": "XSL Transform"
        }, 
        {
            "location": "/ag/pm/fo/conditional_content/", 
            "text": "Control container that only show it's contents given condition is valid. This control is an alternative to dynamic \nrules\n.\n\n\nFor a conditional content you can configure the following:\n\n\nCondition\n\nXPath expression that specifies visibility condition. Example \" IsManager = 'Yes' \"\n\n\nSection Name\n\nName of section is for controlling read only or visible state of a section. If set to a value this section can be configured in \ntask\ntask properties.\n\n\nData\n\nXPath to data model to be attached. If set to empty parent data element is used.", 
            "title": "Conditional Content"
        }, 
        {
            "location": "/ag/pm/fo/rules/", 
            "text": "Dynamic Rules, allow you to change the styles of the controls and set validations. \n\n\nFormatting Rules\n\n\nFormatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition.\n\n\n\n\nRule Condition\n\nThis is the condition, that the formattings will apply when it's true.\n\n\nreturn $Xml.EvaluateBoolean(\nScore \n 10\n);\n\n\n\n\nFor this example, all formatting styles will apply when \"Score\" value is greater than 10.\n\n\nHidden\n\nIf chosen Yes, it will make control invisible. (when rule condition is true)\n\n\nDisabled\n\nIf chosen Yes, it will make control readonly. (when rule condition is true)\n\n\nBold\n\nIf chosen, it will make the text bold. (when rule condition is true)\n\n\nItalic\n\nIf chosen, it will make the text italic. (when rule condition is true)\n\n\nTextColor\n\nSets the color of the text that will be seen when rule condition is true.\n\n\nBackground Color\n\nSets the background color of the text that will be seen when rule condition is true.\n\n\nAvailable Objects\n\nwill be update.\n\n\nValidation Rules\n\n\nValidation rules, allow you to validate the data that is entered by the end-user. With this rule, you can notify the users if some conditions are not valid and the user is trying to take an \naction\n.\n\n\n\n\nValidation Group Name\n\nName of the validation group that attached to \naction\n. You can leave empty to execute validation always.\n\n\nError Message\n\nThe error message that will be shown to the user when rule is validated.\n\n\nRule Condition\n\nThe condition for the validation. If this condition is valid, the error message will be shown and form will not be validated.\n\n\nAvailable Objects\n\nwill be update.", 
            "title": "Rules"
        }, 
        {
            "location": "/ag/pm/fo/rules/#formatting-rules", 
            "text": "Formatting rules, allow you to change the formats (text color, background color, style) and visibility of a control depending upon a condition.   Rule Condition \nThis is the condition, that the formattings will apply when it's true.  return $Xml.EvaluateBoolean( Score   10 );  For this example, all formatting styles will apply when \"Score\" value is greater than 10.  Hidden \nIf chosen Yes, it will make control invisible. (when rule condition is true)  Disabled \nIf chosen Yes, it will make control readonly. (when rule condition is true)  Bold \nIf chosen, it will make the text bold. (when rule condition is true)  Italic \nIf chosen, it will make the text italic. (when rule condition is true)  TextColor \nSets the color of the text that will be seen when rule condition is true.  Background Color \nSets the background color of the text that will be seen when rule condition is true.  Available Objects \nwill be update.", 
            "title": "Formatting Rules"
        }, 
        {
            "location": "/ag/pm/fo/rules/#validation-rules", 
            "text": "Validation rules, allow you to validate the data that is entered by the end-user. With this rule, you can notify the users if some conditions are not valid and the user is trying to take an  action .   Validation Group Name \nName of the validation group that attached to  action . You can leave empty to execute validation always.  Error Message \nThe error message that will be shown to the user when rule is validated.  Rule Condition \nThe condition for the validation. If this condition is valid, the error message will be shown and form will not be validated.  Available Objects \nwill be update.", 
            "title": "Validation Rules"
        }, 
        {
            "location": "/ag/pm/fo/charts_design/", 
            "text": "Line Chart\n\n\ntbd\n\n\nPie Chart\n\n\ntbd", 
            "title": "Charts Design"
        }, 
        {
            "location": "/ag/pm/fo/charts_design/#line-chart", 
            "text": "tbd", 
            "title": "Line Chart"
        }, 
        {
            "location": "/ag/pm/fo/charts_design/#pie-chart", 
            "text": "tbd", 
            "title": "Pie Chart"
        }, 
        {
            "location": "/ag/pm/databases/", 
            "text": "In Workrunner you can store all kinds of relational or document based data including files. Depending on your needs you are free to choose which database to use. For example a process may store all customer information on relational database, store all quote documents in a file database and store order information on document database for further analysis.\n\n\nEach database type has own advantages or disadvantages depending on your needs.\n\n\nRelational Database\n\n\nProvides storage for large number of small entities. Database operations generally performed on small number of entities without affecting other entities. However, not that because of nature of relational database you need to specify schema of database.\n\n\nAdvantages\n\n\n\n\nStores large number of entities without any performance lost.\n\n\nEfficient at processing small changes to data that can be logged and rolled-back (undone) if required.\n\n\n\n\nDisadvantages\n\n\n\n\nYou have to specify database schema.\n\n\nDatabase schema must be identical for all entities.\n\n\nTechnical and engineering knowledge is required to manage.\n\n\n\n\nIn Workrunner databases are called as \"schema\" and contains relational structured tables. Each schema contains the \nname\n and __prefix_ properties. When you open a process design page and click on Databases, you will see a list of all relational database schemas tied to that process. If there is no schema yet you can simply click Import and add one of the existing schemas or click Add New Schema button to create a schema and its tables. All of the schema import, update and add operations are not executed until the process changes are committed.\n\n\nAdd New Schema\n\n\nIn order to add a new schema you have to enter a name and a prefix.\n\n\nClicking on \nEdit\n button unfolds a menu including:\n\n\nName\n\nName of schema, you can enter any name in to name field.\n\n\nPrefix\n\nEnter short name in to prefix field.\n\n\nClick \nDetails\n button to display all the tables of the schema and again click Details button of one of the tables listed: \n\n\nFields\n\n\nName\n\nEnter name of field. \n\n\nType\n\nLimited text, unlimited text, integer number, floating number, money, yes/no, date/time, unique identifier, xml and binary are listed. Select to type of field.\n\n\nSize\n\nSpecifies the length of field in numbers of character. Only applicable to limited text type.\n\n\nLanguages\n\nUnder this section multiple language names can be added. For each language added, a separate column is added to table with the name \"columnName_languageName\". In this way corresponding translation of the column data is being stored in a distinct column and it is fetched depending on the user's culture choice.\n\n\nGeneral\n\n\nPrimary Key\n\nId, code and name are listed. Select to primary key. \n\n\nAuthorize By\n\nAll the fields of unique identifier type from the table shows up in this section. Selecting one of them will restrict users to see only the row with selected field whose data is identical to their userId upon a select query.\n\n\nRelations\n\n\nClick on \nAdd New Relation\n button:\n\n\nName\n\nEnter a name for relation. It will be used later to call that relation. e.g. Word UserLogons is the relation name in usage Users.UserLogons\n\n\nType\n\n\nSelect relation type. Options are\n\n\n\n\nOne to many\n\n\nOne to one\n\n\nOne to one or zero\n\n\nMany to one\n\n\n\n\nUpdate Rule\n\nSelect update rule for related rows. With cascade rule, which is the only rule provided, when one of the records is updated or deleted, corresponding data on the other related table also gets updated or deleted.\n\n\nTarget Schema\n\nSelect a schema to create a relation to its table.\n\n\nTarget Table\n\nSelect a table from target schema to create a relation to.\n\n\nConstraints\n\n\n\n\nSource field\n : Select a field name from first table to relate from.\n\n\nTarget field\n : Select a field name for second table to relate to.\n\n\n\n\nInitial Data\n\nFor some purposes, for example testing, you can populate tables with initial data enterd in XML format. \n\n\nImport\n\n\nDisplays all existing schemas. Select the ones you want to include in your process and click Ok.\n\n\nXml Database\n\n\nProvides storage for small or large number of large size entities in a hierarchy. Database operations generally performed with reading or writing full on tree of entities.\n\n\nAdvantages\n\n\n\n\nIdeal for highly variable data structures, and even unstructured data.\n\n\nOptimized for extremely fast storage and retrieval of whole documents or objects.\n\n\n\n\nDisadvantages\n\n\n\n\nSlow performance when need to join other data out of entity tree.\n\n\n\n\nFile Database\n\n\nProvides a database to manage binary files. Each stored file is identified with globally unique identifier (Guid) at domain level.\n\n\nAdvantages\n\n\n\n\nEfficient for binary files.\n\n\nFull text indexing\n\n\n\n\nDisadvantages\n\n\n\n\nOnly accessible from file id\n\n\n\n\nFiles can be uploaded to database with \nFile\n control from user interface or can be created with scripting environment \n$Files\n object.\n\n\nAccessing to a File\n\n\nUnique file id can be use to build a URL address in \nhttp(s)://mydomain.workrunner.io/file/\nfileId\n format. This file url can be accessed with from anonymous environment.\n\n\n\n\nSecurity\n\n\nGenerated guid values already secured there is no additional security performed. But IP restriction can be also applied at domain level if required.\n\n\n\n\nAccessing to file by default shows the preview application if supported. If you want to just download please use the \nhttp(s)://mydomain.workrunner.io/attachment/\nfileId\n format to force.\n\n\nRevisioning\n\n\nIn Workrunner every file has own unique identifier and any update on file stored with new identifier and marked as \"revision\". When revision is completed new file content replaced with old file to keep id number same.\n\n\nUpdates from user interface is automatically handled but in scripting environment you may need to use \nFiles.Replace\n method to update revision.", 
            "title": "Databases"
        }, 
        {
            "location": "/ag/pm/databases/#relational-database", 
            "text": "Provides storage for large number of small entities. Database operations generally performed on small number of entities without affecting other entities. However, not that because of nature of relational database you need to specify schema of database.  Advantages   Stores large number of entities without any performance lost.  Efficient at processing small changes to data that can be logged and rolled-back (undone) if required.   Disadvantages   You have to specify database schema.  Database schema must be identical for all entities.  Technical and engineering knowledge is required to manage.   In Workrunner databases are called as \"schema\" and contains relational structured tables. Each schema contains the  name  and __prefix_ properties. When you open a process design page and click on Databases, you will see a list of all relational database schemas tied to that process. If there is no schema yet you can simply click Import and add one of the existing schemas or click Add New Schema button to create a schema and its tables. All of the schema import, update and add operations are not executed until the process changes are committed.", 
            "title": "Relational Database"
        }, 
        {
            "location": "/ag/pm/databases/#add-new-schema", 
            "text": "In order to add a new schema you have to enter a name and a prefix.  Clicking on  Edit  button unfolds a menu including:  Name \nName of schema, you can enter any name in to name field.  Prefix \nEnter short name in to prefix field.  Click  Details  button to display all the tables of the schema and again click Details button of one of the tables listed:", 
            "title": "Add New Schema"
        }, 
        {
            "location": "/ag/pm/databases/#fields", 
            "text": "Name \nEnter name of field.   Type \nLimited text, unlimited text, integer number, floating number, money, yes/no, date/time, unique identifier, xml and binary are listed. Select to type of field.  Size \nSpecifies the length of field in numbers of character. Only applicable to limited text type.  Languages \nUnder this section multiple language names can be added. For each language added, a separate column is added to table with the name \"columnName_languageName\". In this way corresponding translation of the column data is being stored in a distinct column and it is fetched depending on the user's culture choice.", 
            "title": "Fields"
        }, 
        {
            "location": "/ag/pm/databases/#general", 
            "text": "Primary Key \nId, code and name are listed. Select to primary key.   Authorize By \nAll the fields of unique identifier type from the table shows up in this section. Selecting one of them will restrict users to see only the row with selected field whose data is identical to their userId upon a select query.", 
            "title": "General"
        }, 
        {
            "location": "/ag/pm/databases/#relations", 
            "text": "Click on  Add New Relation  button:  Name \nEnter a name for relation. It will be used later to call that relation. e.g. Word UserLogons is the relation name in usage Users.UserLogons  Type  Select relation type. Options are   One to many  One to one  One to one or zero  Many to one   Update Rule \nSelect update rule for related rows. With cascade rule, which is the only rule provided, when one of the records is updated or deleted, corresponding data on the other related table also gets updated or deleted.  Target Schema \nSelect a schema to create a relation to its table.  Target Table \nSelect a table from target schema to create a relation to.  Constraints   Source field  : Select a field name from first table to relate from.  Target field  : Select a field name for second table to relate to.   Initial Data \nFor some purposes, for example testing, you can populate tables with initial data enterd in XML format.", 
            "title": "Relations"
        }, 
        {
            "location": "/ag/pm/databases/#import", 
            "text": "Displays all existing schemas. Select the ones you want to include in your process and click Ok.", 
            "title": "Import"
        }, 
        {
            "location": "/ag/pm/databases/#xml-database", 
            "text": "Provides storage for small or large number of large size entities in a hierarchy. Database operations generally performed with reading or writing full on tree of entities.  Advantages   Ideal for highly variable data structures, and even unstructured data.  Optimized for extremely fast storage and retrieval of whole documents or objects.   Disadvantages   Slow performance when need to join other data out of entity tree.", 
            "title": "Xml Database"
        }, 
        {
            "location": "/ag/pm/databases/#file-database", 
            "text": "Provides a database to manage binary files. Each stored file is identified with globally unique identifier (Guid) at domain level.  Advantages   Efficient for binary files.  Full text indexing   Disadvantages   Only accessible from file id   Files can be uploaded to database with  File  control from user interface or can be created with scripting environment  $Files  object.", 
            "title": "File Database"
        }, 
        {
            "location": "/ag/pm/databases/#accessing-to-a-file", 
            "text": "Unique file id can be use to build a URL address in  http(s)://mydomain.workrunner.io/file/ fileId  format. This file url can be accessed with from anonymous environment.   Security  Generated guid values already secured there is no additional security performed. But IP restriction can be also applied at domain level if required.   Accessing to file by default shows the preview application if supported. If you want to just download please use the  http(s)://mydomain.workrunner.io/attachment/ fileId  format to force.", 
            "title": "Accessing to a File"
        }, 
        {
            "location": "/ag/pm/databases/#revisioning", 
            "text": "In Workrunner every file has own unique identifier and any update on file stored with new identifier and marked as \"revision\". When revision is completed new file content replaced with old file to keep id number same.  Updates from user interface is automatically handled but in scripting environment you may need to use  Files.Replace  method to update revision.", 
            "title": "Revisioning"
        }, 
        {
            "location": "/ag/pm/localization/", 
            "text": "Localization feature allows to run your processes in other languages. In emakin every started workflow \ninstance\n has an culture identifier that specifies the language of workflow instance. It set from preference of initiator user when a instance started and cannot be changed later. \n\n\nInstance culture specifies the language of displayed labels in \nforms\n but it does not change cultural information like number formats or date formats. This kind of formatting respects to active user preferences.\n\n\nIn emakin designed process language is not important, you can use any language to design. After design is completed or an change is applied you can open the localization editor from process designer.\n\n\nAfter a localization editor is opened you can add any other languages with \"Add New\" button to localize process.\n\n\nEach added language have a 2 letter identifier of that language. List of language identifiers can be found at \nList of ISO 639-1 codes\n\n\nAfter a language is added, you can click \"Details\" button to edit localization texts. Emakin will scan your processes and list of texts to localize. Non localized texts will be marked as red if they're mandatory, if not original string will be used.\n\n\nAfter localization is completed, depending on active user language preference process will be displayed and run in localized language.\n\n\nAccessing from Scripting Environment\n\n\nIn some cases you may need access to localization texts in scripting environment. For example updating task instruction dynamically with localized equivalent.\n\n\nPlease see \n$Localization\n section for more details.", 
            "title": "Localization"
        }, 
        {
            "location": "/ag/pm/localization/#accessing-from-scripting-environment", 
            "text": "In some cases you may need access to localization texts in scripting environment. For example updating task instruction dynamically with localized equivalent.  Please see  $Localization  section for more details.", 
            "title": "Accessing from Scripting Environment"
        }, 
        {
            "location": "/ag/pm/namespaces/", 
            "text": "Workrunner supports the mostly used namespaces in XML standard. Namespaces list allows to import data models or assign prefix for used namespaces.\n\n\nWhat is namespace?\n\n\nXML namespaces are used for providing uniquely named elements and attributes in an XML document.\n\n\nA simple example would be to consider an XML instance that contained references to a customer and an ordered product. Both the customer element and the product element could have a child element named id. References to the id element would therefore be ambiguous; placing them in different namespaces would remove the ambiguity.\n\n\nProcess Namespace\n\n\nIn Workrunner after you define your data model, it's namespace is set to empty by default. Using empty namespace is not harmful but you may want to set an namespace to your data model if you need to exchange data with other external applications. \n\n\nAdding a new namespace with empty prefix will change your data model schema to new namespace and all of your data is now stored in declared namespace URI.\n\n\nImporting Namespaces\n\n\nIf you have an external system and need to use it's data types in your model; you can add it as a new namespace and provide XML Schema Location to load. If you specified a schema location Workrunner will be try to download schema and store in \"External Xml Schema Sets\" to use. If schema is not accessible from network you can manually add (with basic copy and paste) XSD file content to \"External Xml Schema Sets\".\n\n\nRegistered Namespaces\n\n\nWorkrunner provides couple of namespaces to make easier process development. \n\n\nWorkrunner Forms\n \nContains generic and basic data models. To import Workrunner forms namespace please use \nhttp://schemas.workrunner.io\n namepace and same location.\n\n\nAfter you import namespace you can use following data models:\n\n\nIdentity\n\nSpecifies an identity like \nOrganization Unit, Position, User or Group\n. Identity element contains id number of identity with Caption, Type, Domain attributes.\n\n\nWorkrunner form designer recognizes this data type proposes to use identity picker control.\n\n\nScripting with Namespaces\n\n\nYou can access data model elements as usual in process namespace even you define a namespace. For example following script will continue run as usual\n\n\nvar customers = $Xml.Select(\nCustomers/Customer\n);\n\n\n\n\nIf you need to access other namespaces you need merge prefix and element names with \n:\n format. For example you can access external elements with following script:\n\n\nvar orders = $Xml.Select(\nCustomers/Customer//ext:Order\n);", 
            "title": "Namespaces"
        }, 
        {
            "location": "/ag/pm/namespaces/#what-is-namespace", 
            "text": "XML namespaces are used for providing uniquely named elements and attributes in an XML document.  A simple example would be to consider an XML instance that contained references to a customer and an ordered product. Both the customer element and the product element could have a child element named id. References to the id element would therefore be ambiguous; placing them in different namespaces would remove the ambiguity.", 
            "title": "What is namespace?"
        }, 
        {
            "location": "/ag/pm/namespaces/#process-namespace", 
            "text": "In Workrunner after you define your data model, it's namespace is set to empty by default. Using empty namespace is not harmful but you may want to set an namespace to your data model if you need to exchange data with other external applications.   Adding a new namespace with empty prefix will change your data model schema to new namespace and all of your data is now stored in declared namespace URI.", 
            "title": "Process Namespace"
        }, 
        {
            "location": "/ag/pm/namespaces/#importing-namespaces", 
            "text": "If you have an external system and need to use it's data types in your model; you can add it as a new namespace and provide XML Schema Location to load. If you specified a schema location Workrunner will be try to download schema and store in \"External Xml Schema Sets\" to use. If schema is not accessible from network you can manually add (with basic copy and paste) XSD file content to \"External Xml Schema Sets\".", 
            "title": "Importing Namespaces"
        }, 
        {
            "location": "/ag/pm/namespaces/#registered-namespaces", 
            "text": "Workrunner provides couple of namespaces to make easier process development.   Workrunner Forms  \nContains generic and basic data models. To import Workrunner forms namespace please use  http://schemas.workrunner.io  namepace and same location.  After you import namespace you can use following data models:  Identity \nSpecifies an identity like  Organization Unit, Position, User or Group . Identity element contains id number of identity with Caption, Type, Domain attributes.  Workrunner form designer recognizes this data type proposes to use identity picker control.", 
            "title": "Registered Namespaces"
        }, 
        {
            "location": "/ag/pm/namespaces/#scripting-with-namespaces", 
            "text": "You can access data model elements as usual in process namespace even you define a namespace. For example following script will continue run as usual  var customers = $Xml.Select( Customers/Customer );  If you need to access other namespaces you need merge prefix and element names with  :  format. For example you can access external elements with following script:  var orders = $Xml.Select( Customers/Customer//ext:Order );", 
            "title": "Scripting with Namespaces"
        }, 
        {
            "location": "/ag/pm/screens/", 
            "text": "Screens provide user interfaces without starting a new process and used to build report designs or dashboards.\n\n\nYou can configure following properties for each screen:\n\n\nName\n\nName of screen. This field is used to identify screen.\n\n\nData Root\n\nRoot data element is to be used from \ndata model\n. Different screens may share same root element if needed.\n\n\nDisplay Order\n\nA number value is used for ordering within other screens. Higher values put screen to last.\n\n\nIs Dashboard?\n\nCheck this field to show this screen as a dashboard. Dashboards are automatically shown in folder views.\n\n\nIs Administrative ?\n\nCheck this field to show this screen to only process administrators. Administrative rights are set with editing process access control lists with Write or All permission.\n\n\nIs Anonymously Accessible ?\n\nCheck this option to allow anonymous (non-logged in) users. This option also requires anonymous access permission on domain preferences. \n\n\nForm Sections\n\n\nForm sections are used to control default states of screen contents.\n\n\nSection name list is generated from \"Section Name\" properties in content type controls.\n\n\nScreen design is made like a form design so click on \nhere\n for further information.\n\n\nYou can learn how to design a report using dashboard by watching this video:\n\n\n\n\n\nTake a look on how to design a report using dashboard.\n\n\n\n\nClick respectively HR, Processes and Edit,\n\n\nClick Data Model,\n\n\nDefine filter and result values for reports, then close Data Model.\n\n\nClick screen, enter name for the report that you want to generate and select your data root.\n\n\nPut a thick on \u201cis dashboard\u201d checkbox,\n\n\nEnter report,\n\n\nDesign your form and add xml database query content,\n\n\nEnter report,\n\n\nSet target and item xpaths for the xml database query,\n\n\nAdd xquery into the xml database query content which you just created,\n\n\nMap your filter xpath with xml database query content parameters. So you can filter results,\n\n\nSelect process repository, so the xquery can access the process repository data,\n\n\nFinally you can list your reports,\n\n\nIt is as simple as that!", 
            "title": "Screens"
        }, 
        {
            "location": "/ag/pm/screens/#form-sections", 
            "text": "Form sections are used to control default states of screen contents.  Section name list is generated from \"Section Name\" properties in content type controls.  Screen design is made like a form design so click on  here  for further information.  You can learn how to design a report using dashboard by watching this video:   Take a look on how to design a report using dashboard.   Click respectively HR, Processes and Edit,  Click Data Model,  Define filter and result values for reports, then close Data Model.  Click screen, enter name for the report that you want to generate and select your data root.  Put a thick on \u201cis dashboard\u201d checkbox,  Enter report,  Design your form and add xml database query content,  Enter report,  Set target and item xpaths for the xml database query,  Add xquery into the xml database query content which you just created,  Map your filter xpath with xml database query content parameters. So you can filter results,  Select process repository, so the xquery can access the process repository data,  Finally you can list your reports,  It is as simple as that!", 
            "title": "Form Sections"
        }, 
        {
            "location": "/ag/pm/sc/reference_toc/", 
            "text": "", 
            "title": "Reference TOC"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/", 
            "text": "Allows to push system generated activities on domain activity stream. It has the following\nmethods. \n\n\n$ActivityStream.Push\n\n\nstring\n \n$ActivityStream\n.\nPush\n \n(\n \nactivity\n \n)\n\n\n\n\n\nPushes a new activity and returns id number of activity.\n\n\nArguments\n\n\nObject \nactivity\n\n  Activity object. See remarks\n\n\nRemarks\n\n\nThis method creates a new activity on domain activity stream. Activity object consists on following properties.\n\n\nActivity Properties\n\n\nActor\n\nActor of activity that who is caused. If not specified displayed as \"System\".\n\n\nObject Id\n\nId of object that activity occurs on. Required.\n\n\nObject Type\n\nType of object. (e.g. customer, product) . Required.\n\n\nType\n\nType of activity. (e.g. create, update, comment) If not specified \"share\" term is used.\n\n\nPublished At\n\nDate of activity is occurs. If not specified current date is used.\n\n\nTargets\n\nArray of targets that activity displayed to or exclusively notified.Targets can be specified as generic types or specific identity. If not specified \"Everyone\" is used.\n\n\nContent\n\nDescriptive text of activity. \n\n\nAttachment\n\nArray of attachments like files, links. \n\n\nExamples\n\n\nCreating a basic activity for everyone.\n\n\n$ActivityStream.Post({\n    objectId : $Xml.Evaluate(\nId\n)\n    objectType : \ncustomer\n,\n    content: \nCustomer \n + $Xml.Evaluate(\nName\n) + \n is updated.\n\n});\n\n\n\n\nCreating a activity to display only to administrators.\n\n\n$ActivityStream.Post({\n    objectId : $Xml.Evaluate(\nId\n)\n    objectType : \ncustomer\n,\n    content: \nCustomer is updated.\n,\n    targets: [ $Membership.Administrator ]\n});\n\n\n\n\nCreate a new activity to display only to administrators and accounting with exclusively notify the accounting.\n\n\n$ActivityStream.Post({\n    objectId : $Xml.Evaluate(\nId\n)\n    objectType : \ncustomer\n,\n    content: \nCustomer is updated.\n,   \n    targets: [ { targetId: $Membership.Administrator }, { targetId : $Membership.FindIdentity(\nAccounting\n), notify: true } ]\n});\n\n\n\n\nCreate a new activity with file attachment.\n\n\n$ActivityStream.Post({\n    objectId : $Xml.Evaluate(\nId\n)\n    objectType : \ncustomer\n,\n    content: \nCustomer is updated.\n,   \n    targets: [ { targetId: $Membership.Administrator } ],\n    attachment: [ $Xml.Evaluate(\nBillFileId\n) ]\n});", 
            "title": "$ActivityStream"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/#activitystreampush", 
            "text": "string   $ActivityStream . Push   (   activity   )   Pushes a new activity and returns id number of activity.", 
            "title": "$ActivityStream.Push"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/#arguments", 
            "text": "Object  activity \n  Activity object. See remarks", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/#remarks", 
            "text": "This method creates a new activity on domain activity stream. Activity object consists on following properties.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/#activity-properties", 
            "text": "Actor \nActor of activity that who is caused. If not specified displayed as \"System\".  Object Id \nId of object that activity occurs on. Required.  Object Type \nType of object. (e.g. customer, product) . Required.  Type \nType of activity. (e.g. create, update, comment) If not specified \"share\" term is used.  Published At \nDate of activity is occurs. If not specified current date is used.  Targets \nArray of targets that activity displayed to or exclusively notified.Targets can be specified as generic types or specific identity. If not specified \"Everyone\" is used.  Content \nDescriptive text of activity.   Attachment \nArray of attachments like files, links.", 
            "title": "Activity Properties"
        }, 
        {
            "location": "/ag/pm/sc/activitystream/#examples", 
            "text": "Creating a basic activity for everyone.  $ActivityStream.Post({\n    objectId : $Xml.Evaluate( Id )\n    objectType :  customer ,\n    content:  Customer   + $Xml.Evaluate( Name ) +   is updated. \n});  Creating a activity to display only to administrators.  $ActivityStream.Post({\n    objectId : $Xml.Evaluate( Id )\n    objectType :  customer ,\n    content:  Customer is updated. ,\n    targets: [ $Membership.Administrator ]\n});  Create a new activity to display only to administrators and accounting with exclusively notify the accounting.  $ActivityStream.Post({\n    objectId : $Xml.Evaluate( Id )\n    objectType :  customer ,\n    content:  Customer is updated. ,   \n    targets: [ { targetId: $Membership.Administrator }, { targetId : $Membership.FindIdentity( Accounting ), notify: true } ]\n});  Create a new activity with file attachment.  $ActivityStream.Post({\n    objectId : $Xml.Evaluate( Id )\n    objectType :  customer ,\n    content:  Customer is updated. ,   \n    targets: [ { targetId: $Membership.Administrator } ],\n    attachment: [ $Xml.Evaluate( BillFileId ) ]\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/", 
            "text": "Overview\n\n\nobject\n \n$Cache\n.\nGet\n \n(\n \nkey\n \n)\n\n\n\n\n\nReturns cached value if found.\n\n\nArguments\n\n\nString \nkey\n\n     Key of value\n\n\nReturn Value\n\n\nReturns value if found, otherwise null.\n\n\nRemarks\n\n\n\n\nKey name can be separated with \":\" qualifier if required.\n\n\n\n\nExamples\n\n\nvar id = 1;\nvar myObject = $Cache.Get(\nmyObject:\n + id);\n\n\n\n\nSee Also", 
            "title": "$Cache.Get"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#overview", 
            "text": "object   $Cache . Get   (   key   )   Returns cached value if found.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#arguments", 
            "text": "String  key \n     Key of value", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#return-value", 
            "text": "Returns value if found, otherwise null.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#remarks", 
            "text": "Key name can be separated with \":\" qualifier if required.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#examples", 
            "text": "var id = 1;\nvar myObject = $Cache.Get( myObject:  + id);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/cache.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/", 
            "text": "Overview\n\n\nvoid\n \n$Cache\n.\nSet\n \n(\n \nkey\n,\n \nvalue\n,\n \n[\nduration\n]\n \n)\n\n\n\n\n\nStores a object in cache.\n\n\nArguments\n\n\nString \nkey\n\n     Key of value\n\n\nObject \nvalue\n\n     Value to be stored.\n\n\nString__ Duration__\n     Expiration duration. Optional.\n\n\nRemarks\n\n\n\n\nIf duration is not specified, object is stored as indefinitely until cache is cleared.\n\n\nDuration can be specified in \"day.hh\nss\" format.\n\n\nSpecifying value as null removes object from cache.\n\n\n\n\nExamples\n\n\nvar id = 1;\n$Cache.Set(\nmyObject:\n + id, {\n    Name : \nMaddonna\n\n}, \n12:00:00\n);\n\n\n\n\nSee Also", 
            "title": "$Cache.Set"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/#overview", 
            "text": "void   $Cache . Set   (   key ,   value ,   [ duration ]   )   Stores a object in cache.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/#arguments", 
            "text": "String  key \n     Key of value  Object  value \n     Value to be stored.  String__ Duration__\n     Expiration duration. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/#remarks", 
            "text": "If duration is not specified, object is stored as indefinitely until cache is cleared.  Duration can be specified in \"day.hh ss\" format.  Specifying value as null removes object from cache.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/#examples", 
            "text": "var id = 1;\n$Cache.Set( myObject:  + id, {\n    Name :  Maddonna \n},  12:00:00 );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/cache.set/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar/", 
            "text": "Performs date based operations like adding or calculating differences by rules.\n\n\nDefault calendar instance exposed as \n$Calendar\n variable that executed by domain rules. Default domain rules are includes Monday to Friday and 9:00 AM - 18:00 PM hours. All date calculations performed within this included time range.\n\n\nAlso you can use \nCalendar.GetStandardCalendar\n to use a calendar with no rules or \nCalendar.GetWeekendCalendar\n to include only Monday to Friday days without no hour limitation.", 
            "title": "$Calendar"
        }, 
        {
            "location": "/ag/pm/sc/database/", 
            "text": "Allows to perform relational database operations.\n\n\nYou can use \n$Database.Get\n method to perform query on existing records, make changes on returned \nDataTable\n instance and persist all changes with \nDataTable.Save\n method.\n\n\nIf you need to just insert new values you can use the \n$Database.Empty\n method to create a empty \nDataTable\n to add new rows.\n\n\nThis class also provides \nDatabase.ImportFromXml][5] and [\nDatabase.ImportFromXml][5] and [\nDatabase.ExportToXml\n methods to map database to \nData Model\n (Xml) for allow user to make changes interactive.", 
            "title": "$Database Methods"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/", 
            "text": "Overview\n\n\nobject\n \n$Database\n.\nAddData\n \n(\n \n[\ndataStore\n],\n \nschema\n,\n \ntable\n,\n \ncolumn\n,\n \nvalue\n \n)\n\n\n\n\n\nAppends a new row on specified target table and returns inserted row as object.\n\n\nArguments\n\n\nString \ndataStore\n\nName or Id number of target data store. This parameter is optional. \n\n\nString \nschema\n\nName of target schema\n\n\nString table\nName of target table\n\n\nObject \ninput\n\nInput javascript object.\n\n\nRemarks\n\n\nExamples\n\n\n$Database.AddData(\nMySchema\n,\nMyTable\n, {\n    Id : $Xml.Evaluate(\nId\n),\n    Name : $Xml.Evaluate(\nName\n),\n    State : \nW\n\n});\n\n\n\n\nSee Also", 
            "title": "$Database.AddData"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/#overview", 
            "text": "object   $Database . AddData   (   [ dataStore ],   schema ,   table ,   column ,   value   )   Appends a new row on specified target table and returns inserted row as object.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/#arguments", 
            "text": "String  dataStore \nName or Id number of target data store. This parameter is optional.   String  schema \nName of target schema  String table\nName of target table  Object  input \nInput javascript object.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/#examples", 
            "text": "$Database.AddData( MySchema , MyTable , {\n    Id : $Xml.Evaluate( Id ),\n    Name : $Xml.Evaluate( Name ),\n    State :  W \n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.adddata/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/", 
            "text": "Overview\n\n\nint\n \n$Database\n.\nDeleteData\n \n(\n \n[\ndataStore\n],\n \nschema\n,\n \ntable\n,\n \ncolumn\n,\n \nvalue\n \n)\n\n\n\n\n\nRemoves all rows on specified table by using column and value as single criteria and returns deleted number of rows.\n\n\nArguments\n\n\nString \ndataStore\n\nName or Id number of target data store. This parameter is optional. \n\n\nString \nschema\n\nName of target schema\n\n\nString \ntable\n\nName of target table\n\n\nString \ncolumn\n\nName of column to use as criteria\n\n\nObject \nvalue\n\nValue of column to use as criteria\n\n\nRemarks\n\n\nExamples\n\n\n$Database.DeleteData(\nMySchema\n, \nMyTable\n, \nId\n, $Xml.Evaluate(\nId\n));\n\n\n\n\nSee Also", 
            "title": "$Database.DeleteData"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/#overview", 
            "text": "int   $Database . DeleteData   (   [ dataStore ],   schema ,   table ,   column ,   value   )   Removes all rows on specified table by using column and value as single criteria and returns deleted number of rows.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/#arguments", 
            "text": "String  dataStore \nName or Id number of target data store. This parameter is optional.   String  schema \nName of target schema  String  table \nName of target table  String  column \nName of column to use as criteria  Object  value \nValue of column to use as criteria", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/#examples", 
            "text": "$Database.DeleteData( MySchema ,  MyTable ,  Id , $Xml.Evaluate( Id ));", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.deletedata/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/", 
            "text": "Overview\n\n\nDataTable\n \n$Database\n.\nEmpty\n \n(\n \noptions\n \n)\n\n\n\n\n\nReturns an empty \ndata table\n  for importing data on target table. \n\n\nArguments\n\n\nobject \noptions\n\nSpecifies the options of get operation.\n     String \nTargetSchema\n\n       Specifies the name of target schema.\n\n\n String __TargetTable__\n   Specifies the name of target table.\n\n\n\n\n\nRemarks\n\n\nExamples\n\n\nGet Empty Data Table\n\n\nvar myTable = $Database.Empty({\n  TargetSchema: \nHR\n,\n  TargetTable: \nGroups\n\n});\n\n\n\n\nSee Also", 
            "title": "$Database.Empty"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/#overview", 
            "text": "DataTable   $Database . Empty   (   options   )   Returns an empty  data table   for importing data on target table.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/#arguments", 
            "text": "object  options \nSpecifies the options of get operation.\n     String  TargetSchema \n       Specifies the name of target schema.   String __TargetTable__\n   Specifies the name of target table.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/#examples", 
            "text": "Get Empty Data Table  var myTable = $Database.Empty({\n  TargetSchema:  HR ,\n  TargetTable:  Groups \n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.empty/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/", 
            "text": "Overview\n\n\nObject\n \n$Database\n.\nEnsureData\n \n(\n \n[\ndataStore\n],\n \nschema\n,\n \ntable\n,\n \ncolumn\n,\n \nvalue\n,\n \ninput\n,\n \ninitInput\n \n)\n\n\n\n\n\nInserts or updates a row in table by specified column and value as single criteria.\n\n\nArguments\n\n\nString dataStore\n  Name or Id number of target data store. This parameter is optional.\n\n\nString \ndataStore\n\n  Name or Id number of target data store. This parameter is optional. \n\n\nString \nschema\n\n  Name of target schema\n\n\nString \ntable\n\n  Name of target table\n\n\nString \ncolumn\n\n  Name of column to use as criteria\n\n\nObject \nvalue\n\n  Value of column to use as criteria\n\n\nObject \ninput\n\n  Object or function for column values for updating.\n\n\nObject \ninputInit\n\n  Object or function for initialize for new rows. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n$Database.EnsureData(\nMySchema\n, \nMyTable\n, \nId\n, id, {\n    Name : $Xml.Evaluate(\nName\n)   \n}, {   \n    IsNew : true\n});\n\n\n\n\nSee Also", 
            "title": "$Database.EnsureData"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/#overview", 
            "text": "Object   $Database . EnsureData   (   [ dataStore ],   schema ,   table ,   column ,   value ,   input ,   initInput   )   Inserts or updates a row in table by specified column and value as single criteria.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/#arguments", 
            "text": "String dataStore\n  Name or Id number of target data store. This parameter is optional.  String  dataStore \n  Name or Id number of target data store. This parameter is optional.   String  schema \n  Name of target schema  String  table \n  Name of target table  String  column \n  Name of column to use as criteria  Object  value \n  Value of column to use as criteria  Object  input \n  Object or function for column values for updating.  Object  inputInit \n  Object or function for initialize for new rows. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/#examples", 
            "text": "$Database.EnsureData( MySchema ,  MyTable ,  Id , id, {\n    Name : $Xml.Evaluate( Name )   \n}, {   \n    IsNew : true\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.ensuredata/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/", 
            "text": "Overview\n\n\nDataTable\n \n$Database\n.\nExportToXml\n \n(\n \noptions\n \n)\n\n\n\n\n\nExports the data table content to xml data. For each row in data table a new xml child created on specified xpath.\n\n\nArguments\n\n\nObject \noptions\n\n  Exporting options. Options contains following properties:\n\n\nString \nXPath\n\n  Specifies the target xpath to export data on.\n\n\nXmlNode \nNode\n\n  Specifies the root xml node. This property is optional and if omitted uses the $Xml instance.\n\n\nString \nTargetSchema\n\n  Name of schema to execute query on.\n\n\nString \nTargetTable\n\n  Name of table to execute query on.\n\n\nBoolean \nIncludeAllColumns\n\n  Set to \"True\" to returns all columns on table. Optional, please see remarks.\n\n\nFunction \nMap\n\n  Mapping callback function is used to change row values on the fly. This property is optional.\n\n\nRemarks\n\n\nWhen IncludeAllColumns parameter is not specified, default behavior is query returns only explicitly specified columns. If not any column specified query returns the all defined columns on table.\n\n\nExamples\n\n\nExporting database content into XML\n\n\n// For following xml structure\n// \nRoot\n\n//    \nGroups\n/\nGroups\n\n// \n/\nRoot\n\n\n\n$Database.ExportToXml({\n  Parameters : {\n        TargetSchema: \nHR\n,\n        TargetTable: \nGroups\n\n    }\n  },\n  XPath : \nGroups/Group\n\n});\n\n\n// Xml updated as;\n// \nRoot\n\n//    \nGroup\n\n//        \nName\nDevelopers (Junior)\n/\nName\n\n//    \n/\nGroup\n\n// \n/\nRoot\n\n\n\n\n\nExporting with sub queries\n\n\n$Database.ExportToXml({\n   Parameters : {\n   TargetSchema : \nContract\n,\n   TargetTable : \nEvents\n\n },\n Where : {\n   Criteria : [\n     { Name : \nReminderDate\n, Value : $Calendar.Today, Comparison : \nLessThan\n },\n     { Name : \nDurum\n, Value : \nIPT\n, Comparison : \nDifferent\n },\n     { Name : \nType\n, Value : \nR\n },\n     { Name : \nStatus\n, Value : \nW\n }     \n   ]\n },\n SubQueries : [\n   {\n     Name : \nContract\n,\n     Parameters : {\n       IncludeAllColumns : \nTrue\n\n     },\n     SubQueries : [\n       {\n         Name : \nParty\n\n       },\n       {\n         Name : \nVersions\n\n       },\n       {\n         Name : \nEvents\n\n       }\n     ]     \n   }\n ],\n   XPath : \nContractEvent\n\n });\n\n\n\n\nExporting with XML mappings\n;\n\n\n$Database.ExportToXml({\n Parameters : {\n   TargetSchema: \nHR\n,\n   TargetTable: \nOrganizationUnitPositionMembers\n,\n   IncludeAllColumns: \nTrue\n\n },\n Columns : [\n   {\n     Name : \nEmployee\n,\n     Properties : {\n       XPath : \nId\n\n     }\n   },\n   {\n     Name : \nEmployee.Person.DisplayName\n,\n     Properties : {\n       XPath : \nName\n\n     }\n   },   \n   {\n     Name : \nOrganizationUnitPosition.Organization\n,\n     Properties : {\n       XPath : \nDepartment\n\n     }\n   },\n   {\n     Name : \nOrganizationUnitPosition.Organization.Name\n,\n     Properties : {\n       XPath : \nDepartment/@Name\n\n     }\n      }\n ],\n Where : {\n       Criteria: [\n         { Name: \nOrganizationUnitPosition.Manager\n, Value:\nD7B70176-C44D-44BB-A8C0-7900BC5DAF2A\n, Condition : \nAnd\n},\n         { Name: \nEmployee.User.Disabled\n, Value: true, Comparison:\nDifferent\n, Condition : \nAnd\n}\n       ]\n },\n XPath : \nEmployeeList/Employee\n\n });\n\n\n\n\nSee Also", 
            "title": "$Database.ExportToXml"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/#overview", 
            "text": "DataTable   $Database . ExportToXml   (   options   )   Exports the data table content to xml data. For each row in data table a new xml child created on specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/#arguments", 
            "text": "Object  options \n  Exporting options. Options contains following properties:  String  XPath \n  Specifies the target xpath to export data on.  XmlNode  Node \n  Specifies the root xml node. This property is optional and if omitted uses the $Xml instance.  String  TargetSchema \n  Name of schema to execute query on.  String  TargetTable \n  Name of table to execute query on.  Boolean  IncludeAllColumns \n  Set to \"True\" to returns all columns on table. Optional, please see remarks.  Function  Map \n  Mapping callback function is used to change row values on the fly. This property is optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/#remarks", 
            "text": "When IncludeAllColumns parameter is not specified, default behavior is query returns only explicitly specified columns. If not any column specified query returns the all defined columns on table.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/#examples", 
            "text": "Exporting database content into XML  // For following xml structure\n//  Root \n//     Groups / Groups \n//  / Root \n\n\n$Database.ExportToXml({\n  Parameters : {\n        TargetSchema:  HR ,\n        TargetTable:  Groups \n    }\n  },\n  XPath :  Groups/Group \n});\n\n\n// Xml updated as;\n//  Root \n//     Group \n//         Name Developers (Junior) / Name \n//     / Group \n//  / Root   Exporting with sub queries  $Database.ExportToXml({\n   Parameters : {\n   TargetSchema :  Contract ,\n   TargetTable :  Events \n },\n Where : {\n   Criteria : [\n     { Name :  ReminderDate , Value : $Calendar.Today, Comparison :  LessThan  },\n     { Name :  Durum , Value :  IPT , Comparison :  Different  },\n     { Name :  Type , Value :  R  },\n     { Name :  Status , Value :  W  }     \n   ]\n },\n SubQueries : [\n   {\n     Name :  Contract ,\n     Parameters : {\n       IncludeAllColumns :  True \n     },\n     SubQueries : [\n       {\n         Name :  Party \n       },\n       {\n         Name :  Versions \n       },\n       {\n         Name :  Events \n       }\n     ]     \n   }\n ],\n   XPath :  ContractEvent \n });  Exporting with XML mappings ;  $Database.ExportToXml({\n Parameters : {\n   TargetSchema:  HR ,\n   TargetTable:  OrganizationUnitPositionMembers ,\n   IncludeAllColumns:  True \n },\n Columns : [\n   {\n     Name :  Employee ,\n     Properties : {\n       XPath :  Id \n     }\n   },\n   {\n     Name :  Employee.Person.DisplayName ,\n     Properties : {\n       XPath :  Name \n     }\n   },   \n   {\n     Name :  OrganizationUnitPosition.Organization ,\n     Properties : {\n       XPath :  Department \n     }\n   },\n   {\n     Name :  OrganizationUnitPosition.Organization.Name ,\n     Properties : {\n       XPath :  Department/@Name \n     }\n      }\n ],\n Where : {\n       Criteria: [\n         { Name:  OrganizationUnitPosition.Manager , Value: D7B70176-C44D-44BB-A8C0-7900BC5DAF2A , Condition :  And },\n         { Name:  Employee.User.Disabled , Value: true, Comparison: Different , Condition :  And }\n       ]\n },\n XPath :  EmployeeList/Employee \n });", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.exporttoxml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.get/", 
            "text": "Overview\n\n\nDataTable\n \n$Database\n.\nGet\n \n(\n \noptions\n \n)\n\n\n\n\n\nxecutes the specified query and returns results as a \ndata table\n  instance.\n\n\nArguments\n\n\nObject \noptions\n\n Specifies the query options.\n\n\nRemarks\n\n\nFormula\n\n\nFormula specifies the method of evaluation of row values. Formula enumeration can be one of following values;\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNone\n\n\nNo aggregation is applied. All values in rows.\n\n\n\n\n\n\nCount\n\n\nCount of row values.\n\n\n\n\n\n\nCountDistinct\n\n\nCount of distinct values in rows.\n\n\n\n\n\n\nSum\n\n\nSum of row values. Valid for numeric type columns.\n\n\n\n\n\n\nSumDistinct\n\n\nSum of distinct values in rows. Valid for numeric type columns.\n\n\n\n\n\n\nAvg\n\n\nAverage of row values. Valid for numeric type columns.\n\n\n\n\n\n\nAvgDistinct\n\n\nAverage of distinct values in rows. Valid for numeric type columns.\n\n\n\n\n\n\nMin\n\n\nMinimum value in rows.\n\n\n\n\n\n\nMax\n\n\nMaximum value in row values.\n\n\n\n\n\n\n\n\nComparison\n\n\nSpecifies the comparison method of criteria value.\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEquals\n\n\nAll rows with same value.\n\n\n\n\n\n\nLessThan\n\n\nAll rows that less than criteria value.\n\n\n\n\n\n\nLessThanOrEqualTo\n\n\nAll rows that less or equals to criteria value.\n\n\n\n\n\n\nGreaterThan\n\n\nAll rows that greater than criteria value.\n\n\n\n\n\n\nGreaterThanOrEqualTo\n\n\nAll rows that greater or equals to criteria value.\n\n\n\n\n\n\nDifferent\n\n\nAll rows with different than criteria value.\n\n\n\n\n\n\nLike\n\n\nAll rows that likes to criteria value. Criteria value can be used with * (star character) Like \nABC, ABC\n, \nABC\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic Query\n;\n\n\nvar myTable = $Database.Get({\n   Parameters : {\n     TargetSchema: \nHR\n,\n     TargetTable: \nGroups\n\n   },\n   Where: {\n     Criteria: [\n       {\n         name: \nName\n,\n         value: \nAdministrators\n\n       }\n     ]\n   }, \n    Order : [\n       { Name : \nOrder\n, Type : \nAscending\n }\n   ]\n });\n\n\n\n\nIn the example below we queried the Makers table. The result is ordered in descending order and there is only one row because we set the \nStart\n parameter to 0 and \nMaxLength\n to 1.\n\n\nBasic Query\n;\n\n\nvar myTable = $Database.Get({\n   Parameters: {\n       TargetSchema: \nENotification\n,\n       TargetTable: \nMakers\n\n   },\n   Columns: [\n       { Name : \nOrder\n}\n   ],\n   Start : 0,\n   MaxLength : 1,\n   Where : {\n       Criteria: [\n           { Name: \nIsActive\n, Value: true },\n           { Name : \nDurum\n, Value : \nIPT\n, Comparison : \nDifferent\n }\n       ]\n   },\n   Order : [\n       { Name : \nOrder\n, Type : \nDescending\n }\n   ]\n});\n\n\n\n\nFor example if you need a more complex query, containing multiple AND/OR conditions like \"(X OR Y OR Z) AND W\", you can use \nBlocks\n option. Check the code sample below.\n\n\nAdvanced Query\n;\n\n\nvar myTable = $Database.Get({\n    Parameters: {\n        TargetSchema: \nHR\n,\n        TargetTable: \nUserLogons\n\n    },\n    Where: {\n        Blocks: [{\n            Condition: \nAnd\n,\n            Criteria: [{\n                name: \nUser.EMailAddress\n,\n                value: \n...\n,\n                Condition: \nOr\n\n            }, {\n                name: \nUser.EMailAddress\n,\n                value: \n...\n,\n                Condition: \nOr\n\n            }, {\n                name: \nUser.EMailAddress\n,\n                value: \n...\n\n            }, ]\n        }],\n        Criteria: [{\n            name: \nUser.Disabled\n,\n            value: \ntrue\n,\n            Condition: \nAnd\n,\n            Comparison: \nDifferent\n\n        }]\n    }\n});\n\n\n\n\nQuery with Formulas\n;\n\n\nvar daysGained = $Database.Get({\n    Parameters: {\n        TargetSchema: \nHR\n,\n        TargetTable: \nLeaveAllowance\n\n    },\n    Columns: [{\n        Name: \nDaysGained\n,\n        Formula: \nSum\n\n    }],\n    Start: 0,\n    MaxLength: 1,\n    Where: {\n        Criteria: [{\n            Name: \nEmployee\n,\n            Value: $Initiator.Id\n        }]\n    }\n});\n$Xml.SetValue(\nGeneralInfo/EarnedDays\n, daysGained.Rows()[0][\nDaysGained\n]);\n\n\n\n\nSee Also\n\n\n\n\nData table", 
            "title": "$Database.Get"
        }, 
        {
            "location": "/ag/pm/sc/database.get/#overview", 
            "text": "DataTable   $Database . Get   (   options   )   xecutes the specified query and returns results as a  data table   instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.get/#arguments", 
            "text": "Object  options \n Specifies the query options.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.get/#remarks", 
            "text": "Formula  Formula specifies the method of evaluation of row values. Formula enumeration can be one of following values;     Value  Description      None  No aggregation is applied. All values in rows.    Count  Count of row values.    CountDistinct  Count of distinct values in rows.    Sum  Sum of row values. Valid for numeric type columns.    SumDistinct  Sum of distinct values in rows. Valid for numeric type columns.    Avg  Average of row values. Valid for numeric type columns.    AvgDistinct  Average of distinct values in rows. Valid for numeric type columns.    Min  Minimum value in rows.    Max  Maximum value in row values.     Comparison  Specifies the comparison method of criteria value.     Value  Description      Equals  All rows with same value.    LessThan  All rows that less than criteria value.    LessThanOrEqualTo  All rows that less or equals to criteria value.    GreaterThan  All rows that greater than criteria value.    GreaterThanOrEqualTo  All rows that greater or equals to criteria value.    Different  All rows with different than criteria value.    Like  All rows that likes to criteria value. Criteria value can be used with * (star character) Like  ABC, ABC ,  ABC", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.get/#examples", 
            "text": "Basic Query ;  var myTable = $Database.Get({\n   Parameters : {\n     TargetSchema:  HR ,\n     TargetTable:  Groups \n   },\n   Where: {\n     Criteria: [\n       {\n         name:  Name ,\n         value:  Administrators \n       }\n     ]\n   }, \n    Order : [\n       { Name :  Order , Type :  Ascending  }\n   ]\n });  In the example below we queried the Makers table. The result is ordered in descending order and there is only one row because we set the  Start  parameter to 0 and  MaxLength  to 1.  Basic Query ;  var myTable = $Database.Get({\n   Parameters: {\n       TargetSchema:  ENotification ,\n       TargetTable:  Makers \n   },\n   Columns: [\n       { Name :  Order }\n   ],\n   Start : 0,\n   MaxLength : 1,\n   Where : {\n       Criteria: [\n           { Name:  IsActive , Value: true },\n           { Name :  Durum , Value :  IPT , Comparison :  Different  }\n       ]\n   },\n   Order : [\n       { Name :  Order , Type :  Descending  }\n   ]\n});  For example if you need a more complex query, containing multiple AND/OR conditions like \"(X OR Y OR Z) AND W\", you can use  Blocks  option. Check the code sample below.  Advanced Query ;  var myTable = $Database.Get({\n    Parameters: {\n        TargetSchema:  HR ,\n        TargetTable:  UserLogons \n    },\n    Where: {\n        Blocks: [{\n            Condition:  And ,\n            Criteria: [{\n                name:  User.EMailAddress ,\n                value:  ... ,\n                Condition:  Or \n            }, {\n                name:  User.EMailAddress ,\n                value:  ... ,\n                Condition:  Or \n            }, {\n                name:  User.EMailAddress ,\n                value:  ... \n            }, ]\n        }],\n        Criteria: [{\n            name:  User.Disabled ,\n            value:  true ,\n            Condition:  And ,\n            Comparison:  Different \n        }]\n    }\n});  Query with Formulas ;  var daysGained = $Database.Get({\n    Parameters: {\n        TargetSchema:  HR ,\n        TargetTable:  LeaveAllowance \n    },\n    Columns: [{\n        Name:  DaysGained ,\n        Formula:  Sum \n    }],\n    Start: 0,\n    MaxLength: 1,\n    Where: {\n        Criteria: [{\n            Name:  Employee ,\n            Value: $Initiator.Id\n        }]\n    }\n});\n$Xml.SetValue( GeneralInfo/EarnedDays , daysGained.Rows()[0][ DaysGained ]);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.get/#see-also", 
            "text": "Data table", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/", 
            "text": "Overview\n\n\nDataTable\n \n$Database\n.\nGetData\n \n(\n \n[\ndataStore\n],\n \nschema\n,\n \ntable\n,\n \ncolumn\n,\n \nvalue\n \n)\n\n\n\n\n\nExecutes query by specified column and value as single criteria and returns resulting data table instance.\n\n\nArguments\n\n\nString \ndataStore\n\n  Name or Id number of target data store. This parameter is optional.\n\n\nString \nschema\n\n  Name of target schema\n\n\nString \ntable\n\n  Name of target table\n\n\nString \ncolumn\n\n  Name of column to use as criteria\n\n\nObject \nvalue\n\n  Value of column to use as criteria\n\n\nRemarks\n\n\nExamples\n\n\nvar table = $Database.GetData(\nMySchema\n, \nMyTable\n, \nId\n, $Xml.Evaluate(\nId\n));\n\n\n\n\nSee Also", 
            "title": "$Database.GetData"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/#overview", 
            "text": "DataTable   $Database . GetData   (   [ dataStore ],   schema ,   table ,   column ,   value   )   Executes query by specified column and value as single criteria and returns resulting data table instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/#arguments", 
            "text": "String  dataStore \n  Name or Id number of target data store. This parameter is optional.  String  schema \n  Name of target schema  String  table \n  Name of target table  String  column \n  Name of column to use as criteria  Object  value \n  Value of column to use as criteria", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/#examples", 
            "text": "var table = $Database.GetData( MySchema ,  MyTable ,  Id , $Xml.Evaluate( Id ));", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.getdata/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/database.importfromxml/", 
            "text": "Overview\n\n\nDataTable\n \n$Database\n.\nImportFromXml\n \n(\n \noptions\n \n)\n\n\n\n\n\nImports xml data to specified table. Please see \n$Datatable.ImportFromXml\n for more details.\n\n\nRemarks\n\n\nThis method is a wrapper method for \n$Datatable.ImportFromXml\n and \nDataTable.Save\n\n\nExamples\n\n\nCommon use case for importing data\n;\n\n\n// For following xml structure\n// \nRoot\n\n//    \nGroup\n\n//        \nName\nDevelopers (Junior)\n/\nName\n\n//    \n/\nGroup\n\n// \n/\nRoot\n\n\n\n $Database.ImportFromXml({\n     Parameters : {\n         TargetSchema: \nHR\n,\n         TargetTable: \nGroups\n,\n     },\n     XPath : \nGroups/Group\n\n   });\n\n\n\n\nCustomized Column Update\n;\n\n\n// Save organization unit positions\n$Database.ImportFromXml({\n    Parameters : {\n        TargetSchema : \nHR\n,\n        TargetTable : \nOrganizationUnitPositions\n\n    },\n    XPath : \n//OrganizationUnitPositions/OrganizationUnitPosition\n,\n    Map : function(xml) {\n        // Update position by parent node id\n        this.Position = xml.Evaluate(\n../../Id\n);\n    }\n});\n\n\n\n\nUpdate Only Selected Columns\n;\n\n\n$Database.ImportFromXml({\n     Parameters : {                                                              // Fetch from Fikstur table under Fikstur schema.\n         TargetSchema : \nMaclar\n,\n         TargetTable : \nFikstur\n       \n     },\n     Columns : [                                                                 // Use only specified columns\n       { Name : \nId\n },\n       { Name : \nEvSahibiSkor\n },\n       { Name : \nMisafirSkor\n }\n     ],\n     XPath : \n//MacBilgileri\n,\n     Map : function(node) {                                                      // Custom column update\n             this.Id = node.Evaluate(\nMac/Fikstur\n);\n             this.EvSahibiSkor = node.Evaluate(\nSkor/EvSahibi\n);\n             this.MisafirSkor = node.Evaluate(\nSkor/Misafir\n);\n     }\n});\n\n\n\n\nNested Insert and Update\n;\n\n\n$Database.ImportFromXml({                                                                        // Save employee\n   Parameters : {\n       TargetSchema : \nHR\n,\n       TargetTable : \nEmployee\n\n   },\n   XPath : \nIdentities/Identity\n,                                                                // Find rows under Identities/Identity xpath\n   ColumnsXPath : \nEmployee\n,                                                                    // Fetch column values from Employee. Final xpath\n   Map : function(employeeNode) {\n\n       $Database.Get({                                                                           // Fetch matching records from database\n           Parameters : {\n               TargetSchema : \nHR\n,\n               TargetTable : \nOrganizationUnitPositionMembers\n\n           },\n           Where : {\n             Criteria : [\n               { Name : \nEmployee\n, Value : employeeNode.Evaluate(\nId\n) },                       // \nEmployee must equal to Employee/Id xpath value.\n\n               { Name : \nRegistryNumber\n, Value : \n%2\n, Comparison : \nLike\n, Condition : \nOr\n }  // Another criteria just for sample. \nor RegistryNumber must ends with 2\n\n             ]\n           }\n       })\n       .DeleteAll()                                                                              // Delete existing all rows\n       .CreateNew(function() {                                                                   // Create a new row\n           this.Employee = employeeNode.Evaluate(\nId\n);                                          // Set Employee column to \nEmployee/Id\n xpath value.\n           this.OrganizationUnitPosition = employeeNode.Evaluate(\nEmployee/Position\n);           // Set OrganizationUnitPosition column to \nEmployee/Position\n xpath value.\n       })\n       .Save();                                                                                  // Save this table.\n  }\n});\n\n\n\n\nSee Also", 
            "title": "$Database.ImportFromXml"
        }, 
        {
            "location": "/ag/pm/sc/database.importfromxml/#overview", 
            "text": "DataTable   $Database . ImportFromXml   (   options   )   Imports xml data to specified table. Please see  $Datatable.ImportFromXml  for more details.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/database.importfromxml/#remarks", 
            "text": "This method is a wrapper method for  $Datatable.ImportFromXml  and  DataTable.Save", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/database.importfromxml/#examples", 
            "text": "Common use case for importing data ;  // For following xml structure\n//  Root \n//     Group \n//         Name Developers (Junior) / Name \n//     / Group \n//  / Root \n\n\n $Database.ImportFromXml({\n     Parameters : {\n         TargetSchema:  HR ,\n         TargetTable:  Groups ,\n     },\n     XPath :  Groups/Group \n   });  Customized Column Update ;  // Save organization unit positions\n$Database.ImportFromXml({\n    Parameters : {\n        TargetSchema :  HR ,\n        TargetTable :  OrganizationUnitPositions \n    },\n    XPath :  //OrganizationUnitPositions/OrganizationUnitPosition ,\n    Map : function(xml) {\n        // Update position by parent node id\n        this.Position = xml.Evaluate( ../../Id );\n    }\n});  Update Only Selected Columns ;  $Database.ImportFromXml({\n     Parameters : {                                                              // Fetch from Fikstur table under Fikstur schema.\n         TargetSchema :  Maclar ,\n         TargetTable :  Fikstur        \n     },\n     Columns : [                                                                 // Use only specified columns\n       { Name :  Id  },\n       { Name :  EvSahibiSkor  },\n       { Name :  MisafirSkor  }\n     ],\n     XPath :  //MacBilgileri ,\n     Map : function(node) {                                                      // Custom column update\n             this.Id = node.Evaluate( Mac/Fikstur );\n             this.EvSahibiSkor = node.Evaluate( Skor/EvSahibi );\n             this.MisafirSkor = node.Evaluate( Skor/Misafir );\n     }\n});  Nested Insert and Update ;  $Database.ImportFromXml({                                                                        // Save employee\n   Parameters : {\n       TargetSchema :  HR ,\n       TargetTable :  Employee \n   },\n   XPath :  Identities/Identity ,                                                                // Find rows under Identities/Identity xpath\n   ColumnsXPath :  Employee ,                                                                    // Fetch column values from Employee. Final xpath\n   Map : function(employeeNode) {\n\n       $Database.Get({                                                                           // Fetch matching records from database\n           Parameters : {\n               TargetSchema :  HR ,\n               TargetTable :  OrganizationUnitPositionMembers \n           },\n           Where : {\n             Criteria : [\n               { Name :  Employee , Value : employeeNode.Evaluate( Id ) },                       //  Employee must equal to Employee/Id xpath value. \n               { Name :  RegistryNumber , Value :  %2 , Comparison :  Like , Condition :  Or  }  // Another criteria just for sample.  or RegistryNumber must ends with 2 \n             ]\n           }\n       })\n       .DeleteAll()                                                                              // Delete existing all rows\n       .CreateNew(function() {                                                                   // Create a new row\n           this.Employee = employeeNode.Evaluate( Id );                                          // Set Employee column to  Employee/Id  xpath value.\n           this.OrganizationUnitPosition = employeeNode.Evaluate( Employee/Position );           // Set OrganizationUnitPosition column to  Employee/Position  xpath value.\n       })\n       .Save();                                                                                  // Save this table.\n  }\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/database.importfromxml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/delegation/", 
            "text": "Allows to manage delegations between users.\n\n\nYou can use the \nDelegation.Add][1].Add method to add new user delegation and save it return value and delete it with [\nDelegation.Add][1].Add method to add new user delegation and save it return value and delete it with [\nDelegation.Delete\n method if no longer needed.", 
            "title": "$Delegation Methods"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/", 
            "text": "Overview\n\n\nString\n \n$Delegation\n.\nAdd\n \n(\n \nfrom\n,\n \nto\n,\n \nstart\n,\n \nend\n \n)\n\n\n\n\n\nAdds a new delegation specified \"from\" identity to specified \"to\" identity and returns the id number of delegation.\n\n\nArguments\n\n\nIdentiy | String \nfrom\n\n  Specifies the source delegating identity.\n\n\nIdentity | String \nto\n\n  Specifies the target delegated identity.\n\n\nDateTimeOffset \nstart\n\n  Specifies the begin date of delegation.\n\n\nDateTimeOffset \nend\n\n  Specifies the end date of delegation.\n\n\nRemarks\n\n\nExamples\n\n\nCreate a new delegation\n;\n\n\nvar from = $Membership.FindIdentity(\nmadonna\n,\nUser\n);\nvar to = $Membership.FindIdentity(\nlady.gaga\n,\nUser\n);\n\nvar id = $Delegation.Add( from, to, $Calendar.Today, $Calendar.Add($Calendar.Today, 8) );\n\n\n\n\nSee Also\n\n\n\n\n$Delegation.Delete", 
            "title": "$Delegation.Add"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/#overview", 
            "text": "String   $Delegation . Add   (   from ,   to ,   start ,   end   )   Adds a new delegation specified \"from\" identity to specified \"to\" identity and returns the id number of delegation.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/#arguments", 
            "text": "Identiy | String  from \n  Specifies the source delegating identity.  Identity | String  to \n  Specifies the target delegated identity.  DateTimeOffset  start \n  Specifies the begin date of delegation.  DateTimeOffset  end \n  Specifies the end date of delegation.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/#examples", 
            "text": "Create a new delegation ;  var from = $Membership.FindIdentity( madonna , User );\nvar to = $Membership.FindIdentity( lady.gaga , User );\n\nvar id = $Delegation.Add( from, to, $Calendar.Today, $Calendar.Add($Calendar.Today, 8) );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/delegation.add/#see-also", 
            "text": "$Delegation.Delete", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/", 
            "text": "Overview\n\n\nvoid\n \n$Delegation\n.\nDelete\n \n(\n \nid\n \n)\n\n\n\n\n\nRemoves the specified delegation with id\n\n\nArguments\n\n\nString \nid\n\n  Id number of delegation to remove.\n\n\nRemarks\n\n\nExamples\n\n\nDelete delegation\n;\n\n\n$Delegation.Delete( $Xml.Evaluate(\nDelegationId\n) );\n\n\n\n\nSee Also\n\n\n\n\n$Delegation.Add", 
            "title": "$Delegation.Delete"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/#overview", 
            "text": "void   $Delegation . Delete   (   id   )   Removes the specified delegation with id", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/#arguments", 
            "text": "String  id \n  Id number of delegation to remove.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/#examples", 
            "text": "Delete delegation ;  $Delegation.Delete( $Xml.Evaluate( DelegationId ) );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/delegation.delete/#see-also", 
            "text": "$Delegation.Add", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/documents/", 
            "text": "Allows to access document repository.\n\n\nYou can use the \n$Documents.New\n method to create a new \ndocument\n and store it with \nDocument.Save\n method.\n\n\nDocument repository also allows to store different versions of document with branches. Branch is a basically unique identifier of group of documents. Branches are automatically sorted with \nDocument.Version\n property and biggest version is specifies the last version of the branch. To create a new version of document you can use the \nDocuments.NewVersion][5] to create a new document in same branch. To find last version of branch you can use the [\nDocuments.NewVersion][5] to create a new document in same branch. To find last version of branch you can use the [\nDocuments.GetLastVersion\n method.\n\n\nIf you need to access specific version of branch you can use the \n$Documents.Get\n method.", 
            "title": "$Documents Methods"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/", 
            "text": "Overview\n\n\nDocument\n \n$Documents\n.\nGet\n \n(\n \nid\n \n)\n\n\n\n\n\nReturns a document instance from repository if found, otherwise null.\n\n\nArguments\n\n\nString \nid\n\n  Id number of document\n\n\nRemarks\n\n\nExamples\n\n\nPublishing a new version for existing document\n;\n\n\nvar existingDocument = $Documents.Get(id);\n\nvar newVersion = $Documents.NewVersion(existingDocument.BranchId,\nMy Document Version\n,\n2.0.0\n);\n\n// publish document under Test\\Documents folder path.\nnewVersion.Publish(\nTest\\Documents\n);\n\n\n\n\nSee Also", 
            "title": "$Documents.Get"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/#overview", 
            "text": "Document   $Documents . Get   (   id   )   Returns a document instance from repository if found, otherwise null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/#arguments", 
            "text": "String  id \n  Id number of document", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/#examples", 
            "text": "Publishing a new version for existing document ;  var existingDocument = $Documents.Get(id);\n\nvar newVersion = $Documents.NewVersion(existingDocument.BranchId, My Document Version , 2.0.0 );\n\n// publish document under Test\\Documents folder path.\nnewVersion.Publish( Test\\Documents );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/documents.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/", 
            "text": "Overview\n\n\nDocument\n \n$Documents\n.\nGetLastVersion\n \n(\n \nbranchId\n \n)\n\n\n\n\n\nReturns the last version of document instance from repository if found, otherwise null.\n\n\nArguments\n\n\nString \nbranchId\n\n  Branch Id document group\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "$Documents.GetLastVersion"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/#overview", 
            "text": "Document   $Documents . GetLastVersion   (   branchId   )   Returns the last version of document instance from repository if found, otherwise null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/#arguments", 
            "text": "String  branchId \n  Branch Id document group", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/documents.getlastversion/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/", 
            "text": "Overview\n\n\nDocument\n \n$Documents\n.\nNew\n \n(\n \n[\n \ntitle\n \n],\n \n[\n \ncontentType\n \n]\n \n)\n\n\n\n\n\nCreates a new document in repository and returns a document instance.\n\n\nArguments\n\n\nString \ntitle\n\n  Title of document\n\n\nString \ncontentType\n\n  Name or Id number of content type to be used.\n\n\nRemarks\n\n\nCreated document is in \"Draft\" state and not saved until Document.Save() method is called. \n\n\nExamples\n\n\nCreating a new document with PDF file\n;\n\n\nvar doc = $Documents.NewVersion( Script.NewId(), \nMy Document\n);\n\ndoc.Files.AddPDF( \np\nHello\n/\np\n, \nreport.pdf\n);\n\ndoc.CreatedBy = $WorkItem.CompletedBy;\n\nvar targetFolders = [\nReports\n];\n\ndoc.Publish(targetFolders);\n\n\n\n\nSee Also", 
            "title": "$Documents.New"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/#overview", 
            "text": "Document   $Documents . New   (   [   title   ],   [   contentType   ]   )   Creates a new document in repository and returns a document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/#arguments", 
            "text": "String  title \n  Title of document  String  contentType \n  Name or Id number of content type to be used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/#remarks", 
            "text": "Created document is in \"Draft\" state and not saved until Document.Save() method is called.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/#examples", 
            "text": "Creating a new document with PDF file ;  var doc = $Documents.NewVersion( Script.NewId(),  My Document );\n\ndoc.Files.AddPDF(  p Hello / p ,  report.pdf );\n\ndoc.CreatedBy = $WorkItem.CompletedBy;\n\nvar targetFolders = [ Reports ];\n\ndoc.Publish(targetFolders);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/documents.new/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/", 
            "text": "Overview\n\n\nDocument\n \n$Documents\n.\nNewVersion\n \n(\n \nbranchId\n,\n \n[\n \ntitle\n \n],\n \n[\n \nversionNumber\n \n]\n \n)\n\n\n\nCreates a new document version in repository and returns a document instance.\n\n\nArguments\n\n\nString \nbranchId\n\n  Branch determines the versions of between documents. Branch Id specifies root branch between versions. If specified branch is not found system automatically creates a first version based on branch. If found created new version is based on branch.\n\n\nString \ntitle\n\nTitle of document. If not specified title of last version is used.\n\n\nString \nversionNumber\n\nVersion number of document. If not specified automatically incremented by last version in branch. Version number is formatted like Major.Minor.Revision. Ex : 2.5.1\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "$Documents.NewVersion"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/#overview", 
            "text": "Document   $Documents . NewVersion   (   branchId ,   [   title   ],   [   versionNumber   ]   )  \nCreates a new document version in repository and returns a document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/#arguments", 
            "text": "String  branchId \n  Branch determines the versions of between documents. Branch Id specifies root branch between versions. If specified branch is not found system automatically creates a first version based on branch. If found created new version is based on branch.  String  title \nTitle of document. If not specified title of last version is used.  String  versionNumber \nVersion number of document. If not specified automatically incremented by last version in branch. Version number is formatted like Major.Minor.Revision. Ex : 2.5.1", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/documents.newversion/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/", 
            "text": "Overview\n\n\nobject\n \n$Domain\n.\nGetSecurityProfiles\n \n(\n \n)\n\n\n\n\n\nReturns the security profiles defined on domain.\n\n\nArguments\n\n\nRemarks\n\n\n\n\nThis function always returns a new object. \n\n\n\n\nExamples\n\n\nvar profiles = $Domain.GetSecurityProfiles();\n\nvar defaultProfileId = profile[\nDefault\n]; // defaultProfileId = \nDEFDEFDD-DEFD-DEFD-DEFD-DEFDEDDEFDEF\n\n\nvar profileNames = Object.keys(profile); // profileNames = [\nDefault\n,\nOther Profile\n]\n\n\n\n\nSee Also", 
            "title": "$Domain.GetSecurityProfiles"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/#overview", 
            "text": "object   $Domain . GetSecurityProfiles   (   )   Returns the security profiles defined on domain.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/#remarks", 
            "text": "This function always returns a new object.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/#examples", 
            "text": "var profiles = $Domain.GetSecurityProfiles();\n\nvar defaultProfileId = profile[ Default ]; // defaultProfileId =  DEFDEFDD-DEFD-DEFD-DEFD-DEFDEDDEFDEF \n\nvar profileNames = Object.keys(profile); // profileNames = [ Default , Other Profile ]", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/domain.getsecurityprofiles/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/", 
            "text": "Overview\n\n\nBoolean\n \n$Domain\n.\nHasPermission\n \n(\n \nidentity\n,\n \nprofile\n,\n \npermissions\n \n)\n\n\n\n\n\nReturns true or false value that user has permission on specified profile and permissions.\n\n\nArguments\n\n\nIdentity | String \nidentity\n\n Identity to check permission\n\n\nString \nprofile\n\nName or Id number of security profile.\n\n\nNumber \npermissions\n\nPermission to check\n\n\nRemarks\n\n\n\n\nPermissions are defined as following;\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNone\n\n\n0\n\n\n\n\n\n\nRead\n\n\n1\n\n\n\n\n\n\nWrite\n\n\n2\n\n\n\n\n\n\nDelete\n\n\n4\n\n\n\n\n\n\nAll\n\n\n7\n\n\n\n\n\n\n\n\n\n\nPermissions can be combined with bitwise OR operator like \" 1 | 4 \"\n\n\nIf specified profile not found this function throws error.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "$Domain.HasPermission"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/#overview", 
            "text": "Boolean   $Domain . HasPermission   (   identity ,   profile ,   permissions   )   Returns true or false value that user has permission on specified profile and permissions.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/#arguments", 
            "text": "Identity | String  identity \n Identity to check permission  String  profile \nName or Id number of security profile.  Number  permissions \nPermission to check", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/#remarks", 
            "text": "Permissions are defined as following;      Description  Value      None  0    Read  1    Write  2    Delete  4    All  7      Permissions can be combined with bitwise OR operator like \" 1 | 4 \"  If specified profile not found this function throws error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/domain.haspermission/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/", 
            "text": "Overview\n\n\nBoolean\n \n$Domain\n.\nHasProcess\n \n(\n \nprocess\n \n)\n\n\n\n\n\nReturns true if specified process has installed on current domain.\n\n\nArguments\n\n\nString \nprocess\n\nName or Id number of process\n\n\nRemarks\n\n\nExamples\n\n\nvar isInstalled = $Domain.HasProcess(\nAddress Book\n);\n\n\n\n\nSee Also", 
            "title": "$Domain.HasProcess"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/#overview", 
            "text": "Boolean   $Domain . HasProcess   (   process   )   Returns true if specified process has installed on current domain.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/#arguments", 
            "text": "String  process \nName or Id number of process", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/#examples", 
            "text": "var isInstalled = $Domain.HasProcess( Address Book );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/domain.hasprocess/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/domain.logourl/", 
            "text": "Overview\n\n\nstring\n \n$Domain\n.\nLogoUrl\n \n{\n \nget\n;\n \n}\n\n\n\n\n\nGets the URL of domain logo image.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "$Domain.LogoUrl"
        }, 
        {
            "location": "/ag/pm/sc/domain.logourl/#overview", 
            "text": "string   $Domain . LogoUrl   {   get ;   }   Gets the URL of domain logo image.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/domain.logourl/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/domain.logourl/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/domain.logourl/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/domain.url/", 
            "text": "Overview\n\n\nString\n \n$Domain\n.\nUrl\n \n{\n \nget\n;\n \n}\n\n\n\n\n\nGets the URL of domain.\n\n\nRemarks\n\n\nIf SSL enabled this property always returns the https address of domain.\n\n\nExamples\n\n\nSee Also", 
            "title": "$Domain.Url"
        }, 
        {
            "location": "/ag/pm/sc/domain.url/#overview", 
            "text": "String   $Domain . Url   {   get ;   }   Gets the URL of domain.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/domain.url/#remarks", 
            "text": "If SSL enabled this property always returns the https address of domain.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/domain.url/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/domain.url/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files/", 
            "text": "Allows to access standard file repository for attached files. $Files contains the all of single headless files that are not related anything.\n\n\nPlease see Files for more usage details.", 
            "title": "$Files"
        }, 
        {
            "location": "/ag/pm/sc/localization/", 
            "text": "Overview\n\n\nAllows to access localization dictionary entries from scripting environment.\n\n\nDictionary entries has dynamic properties depending on defined dictionary entries  object and accessed in following format:\n\n\n$Localization.\nGroup\n.\nSource\n \nText\n\n\n\n\n\nGroup\n\nName of localization group. You can find group name from \"Group\" column in localization list.\n\n\nSource Text\n\nKey of localization entry. All of non valid characters like spaces or punctuation characters (e.g. %, ?, - ) are removed and keys are generated only from a-z or A-Z or 0-9 characters.\n\n\nFor example you can use following keys:\n\n\nvar ownerLabel = $Localization.Label.Owner;\nvar nameSurnameLabel = $Localization.Label.NameSurname;", 
            "title": "$Localization"
        }, 
        {
            "location": "/ag/pm/sc/localization/#overview", 
            "text": "Allows to access localization dictionary entries from scripting environment.  Dictionary entries has dynamic properties depending on defined dictionary entries  object and accessed in following format:  $Localization. Group . Source   Text   Group \nName of localization group. You can find group name from \"Group\" column in localization list.  Source Text \nKey of localization entry. All of non valid characters like spaces or punctuation characters (e.g. %, ?, - ) are removed and keys are generated only from a-z or A-Z or 0-9 characters.  For example you can use following keys:  var ownerLabel = $Localization.Label.Owner;\nvar nameSurnameLabel = $Localization.Label.NameSurname;", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/", 
            "text": "Overview\n\n\nint\n \n$Market\n.\nGetLicenseLimits\n \n(\n \n[\n \ntype\n \n],\n \n[\n \ndefaultValue\n \n]\n \n)\n\n\n\n\n\nReturns the license limit value if license is available.\n\n\nArguments\n\n\nString \ntype\n\n  Name of limit type. This value depends on license content and can be null.\n\n\nNumber \ndefaultValue\n\n  Default value of limit if no license found.\n\n\nRemarks\n\n\nIf no license is found, this method returns the default value if specified, otherwise returns 0.\n\n\nIf process is not installed from market store return value is default value if specified, otherwise returns 2.147,483,647.\n\n\nExamples\n\n\nLicense Check\n;\n\n\nif ( $Market.GetLicenseLimits(\nTransactionCount\n, 10) \n $Xml.Count(\nTransactions/Transaction\n) ) {\n   $Xml.SetValue(\nLicensed\n,true);\n} else {\n   $Xml.SetValue(\nLicensed\n,false);\n}\n\n\n\n\nSee Also", 
            "title": "$Market.GetLicenseLimits"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/#overview", 
            "text": "int   $Market . GetLicenseLimits   (   [   type   ],   [   defaultValue   ]   )   Returns the license limit value if license is available.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/#arguments", 
            "text": "String  type \n  Name of limit type. This value depends on license content and can be null.  Number  defaultValue \n  Default value of limit if no license found.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/#remarks", 
            "text": "If no license is found, this method returns the default value if specified, otherwise returns 0.  If process is not installed from market store return value is default value if specified, otherwise returns 2.147,483,647.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/#examples", 
            "text": "License Check ;  if ( $Market.GetLicenseLimits( TransactionCount , 10)   $Xml.Count( Transactions/Transaction ) ) {\n   $Xml.SetValue( Licensed ,true);\n} else {\n   $Xml.SetValue( Licensed ,false);\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/market.getlicenselimits/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/", 
            "text": "Overview\n\n\nbool\n \n$Market\n.\nValidateLicense\n \n(\n \nlicenseKey\n \n)\n\n\n\n\n\nReturns the state of specified license key is valid or not. \n\n\nArguments\n\n\nString \nlicenseKey\n\n License key\n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\n$Market.GetLicenseLimits", 
            "title": "$Market.ValidateLicense"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/#overview", 
            "text": "bool   $Market . ValidateLicense   (   licenseKey   )   Returns the state of specified license key is valid or not.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/#arguments", 
            "text": "String  licenseKey \n License key", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/market.validatelicense/#see-also", 
            "text": "$Market.GetLicenseLimits", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership/", 
            "text": "$Membership allows to access users and organization database objects.\n\n\nYou can use \n$Membership.Administrator\n property to access domain administrators group.\n\n\nIf you need to query specific identity you can use \nMembership.FindIdentity ][2]or [\nMembership.FindIdentity ][2]or [\nMembership.FindPosition\n to find by certain criteria or you can directly query the identity with \n$Membership.Get\n method.\n\n\nIf you have an identity and query it's properties you can use the \n$Membership.GetProperty\n to get certain properties.\n\n\nIf need to find manager of a user or position or organization unit you can use the \n$Membership.FindManager\n  to perform complex query.", 
            "title": "$Membership Methods"
        }, 
        {
            "location": "/ag/pm/sc/membership.administrator/", 
            "text": "Overview\n\n\nIdentity\n \n$Membership\n.\nAdministrator\n \n{\n \nget\n;\n \n}\n\n\n\n\n\nGets the domain administrator group \nidentity\n.\n\n\nRemarks\n\n\nExamples", 
            "title": "$Membership.Administrator"
        }, 
        {
            "location": "/ag/pm/sc/membership.administrator/#overview", 
            "text": "Identity   $Membership . Administrator   {   get ;   }   Gets the domain administrator group  identity .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.administrator/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.administrator/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/", 
            "text": "Overview\n\n\nIdentity\n \n$Membership\n.\nFindIdentity\n \n(\n \npath\n,\n \n[\n \ntype\n \n]\n \n)\n\n\n\n\n\nReturns an identity on specified path. If no identity is matched returns null.\n\n\nArguments\n\n\nString \npath\n\n Specifies the path of identity depending on identity type.\n\n\nString \ntype\n\nSpecifies the type of identity to be found. If not specified \"User\" type is used.\n\n\nRemarks\n\n\nPath and Type arguments may be one of following values\n\n\n\n\n\n\n\n\nType\n\n\nPath\n\n\n\n\n\n\n\n\n\n\nUser\n\n\nLogon id of user. Ex: \"john.doe\"\n\n\n\n\n\n\nGroup\n\n\nName of group. Ex: \"Developers\"\n\n\n\n\n\n\nOrganization Unit\n\n\nQualified path of organization unit. Ex: \"General Management\\Accounting\"\n\n\n\n\n\n\n\n\nExamples\n\n\nFind User\n\n\n var user = $Membership.FindIdentity(\nelton.john\n);\n\n\n\n\nFind Group\n\n\nvar group = $Membership.FindIdentity(\nDevelopers\n,\nGroup\n);\n\n\n\n\nFind Organization Unit\n\n\nvar orgUnit = $Membership.FindIdentity(\nGeneral Management\\\\Accounting\n,\nOrganizationUnit\n);\n\n\n\n\nSee Also", 
            "title": "$Membership.FindIdentity"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/#overview", 
            "text": "Identity   $Membership . FindIdentity   (   path ,   [   type   ]   )   Returns an identity on specified path. If no identity is matched returns null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/#arguments", 
            "text": "String  path \n Specifies the path of identity depending on identity type.  String  type \nSpecifies the type of identity to be found. If not specified \"User\" type is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/#remarks", 
            "text": "Path and Type arguments may be one of following values     Type  Path      User  Logon id of user. Ex: \"john.doe\"    Group  Name of group. Ex: \"Developers\"    Organization Unit  Qualified path of organization unit. Ex: \"General Management\\Accounting\"", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/#examples", 
            "text": "Find User   var user = $Membership.FindIdentity( elton.john );  Find Group  var group = $Membership.FindIdentity( Developers , Group );  Find Organization Unit  var orgUnit = $Membership.FindIdentity( General Management\\\\Accounting , OrganizationUnit );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.findidentity/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/", 
            "text": "Overview\n\n\nIdentity\n \n$Membership\n.\nFindManager\n \n(\n \nidentity\n,\n \n[\n \nposition\n \n]\n \n)\n\n\n\n\n\nReturns manager position of specified identity if found.\n\n\nArguments\n\n\nIdentity | String \nidentity\n\n Identity to find manager of\n\n\nIdentity | String \nposition\n\nCurrent position of identity. Optional.\n\n\nRemarks\n\n\nWhen input identity is a user;\n\n\nCalculates the manager position of specified user.\n\n\nIf manager position is empty, tries the scan organization hierarchy upper level, until to a position found, otherwise null.\n\n\nWhen input identity is a organization unit\n\n\nCalculates the common manager of existing positions in specified organization unit.\n\n\nIf multiple manager found, throws error.\n\n\nIf no position exist, returns null.\n\n\nExamples\n\n\nFind a manager by form data\n\n\n$Membership.FindManager( $Xml.Evaluate(\nPersonnelInformation/Owner\n) );\n\n\n\n\nFind a manager by form data with position identifier\n\n\n$Membership.FindManager( $Xml.Evaluate(\nPersonnelInformation/Owner\n), $Xml.Evaluate(\nPersonnelInformation/Position\n) );\n\n\n\n\nFind the manager of who has processed the current work item\n\n\n$Membership.FindManager( $WorkItem.CompletedBy );\n\n\n\n\nFind the manager of a organization unit\n\n\n$Membership.FindManager( $Xml.Evaluate(\nDepartment\n) );\n\n\n\n\nSee Also", 
            "title": "$Membership.FindManager"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/#overview", 
            "text": "Identity   $Membership . FindManager   (   identity ,   [   position   ]   )   Returns manager position of specified identity if found.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/#arguments", 
            "text": "Identity | String  identity \n Identity to find manager of  Identity | String  position \nCurrent position of identity. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/#remarks", 
            "text": "When input identity is a user;  Calculates the manager position of specified user.  If manager position is empty, tries the scan organization hierarchy upper level, until to a position found, otherwise null.  When input identity is a organization unit  Calculates the common manager of existing positions in specified organization unit.  If multiple manager found, throws error.  If no position exist, returns null.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/#examples", 
            "text": "Find a manager by form data  $Membership.FindManager( $Xml.Evaluate( PersonnelInformation/Owner ) );  Find a manager by form data with position identifier  $Membership.FindManager( $Xml.Evaluate( PersonnelInformation/Owner ), $Xml.Evaluate( PersonnelInformation/Position ) );  Find the manager of who has processed the current work item  $Membership.FindManager( $WorkItem.CompletedBy );  Find the manager of a organization unit  $Membership.FindManager( $Xml.Evaluate( Department ) );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.findmanager/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/", 
            "text": "Overview\n\n\nIdentity\n[]\n \n$Membership\n.\nFindPosition\n \n(\n \nposition\n,\n \norganizationUnit\n,\n \n[\n \ndirection\n \n=\n \nUp\n \n]\n \n)\n\n\n\n\n\nReturns list of available positions by name. Empty positions (no active employee exist) are not returned by this function.\n\n\nArguments\n\n\nIdentity | String \nposition\n\n    Position to find.\n\n\nIdentity | String \norganizationUnit\n\n    Organization unit context to find search on.\n\n\nIdentity | String \norganizationUnit\n\n    Specifies the search direction. Optional but can be set to one of following values.\n\n\nUp\n\nSearch on specified organization unit and upper units. (Default)\n\n\nDown\n\nSearch on specified organization unit and below units. \n\n\nNone\n\nSearch only on specified organization unit. \n\n\nRemarks\n\n\nEmpty positions with no employee are not returned by this function even position is defined.\n\n\nIf organization unit provided position only search with specified unit scope. Direction parameter specifies the scope of search.\n\n\nExamples\n\n\nFind \"Accounting Specialist\" on current organization.\n\n\nvar positions = $Membership.FindPosition(\nAccounting Specialist\n);\n\n\n\n\nFind \"Accounting Specialist\" on \"General Management\" department.\n\n\nvar positions = $Membership.FindPosition(\nAccounting Specialist\n, \nGeneral Management\n);\n\n\n\n\nSee Also", 
            "title": "$Membership.FindPosition"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/#overview", 
            "text": "Identity []   $Membership . FindPosition   (   position ,   organizationUnit ,   [   direction   =   Up   ]   )   Returns list of available positions by name. Empty positions (no active employee exist) are not returned by this function.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/#arguments", 
            "text": "Identity | String  position \n    Position to find.  Identity | String  organizationUnit \n    Organization unit context to find search on.  Identity | String  organizationUnit \n    Specifies the search direction. Optional but can be set to one of following values.  Up \nSearch on specified organization unit and upper units. (Default)  Down \nSearch on specified organization unit and below units.   None \nSearch only on specified organization unit.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/#remarks", 
            "text": "Empty positions with no employee are not returned by this function even position is defined.  If organization unit provided position only search with specified unit scope. Direction parameter specifies the scope of search.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/#examples", 
            "text": "Find \"Accounting Specialist\" on current organization.  var positions = $Membership.FindPosition( Accounting Specialist );  Find \"Accounting Specialist\" on \"General Management\" department.  var positions = $Membership.FindPosition( Accounting Specialist ,  General Management );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.findposition/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/", 
            "text": "Overview\n\n\nIdentity\n \n$Membership\n.\nGet\n \n(\n \nid\n \n)\n\n\n\n\n\nReturns an identity by id.\n\n\nArguments\n\n\nString \nid\n\n  Identifier of identity\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "$Membership.Get"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/#overview", 
            "text": "Identity   $Membership . Get   (   id   )   Returns an identity by id.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/#arguments", 
            "text": "String  id \n  Identifier of identity", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/", 
            "text": "Overview\n\n\nobject\n \n$Membership\n.\nGetProperty\n \n(\n \nidentity\n,\n \nproperty\n \n)\n\n\n\nReturns specified property of an identity.\n\n\nArguments\n\n\nIdentity | String \nidentity\n\n Identity to find manager of\n\n\nString \nproperty\n\n Property name to get.\n\n\nRemarks\n\n\nProperties are generic key values of identities. Property names are changed by system membership provider but some well-known properties are always supported by any membership provider.\n\n\nWell-Known Properties\n\n\nId\n\nReturns the identity Id\n\n\nName\n\nReturns the first name of person identity.\n\n\nSurname\n\nReturns the surname of person identity.\n\n\nEMailAddress\n\nReturns the email address of identity.\n\n\nDisplayName\n\nReturns the display name of identity.\n\n\nLanguage\n\nReturns the language preference of identity.\n\n\nGeneric Property Names\n\n\nGeneric property names are resolved by configured membership provider. For example \"Organization\" membership provider uses repository column names as property. Therefore \"Employee.Department.Name\" is a valid property name and returns the department name of a user.\n\n\nExamples\n\n\nFetching name of initiator\n;\n\n\n$Membership.GetProperty( $Initiator, \nName\n)\n\n\n\n\nFetching department of initiator\n;\n\n\n$Membership.GetProperty( $Initiator, \nEmployee.Department.Name\n)\n\n\n\n\nSee Also", 
            "title": "$Membership.GetProperty"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#overview", 
            "text": "object   $Membership . GetProperty   (   identity ,   property   )  \nReturns specified property of an identity.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#arguments", 
            "text": "Identity | String  identity \n Identity to find manager of  String  property \n Property name to get.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#remarks", 
            "text": "Properties are generic key values of identities. Property names are changed by system membership provider but some well-known properties are always supported by any membership provider.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#well-known-properties", 
            "text": "Id \nReturns the identity Id  Name \nReturns the first name of person identity.  Surname \nReturns the surname of person identity.  EMailAddress \nReturns the email address of identity.  DisplayName \nReturns the display name of identity.  Language \nReturns the language preference of identity.", 
            "title": "Well-Known Properties"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#generic-property-names", 
            "text": "Generic property names are resolved by configured membership provider. For example \"Organization\" membership provider uses repository column names as property. Therefore \"Employee.Department.Name\" is a valid property name and returns the department name of a user.", 
            "title": "Generic Property Names&gt;"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#examples", 
            "text": "Fetching name of initiator ;  $Membership.GetProperty( $Initiator,  Name )  Fetching department of initiator ;  $Membership.GetProperty( $Initiator,  Employee.Department.Name )", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.getproperty/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/", 
            "text": "Overview\n\n\nIdentity\n[]\n \n$Membership\n.\nJoin\n \n(\n \ninput\n \n)\n\n\n\nMerges specified input as identity array. Duplicate values are removed from array.\n\n\nArguments\n\n\nSObject input\nList of identities. Can be array of \nIdentity\n.\n\n\nRemarks\n\n\nThis function recursively searches if array element is a array again to find all identities on input element and returns flatten identity array.\n\n\nExamples\n\n\nMerge to identity\n;\n\n\nvar result = $Membership.Join([\n  $Membership.FindIdentity(\nDevelopers\n,\nGroup\n),\n  $Membership.FindIdentity(\nGeneral Management\\Accounting\n,\nOrganizationUnit\n)\n]);\n\n\n\n\nSee Also", 
            "title": "$Membership.Join"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/#overview", 
            "text": "Identity []   $Membership . Join   (   input   )  \nMerges specified input as identity array. Duplicate values are removed from array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/#arguments", 
            "text": "SObject input\nList of identities. Can be array of  Identity .", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/#remarks", 
            "text": "This function recursively searches if array element is a array again to find all identities on input element and returns flatten identity array.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/#examples", 
            "text": "Merge to identity ;  var result = $Membership.Join([\n  $Membership.FindIdentity( Developers , Group ),\n  $Membership.FindIdentity( General Management\\Accounting , OrganizationUnit )\n]);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/membership.join/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/messages/", 
            "text": "$Messages are used to create new mail \nmessage\n and parsing.\n\n\nIf you need to create a new mail message you can use the $Messages.New method and send to recipients with \nMessage.Send\n method.\n\n\nIf you need to convert mail message to an EML file, you can use to \nMessages.CreateEML][3] store it is a file or use [\nMessages.CreateEML][3] store it is a file or use [\nMessages.ParseEML\n method to convert back to mail message.\n\n\nAlso you can use the \nMessages.GetEMLSignatureHash][5] and [\nMessages.GetEMLSignatureHash][5] and [\nMessages.AddEMLSignature\n methods for digitally signing of the EML files.\n\n\nSee Also\n\n\n\n\nMessage", 
            "title": "$Messages Methods"
        }, 
        {
            "location": "/ag/pm/sc/messages/#see-also", 
            "text": "Message", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/messages.addemlsignature/", 
            "text": "", 
            "title": "$Messages.AddEMLSignature"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/", 
            "text": "Overview\n\n\nFileInfo\n \n$Messages\n.\nCreateEML\n \n(\n \nmessage\n \n)\n\n\n\nCreates a EML file from specified message definition.\n\n\nArguments\n\n\nMessage \nmessage\n\n Message definition\n\n\nRemarks\n\n\nThis method creates a new EML file by specified message object. Created file has \".eml\" extension with \"message/rfc822\" mime type\n\n\nExamples\n\n\nSee Also\n\n\n\n\n$Messages.ParseEML\n.", 
            "title": "$Messages.CreateEML"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/#overview", 
            "text": "FileInfo   $Messages . CreateEML   (   message   )  \nCreates a EML file from specified message definition.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/#arguments", 
            "text": "Message  message \n Message definition", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/#remarks", 
            "text": "This method creates a new EML file by specified message object. Created file has \".eml\" extension with \"message/rfc822\" mime type", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/messages.createeml/#see-also", 
            "text": "$Messages.ParseEML .", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/messages.getemlsignaturehash/", 
            "text": "", 
            "title": "$Messages.GetEMLSignatureHash"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/", 
            "text": "Overview\n\n\nMessage\n \n$Messages\n.\nNew\n \n(\n \n[\n \nto\n \n=\n \nnull\n \n],\n \n[\n \nsubject\n \n=\n \nnull\n \n],\n \n[\n \nbody\n \n=\n \nnull\n \n]\n \n)\n\n\n\nCreates a new message instance to be send.\n\n\nArguments\n\n\nstring \nto\n\n  message to recipients in email format. Optional but you must set a recipient before sending.\n\n\nstring \nsubject\n\n  subject of message. Optional.\n\n\nstring \nbody\n\n  body of message.\n\n\nRemarks\n\n\nThis method does not send message, only prepares the message. To send message please use Message.Send method.\n\n\nExamples\n\n\nSend a message\n;\n\n\nvar msg = $Messages.New( \nuser@host.com\n , \nremember\n , \nRemember the milk!.\n );\nmsg.Send();\n\n\n\n\nMultiple Recipients\n;\n\n\nvar msg = $Messages.New();\n\nmsg.Subject = $Xml.Evaluate(\nDispatch/Subject\n);\nmsg.Body = $Xml.Evaluate(\nDispatch/Body\n);\nmsg.DeleteAfter = $Calendar.AddDays($Calendar.Today,30);\n\n$Xml.SelectAll(\nTo/Address\n, function(adr) {\n\n    var type = adr.Evaluate(\nType/Code\n);\n\n    if (type === \nTo\n) {\n        msg.To(adr.Evaluate(\nEMailAddress\n));\n    } else if (type === \nCC\n) {\n        msg.CC(adr.Evaluate(\nEMailAddress\n));\n    } else if (type === \nBCC\n) {\n        msg.BCC(adr.Evaluate(\nEMailAddress\n));\n    }\n\n});\n\n$Xml.SelectAll(\nAttachments/Attachment\n, function(att) {\n    msg.AttachFile(att.Evaluate(\nFile\n));\n});\n\nmsg.Send();\n\n\n\n\nSee Also", 
            "title": "$Messages.New"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/#overview", 
            "text": "Message   $Messages . New   (   [   to   =   null   ],   [   subject   =   null   ],   [   body   =   null   ]   )  \nCreates a new message instance to be send.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/#arguments", 
            "text": "string  to \n  message to recipients in email format. Optional but you must set a recipient before sending.  string  subject \n  subject of message. Optional.  string  body \n  body of message.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/#remarks", 
            "text": "This method does not send message, only prepares the message. To send message please use Message.Send method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/#examples", 
            "text": "Send a message ;  var msg = $Messages.New(  user@host.com  ,  remember  ,  Remember the milk!.  );\nmsg.Send();  Multiple Recipients ;  var msg = $Messages.New();\n\nmsg.Subject = $Xml.Evaluate( Dispatch/Subject );\nmsg.Body = $Xml.Evaluate( Dispatch/Body );\nmsg.DeleteAfter = $Calendar.AddDays($Calendar.Today,30);\n\n$Xml.SelectAll( To/Address , function(adr) {\n\n    var type = adr.Evaluate( Type/Code );\n\n    if (type ===  To ) {\n        msg.To(adr.Evaluate( EMailAddress ));\n    } else if (type ===  CC ) {\n        msg.CC(adr.Evaluate( EMailAddress ));\n    } else if (type ===  BCC ) {\n        msg.BCC(adr.Evaluate( EMailAddress ));\n    }\n\n});\n\n$Xml.SelectAll( Attachments/Attachment , function(att) {\n    msg.AttachFile(att.Evaluate( File ));\n});\n\nmsg.Send();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/messages.new/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/", 
            "text": "Overview\n\n\nMesssage\n \n$Messages\n.\nParseEML\n \n(\n \neml\n \n)\n\n\n\nParses specified input as eml file and returns message instance. \n\n\nArguments\n\n\nString | FileInfo \neml\n\n EML file object. Can be one of following types:\n\n\n\n\n\n\n\n\nTables\n\n\nAre\n\n\n\n\n\n\n\n\n\n\nString (Guid)\n\n\nId number of file\n\n\n\n\n\n\nString (Base64)\n\n\nContent of EML file in base64 encoding\n\n\n\n\n\n\nFileInfo\n\n\nInstance of file information.\n\n\n\n\n\n\n\n\nRemarks\n\n\nArgument \"eml\" if not valid any instance of accepted types error is thrown.\n\n\nExamples\n\n\nSee Also\n\n\n\n\n$Messages.CreateEML\n.", 
            "title": "$Messages.ParseEML"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/#overview", 
            "text": "Messsage   $Messages . ParseEML   (   eml   )  \nParses specified input as eml file and returns message instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/#arguments", 
            "text": "String | FileInfo  eml \n EML file object. Can be one of following types:     Tables  Are      String (Guid)  Id number of file    String (Base64)  Content of EML file in base64 encoding    FileInfo  Instance of file information.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/#remarks", 
            "text": "Argument \"eml\" if not valid any instance of accepted types error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/messages.parseeml/#see-also", 
            "text": "$Messages.CreateEML .", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/rest/", 
            "text": "Overview\n\n\nAllows to call rest services with JSON or XML content types.\n\n\nRest service operations consist of objects \nClient\n and \nRequest\n and \nResponse\n. \n\n\nRest Service Calling Walkthrough\n\n\nCreating Rest Client\n\n\nTo create a client use $Rest.Create method by providing the rest \nservice base url\n.\n\n\nvar client = $Rest.Create(\nhttp://api.geonames.org/\n);\n\n\n\n\nSome of rest services may require the authentication. Emakin supports the OpenAuth2 based authentication services and to create a authenticated client please specify the service and identity as below;\n\n\nvar client = $Rest.Create(\nhttps://graph.microsoft.com/v1.0/\n, \nOffice365\n, \n, $WorkItem.CompletedBy).EnsureAuthenticated();\n\n\n\n\nThis method acquires a authentication token from service and ensures client is authenticated. If token cannot be acquired from service \nEnsureAuthenticated\n method throws a javascript exception. You can also use \nIsAuthenticated\n property and \nAuthenticate\n method to perform same operation without error handling.\n\n\nCreating Rest Request\n\n\nAfter creating client connection you can create rest request and populate parameters as below;\n\n\nvar request = client.Request(\nchildrenJSON\n)\n                .AddQueryParameter(\nusername\n, \ndemo\n)\n                .AddQueryParameter(\ngeonameId\n, id);\n\n\n\n\nYou may also set http headers with \nAddHeader\n method. \n\n\nSome rest methods requires JSON or XML based body and you can specify the content of request with \nAddObject\n or \nAddXml\n methods.\n\n\nFetching Rest Response\n\n\nAfter \nRequest\n populated you can call the \nExecute\n method to execute and fetch \nResponse\n object. \nExecute\n method by default does not perform any error check. If you want to be sure request has successfully executed please use \nExpect\n method to specify expected status code.\n\n\nvar response = request.Execute();\n\nif (response.StatusCode == \nOK\n) {\n    var val = response.GetHeader(\nX-Header\n);\n    var obj = response.ToJson();\n}\n\n\n\n\nYou can also use \nGet\n, \nDelete\n, \nPut\n, \nPost\n, \nPatch\n methods to call service with corresponding method or you can manually set the \nRestRequest.Method\n before executing.\n\n\nIf service always returns JSON or XML you can use \nExecuteJson\n or \nExecuteXml\n method to fetch response as JSON object or XML navigator.\n\n\nvar object = request.ExecuteJson();\n\n// object.person.name;", 
            "title": "$Rest Methods"
        }, 
        {
            "location": "/ag/pm/sc/rest/#overview", 
            "text": "Allows to call rest services with JSON or XML content types.  Rest service operations consist of objects  Client  and  Request  and  Response .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/rest/#rest-service-calling-walkthrough", 
            "text": "", 
            "title": "Rest Service Calling Walkthrough"
        }, 
        {
            "location": "/ag/pm/sc/rest/#creating-rest-client", 
            "text": "To create a client use $Rest.Create method by providing the rest  service base url .  var client = $Rest.Create( http://api.geonames.org/ );  Some of rest services may require the authentication. Emakin supports the OpenAuth2 based authentication services and to create a authenticated client please specify the service and identity as below;  var client = $Rest.Create( https://graph.microsoft.com/v1.0/ ,  Office365 ,  , $WorkItem.CompletedBy).EnsureAuthenticated();  This method acquires a authentication token from service and ensures client is authenticated. If token cannot be acquired from service  EnsureAuthenticated  method throws a javascript exception. You can also use  IsAuthenticated  property and  Authenticate  method to perform same operation without error handling.", 
            "title": "Creating Rest Client"
        }, 
        {
            "location": "/ag/pm/sc/rest/#creating-rest-request", 
            "text": "After creating client connection you can create rest request and populate parameters as below;  var request = client.Request( childrenJSON )\n                .AddQueryParameter( username ,  demo )\n                .AddQueryParameter( geonameId , id);  You may also set http headers with  AddHeader  method.   Some rest methods requires JSON or XML based body and you can specify the content of request with  AddObject  or  AddXml  methods.", 
            "title": "Creating Rest Request"
        }, 
        {
            "location": "/ag/pm/sc/rest/#fetching-rest-response", 
            "text": "After  Request  populated you can call the  Execute  method to execute and fetch  Response  object.  Execute  method by default does not perform any error check. If you want to be sure request has successfully executed please use  Expect  method to specify expected status code.  var response = request.Execute();\n\nif (response.StatusCode ==  OK ) {\n    var val = response.GetHeader( X-Header );\n    var obj = response.ToJson();\n}  You can also use  Get ,  Delete ,  Put ,  Post ,  Patch  methods to call service with corresponding method or you can manually set the  RestRequest.Method  before executing.  If service always returns JSON or XML you can use  ExecuteJson  or  ExecuteXml  method to fetch response as JSON object or XML navigator.  var object = request.ExecuteJson();\n\n// object.person.name;", 
            "title": "Fetching Rest Response"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/", 
            "text": "Overview\n\n\nRestClient\n \n$Rest\n.\nCreate\n \n(\n \nurl\n,\n \n[\nservice\n],\n \n[\nscopes\n],\n \n[\nidentity\n]\n \n)\n\n\n\n\n\nCreates a new client as \nRestClient\n instance. \n\n\nArguments\n\n\nString \nurl\n\n Target url\n\n\nString \nservice\n\nName of service to authenticate from\n\n\nString \nscope\n\nScope of rest operation\n\n\nString | Identity \nidentity\n\nIdentity to impersonate\n\n\nRemarks\n\n\n\n\nService, scope and identity parameters are optional. If not specified rest client is not authenticated.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nvar response = request.Execute();\n\n\n\n\nSee Also\n\n\n\n\nRestClient", 
            "title": "$Rest.Create"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/#overview", 
            "text": "RestClient   $Rest . Create   (   url ,   [ service ],   [ scopes ],   [ identity ]   )   Creates a new client as  RestClient  instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/#arguments", 
            "text": "String  url \n Target url  String  service \nName of service to authenticate from  String  scope \nScope of rest operation  String | Identity  identity \nIdentity to impersonate", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/#remarks", 
            "text": "Service, scope and identity parameters are optional. If not specified rest client is not authenticated.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nvar response = request.Execute();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/rest.create/#see-also", 
            "text": "RestClient", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/", 
            "text": "Overview\n\n\nstring\n \n$Templates\n.\nFormat\n \n(\n \nname\n,\n \nnode\n \n)\n\n\n\n\n\nReturns the result of template by specified xml node if found, otherwise returns null.\n\n\nArguments\n\n\nString \nname\n\n   Name of template \n\n\nXmlNode \nnode\n\n   Xml node to use as input. Can be null.\n\n\nRemarks\n\n\nContent of template can be in XSLT or \ndata templates\n format.\n\n\nExamples\n\n\nBasic Usage\n\n\nvar result = $Templates.Format(\nPurchase Order\n, $Xml.SelectSingle(\nOrder\n))\n\n\n\nSending Email\n\n\n$Messages.New(targetEmailAddress, \n    $Templates.Subject(\nPurchase Order\n), \n    $Templates.Format(\nPurchase Order\n, $Xml.SelectSingle(\nOrder\n))\n).Send();\n\n\n\nSee Also\n\n\n\n\n$Templates.Get\n\n\nData templates", 
            "title": "$Templates.Format"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/#overview", 
            "text": "string   $Templates . Format   (   name ,   node   )   Returns the result of template by specified xml node if found, otherwise returns null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/#arguments", 
            "text": "String  name \n   Name of template   XmlNode  node \n   Xml node to use as input. Can be null.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/#remarks", 
            "text": "Content of template can be in XSLT or  data templates  format.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/#examples", 
            "text": "Basic Usage  var result = $Templates.Format( Purchase Order , $Xml.SelectSingle( Order ))  Sending Email  $Messages.New(targetEmailAddress, \n    $Templates.Subject( Purchase Order ), \n    $Templates.Format( Purchase Order , $Xml.SelectSingle( Order ))\n).Send();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/templates.format/#see-also", 
            "text": "$Templates.Get  Data templates", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/", 
            "text": "Overview\n\n\nstring\n \n$Templates\n.\nGet\n \n(\n \nname\n \n)\n\n\n\n\n\nReturns the template content if found, otherwise null.\n\n\nArguments\n\n\nString \nname\n\n   Name of template \n\n\nRemarks\n\n\nExamples\n\n\nvar template = $Templates.Get(\nPurchase Order\n);\n\n\n\n\nSee Also", 
            "title": "$Templates.Get"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/#overview", 
            "text": "string   $Templates . Get   (   name   )   Returns the template content if found, otherwise null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/#arguments", 
            "text": "String  name \n   Name of template", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/#examples", 
            "text": "var template = $Templates.Get( Purchase Order );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/templates.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/", 
            "text": "Overview\n\n\nstring\n \n$Templates\n.\nSubject\n \n(\n \nname\n,\n \n[\n \nXmlNode\n \n]\n \n)\n\n\n\n\n\nReturns the template content if found, otherwise null.\n\n\nArguments\n\n\nString \nname\n\n   Name of template \n\n\nXmlNode \nnode\n\n   Xml node to use as input. Can be null.\n\n\nRemarks\n\n\nInput node is optional. If specified subject formatted by \ndata templates\n rules.\n\n\nExamples\n\n\n// if template subject is set to \nPurchase order {{Number}}\n\nvar result = $Templates.Subject(\nPurchase Order\n, $Xml.SelectSingle(\nOrder\n))\n// result contains the \nPurchase Order 12345\n\n\n\n\n\nSee Also\n\n\n\n\n$Templates.Get\n\n\n$Templates.Format", 
            "title": "$Templates.Subject"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/#overview", 
            "text": "string   $Templates . Subject   (   name ,   [   XmlNode   ]   )   Returns the template content if found, otherwise null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/#arguments", 
            "text": "String  name \n   Name of template   XmlNode  node \n   Xml node to use as input. Can be null.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/#remarks", 
            "text": "Input node is optional. If specified subject formatted by  data templates  rules.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/#examples", 
            "text": "// if template subject is set to  Purchase order {{Number}} \nvar result = $Templates.Subject( Purchase Order , $Xml.SelectSingle( Order ))\n// result contains the  Purchase Order 12345", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/templates.subject/#see-also", 
            "text": "$Templates.Get  $Templates.Format", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xml/", 
            "text": "Overview\n\n\nAllows to access process data model. $Xml is a instance of \nXmlNode\n object and points the root of workflow instance pool.\n\n\nBasic Usage\n\n\n$Xml.SelectAll(\n//Customer\n, function(customer) {\n  var id = customer.Evaluate(\nId\n); \n});\n\n\n\n\n$Xml object points different elements depending of where used.\n\n\n\n\n\n\n\n\nLocation\n\n\nRelated Elements\n\n\n\n\n\n\n\n\n\n\nPool Scripts\n\n\nPool Element\n\n\n\n\n\n\nRoute Validation\n\n\nPool Element\n\n\n\n\n\n\nValidation Rule\n\n\nControl Element\n\n\n\n\n\n\nFormatting Rule\n\n\nControl Element\n\n\n\n\n\n\n\n\nPool element is created at root of XML tree by default but sub-workflow instances may use any element in data tree.\n\n\nFor example assume a following data model for a product process.\n\n\nExample Data Model for Pool\n\n\nform\n\n  \nProduct\n\n    \nId\n1234\n/\nId\n\n    \nOrders\n\n      \nOrder\n\n        \nId\n4567\n/\nId\n\n        \nAmount\n1\n/\nAmount\n\n      \n/\nOrder\n\n      \nOrder\n\n        \nId\n8901\n/\nId\n\n        \nAmount\n2\n/\nAmount\n\n      \n/\nOrder\n\n    \n/\nOrders\n\n  \n/\nProduct\n\n\n/\nform\n\n\n\n\n\nIn product process $Xml will be point to \"Product\" element.\n\n\nFor Order process (as a sub-workflow of Product process) $Xml will point the \"Order\" element where is sub workflow is initiated.\n\n\nFor rules on \"Amount\" field $Xml will point \"Amount\" element.\n\n\nAccessing Pool Root\n\n\nBecause \nXml may point different elements in data model, in some cases you may need to access pool root element. You can use \"/form/Product\" xpath or \"\nXml may point different elements in data model, in some cases you may need to access pool root element. You can use \"/form/Product\" xpath or \"\npoolRoot\" variable if you need to access pool root.\n\n\nAccessing pool root with xpath\n\n\nvar productId = $Xml.Evaluate(\n/*/Product/Id\n);\n\n\n\n\nAccessing pool root with variable\n\n\nvar productId = $Xml.Evaluate(\n$poolRoot/Id\n);", 
            "title": "$Xml"
        }, 
        {
            "location": "/ag/pm/sc/xml/#overview", 
            "text": "Allows to access process data model. $Xml is a instance of  XmlNode  object and points the root of workflow instance pool.  Basic Usage  $Xml.SelectAll( //Customer , function(customer) {\n  var id = customer.Evaluate( Id ); \n});  $Xml object points different elements depending of where used.     Location  Related Elements      Pool Scripts  Pool Element    Route Validation  Pool Element    Validation Rule  Control Element    Formatting Rule  Control Element     Pool element is created at root of XML tree by default but sub-workflow instances may use any element in data tree.  For example assume a following data model for a product process.  Example Data Model for Pool  form \n   Product \n     Id 1234 / Id \n     Orders \n       Order \n         Id 4567 / Id \n         Amount 1 / Amount \n       / Order \n       Order \n         Id 8901 / Id \n         Amount 2 / Amount \n       / Order \n     / Orders \n   / Product  / form   In product process $Xml will be point to \"Product\" element.  For Order process (as a sub-workflow of Product process) $Xml will point the \"Order\" element where is sub workflow is initiated.  For rules on \"Amount\" field $Xml will point \"Amount\" element.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xml/#accessing-pool-root", 
            "text": "Because  Xml may point different elements in data model, in some cases you may need to access pool root element. You can use \"/form/Product\" xpath or \" Xml may point different elements in data model, in some cases you may need to access pool root element. You can use \"/form/Product\" xpath or \" poolRoot\" variable if you need to access pool root.  Accessing pool root with xpath  var productId = $Xml.Evaluate( /*/Product/Id );  Accessing pool root with variable  var productId = $Xml.Evaluate( $poolRoot/Id );", 
            "title": "Accessing Pool Root"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository/", 
            "text": "", 
            "title": "$XmlRepository Methods"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.delete/", 
            "text": "Overview\n\n\nvoid\n \n$XmlRepository\n.\nDelete\n \n(\n \ntargetPath\n \n)\n\n\n\nDeletes any existing data on specified path.\n\n\nArguments\n\n\nString \ntargetPath\n\n  Specifies the path to delete. If there is any data in the specified path, the child path will be deleted.\n\n\nRemarks\n\n\nThis method deletes nodes in specific path. If no path available or you need to delete specific nodes you can use \n$XmlRepository.Query\n method with \nxquery update\n statements.\n\n\nExamples\n\n\nDelete a Customer\n\n\n$XmlRepository.Delete( \nCustomers/\n + customerNode.Evaluate(\nId\n) );\n\n\n\nDelete all customers\n\n\n$XmlRepository.Delete( \nCustomers\n );", 
            "title": "$XmlRepository.Delete"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.delete/#overview", 
            "text": "void   $XmlRepository . Delete   (   targetPath   )  \nDeletes any existing data on specified path.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.delete/#arguments", 
            "text": "String  targetPath \n  Specifies the path to delete. If there is any data in the specified path, the child path will be deleted.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.delete/#remarks", 
            "text": "This method deletes nodes in specific path. If no path available or you need to delete specific nodes you can use  $XmlRepository.Query  method with  xquery update  statements.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.delete/#examples", 
            "text": "Delete a Customer  $XmlRepository.Delete(  Customers/  + customerNode.Evaluate( Id ) );  Delete all customers  $XmlRepository.Delete(  Customers  );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/", 
            "text": "Overview\n\n\nstring\n[]\n \n$XmlRepository\n.\nQuery\n \n(\n \nxquery\n,\n \n[\n \nparameters\n \n]\n \n)\n\n\n\nPerforms an xquery on repository and returns the results as string array.\n\n\nArguments\n\n\nString h__xqueryh__\n  Specifies the query to perform on the database. The syntax of the query is quite detailed. More information can be found on \nxquery standard\n page. \n\n\nObject h__parametersh__\n  Specifies the binding parameters on xquery string.\n\n\nRemarks\n\n\nIf query does not return any result than return value is empty array.\n\n\nExamples\n\n\nFind all customers\n\n\nvar results = $XmlRepository.Query(\n//Customer\n);\n$Xml.InnerXml( \nCustomer\n, results.join() );\n\n\n\nFind all customers\n\n\nvar results = $XmlRepository.Query(\n//Customer[Id=$id]\n, {\n   id : $Xml.Evaluate(\nCustomerId\n)\n });\n$Xml.InnerXml( \nCustomers\n, results.join() );\n\n\n\nFind all customers\n\n\n$XmlRepository.Query(\nfor $customer in //Customer[Id=$id] return replace value of node $customer/Name with \nLady Gaga\n, {\n   id : $Xml.Evaluate(\nCustomerId\n)\n});\n\n\n\nSee Also\n\n\n\n\n$XmlRepository.QueryXml", 
            "title": "$XmlRepository.Query"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/#overview", 
            "text": "string []   $XmlRepository . Query   (   xquery ,   [   parameters   ]   )  \nPerforms an xquery on repository and returns the results as string array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/#arguments", 
            "text": "String h__xqueryh__\n  Specifies the query to perform on the database. The syntax of the query is quite detailed. More information can be found on  xquery standard  page.   Object h__parametersh__\n  Specifies the binding parameters on xquery string.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/#remarks", 
            "text": "If query does not return any result than return value is empty array.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/#examples", 
            "text": "Find all customers  var results = $XmlRepository.Query( //Customer );\n$Xml.InnerXml(  Customer , results.join() );  Find all customers  var results = $XmlRepository.Query( //Customer[Id=$id] , {\n   id : $Xml.Evaluate( CustomerId )\n });\n$Xml.InnerXml(  Customers , results.join() );  Find all customers  $XmlRepository.Query( for $customer in //Customer[Id=$id] return replace value of node $customer/Name with  Lady Gaga , {\n   id : $Xml.Evaluate( CustomerId )\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.query/#see-also", 
            "text": "$XmlRepository.QueryXml", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/", 
            "text": "Overview\n\n\nXmlNode\n[]\n \n$XmlRepository\n.\nQueryXml\n \n(\n \nxquery\n \n)\n\n\n\nPerforms an xquery on repository and returns the results as xml node array.\n\n\nArguments\n\n\nString \nxquery\n\n  Specifies the query to perform on the database. The syntax of the query is quite detailed. More information can be found on \nxquery standard\n page. \n\n\nobject \nparameters\n\n  Specifies the binding parameters on xquery string.\n\n\nRemarks\n\n\nIf query does not return any result than return value is empty array.\n\n\nExamples\n\n\nFind all customers\n\n\nvar results = $XmlRepository.QueryXml(\n//Customer\n);\n$Xml.InnerXml( \nCustomer\n, results[0].Evaluate(\nId\n) );\n\n\n\nFind customer by id\n\n\nvar results = $XmlRepository.QueryXml(\n//Customer[Id=$id]\n, {\n   id : $Xml.Evaluate(\nCustomerId\n)\n });\n$Xml.InnerXml( \nCustomers\n, results[0].Evaluate(\nId\n) );\n\n\nBasically, you query your domain database.\n\n\nIf you want to query the database of a process, you can use the \ncollection\n keyword. You have to give the name of the database which is basically a GUID. For process databases, you can have that GUID by \n$Instance.ProcessId\n. \n\n\nQuerying another database\n\n\nvar results = $XmlRepository.QueryXml(\ncollection(\n49551ed3-6229-408a-aaaa-eb510463acad\n)//Customer[Id=$id]\n, {\n   id : $Xml.Evaluate(\nCustomerId\n)\n });\n$Xml.InnerXml( \nCustomers\n, results[0].Evaluate(\nId\n) );\n\n\n\nSee Also\n\n\n\n\n$XmlRepository.Query", 
            "title": "$XmlRepository.QueryXml"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/#overview", 
            "text": "XmlNode []   $XmlRepository . QueryXml   (   xquery   )  \nPerforms an xquery on repository and returns the results as xml node array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/#arguments", 
            "text": "String  xquery \n  Specifies the query to perform on the database. The syntax of the query is quite detailed. More information can be found on  xquery standard  page.   object  parameters \n  Specifies the binding parameters on xquery string.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/#remarks", 
            "text": "If query does not return any result than return value is empty array.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/#examples", 
            "text": "Find all customers  var results = $XmlRepository.QueryXml( //Customer );\n$Xml.InnerXml(  Customer , results[0].Evaluate( Id ) );  Find customer by id  var results = $XmlRepository.QueryXml( //Customer[Id=$id] , {\n   id : $Xml.Evaluate( CustomerId )\n });\n$Xml.InnerXml(  Customers , results[0].Evaluate( Id ) ); \nBasically, you query your domain database.  If you want to query the database of a process, you can use the  collection  keyword. You have to give the name of the database which is basically a GUID. For process databases, you can have that GUID by  $Instance.ProcessId .   Querying another database  var results = $XmlRepository.QueryXml( collection( 49551ed3-6229-408a-aaaa-eb510463acad )//Customer[Id=$id] , {\n   id : $Xml.Evaluate( CustomerId )\n });\n$Xml.InnerXml(  Customers , results[0].Evaluate( Id ) );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.queryxml/#see-also", 
            "text": "$XmlRepository.Query", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/", 
            "text": "Overview\n\n\nvoid\n \n$XmlRepository\n.\nSave\n \n(\n \ntargetPath\n,\n \nnode\n \n)\n\n\n\nSaves the specified node outer xml to the specified target path.\n\n\nArguments\n\n\nString \ntargetPath\n\n  Specifies the unique identifier of path to save. If there is any data in the specified path, the child path will be deleted and replaced with the new node value.\n\n\nPath argument is separated by '/' character to create tree structures.\n\n\nXmlNode \nnode\n\n  Specifies the xml node to be saved.\n\n\nRemarks\n\n\nExamples\n\n\nSaves the customer node to repository\n\n\n$XmlRepository.Save( \nCustomers/\n + customerNode.Evaluate(\nId\n), customerNode);\n\n\n\nSee Also", 
            "title": "$XmlRepository.Save"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/#overview", 
            "text": "void   $XmlRepository . Save   (   targetPath ,   node   )  \nSaves the specified node outer xml to the specified target path.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/#arguments", 
            "text": "String  targetPath \n  Specifies the unique identifier of path to save. If there is any data in the specified path, the child path will be deleted and replaced with the new node value.  Path argument is separated by '/' character to create tree structures.  XmlNode  node \n  Specifies the xml node to be saved.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/#examples", 
            "text": "Saves the customer node to repository  $XmlRepository.Save(  Customers/  + customerNode.Evaluate( Id ), customerNode);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlrepository.save/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar/", 
            "text": "Performs date based operations like adding or calculating differences by rules.\n\n\nDefault calendar instance exposed as \n$Calendar\n variable that executed by domain rules. Default domain rules are includes Monday to Friday and 9:00 AM - 18:00 PM hours. All date calculations performed within this included time range.\n\n\nAlso you can use \nCalendar.GetStandardCalendar\n to use a calendar with no rules or \nCalendar.GetWeekendCalendar\n to include only Monday to Friday days without no hour limitation.", 
            "title": "Calendar Methods"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nAdd\n \n(\n \ndateTime\n,\n \nhours\n \n)\n\n\n\nAdds specified number of hours to specified date time value and returns.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \nhours\n\n  Specifies the how many hours will be added to dateTime parameter.\n\n\nRemarks\n\n\nExamples\n\n\nvar newDate = $Calendar.Add($Calendar.Today, 4); //adds 4 hours to the current date and returns the result as a DateTimeOffset object.\n\n\n\n\nSee Also\n\n\n\n\nCalendar", 
            "title": "Calendar.Add"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/#overview", 
            "text": "DateTimeOffset   Calendar . Add   (   dateTime ,   hours   )  \nAdds specified number of hours to specified date time value and returns.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  hours \n  Specifies the how many hours will be added to dateTime parameter.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/#examples", 
            "text": "var newDate = $Calendar.Add($Calendar.Today, 4); //adds 4 hours to the current date and returns the result as a DateTimeOffset object.", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.add/#see-also", 
            "text": "Calendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nAddAsync\n \n(\n \ndateTime\n,\n \nhours\n,\n \n[\ncallback\n]\n \n)\n\n\n\nAdds specified number of hours to specified date time value and returns.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \nhours\n\n  Specifies the how many hours will be added to dateTime parameter.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n//adds 4 hours to the current date and returns the result as a DateTimeOffset object.\n$Calendar.AddAsync($Calendar.Today, 4).then(function(newDate) {\n    console.log(newDate);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.AddDaysAsync\n\n\nCalendar.AddMonthsAsync\n\n\nCalendar.AddYearsAsync\n\n\nCalendar.GetTodayAsync\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.AddAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . AddAsync   (   dateTime ,   hours ,   [ callback ]   )  \nAdds specified number of hours to specified date time value and returns.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  hours \n  Specifies the how many hours will be added to dateTime parameter.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/#examples", 
            "text": "//adds 4 hours to the current date and returns the result as a DateTimeOffset object.\n$Calendar.AddAsync($Calendar.Today, 4).then(function(newDate) {\n    console.log(newDate);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addasync/#see-also", 
            "text": "Calendar  Calendar.AddDaysAsync  Calendar.AddMonthsAsync  Calendar.AddYearsAsync  Calendar.GetTodayAsync  Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nAddDays\n \n(\n \ndateTime\n,\n \ndays\n \n)\n\n\n\nAdds specified number of days to specified date time value and returns next valid date time.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \ndays\n\n  Specifies the how many days will be added to dateTime parameter.\n\n\nRemarks\n\n\n\n\nThis method add days to specified date parameter and returns the next valid date by calendar rules. If you want to add days by validating each day calendar rules please use \nCalendar.AddTimeSpan\n method. (Ex: $Calendar.AddTimeSpan(\"4.00:00:00\")\n\n\n\n\nExamples\n\n\nvar newDate = $Calendar.AddDays($Calendar.Today, 2); //adds 2 days to the current date and returns DateTimeOffset object.\n\n\n\n\nSee Also\n\n\n\n\nCalendar", 
            "title": "Calendar.AddDays"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/#overview", 
            "text": "DateTimeOffset   Calendar . AddDays   (   dateTime ,   days   )  \nAdds specified number of days to specified date time value and returns next valid date time.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  days \n  Specifies the how many days will be added to dateTime parameter.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/#remarks", 
            "text": "This method add days to specified date parameter and returns the next valid date by calendar rules. If you want to add days by validating each day calendar rules please use  Calendar.AddTimeSpan  method. (Ex: $Calendar.AddTimeSpan(\"4.00:00:00\")", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/#examples", 
            "text": "var newDate = $Calendar.AddDays($Calendar.Today, 2); //adds 2 days to the current date and returns DateTimeOffset object.", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddays/#see-also", 
            "text": "Calendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nAddDaysAsync\n \n(\n \ndateTime\n,\n \ndays\n,\n \n[\ncallback\n]\n \n)\n\n\n\nAdds specified number of days to specified date time value and returns.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \ndays\n\n  Specifies the how many days will be added to dateTime parameter.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n//adds 2 days to the current date and returns DateTimeOffset object.\n$Calendar.AddDaysAsync($Calendar.Today, 2).then(function(newDate) {\n    console.log(newDate);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.AddMonthsAsync\n\n\nCalendar.AddYearsAsync\n\n\nCalendar.GetTodayAsync\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.AddDaysAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . AddDaysAsync   (   dateTime ,   days ,   [ callback ]   )  \nAdds specified number of days to specified date time value and returns.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  days \n  Specifies the how many days will be added to dateTime parameter.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/#examples", 
            "text": "//adds 2 days to the current date and returns DateTimeOffset object.\n$Calendar.AddDaysAsync($Calendar.Today, 2).then(function(newDate) {\n    console.log(newDate);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.adddaysasync/#see-also", 
            "text": "Calendar  Calendar.AddMonthsAsync  Calendar.AddYearsAsync  Calendar.GetTodayAsync  Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nAddMonths\n \n(\n \ndateTime\n,\n \nmonths\n \n)\n\n\n\nAdds specified number of months to specified date time value and returns.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \nmonths\n\n  Specifies the how many months will be added to dateTime parameter.\n\n\nRemarks\n\n\nExamples\n\n\nvar newDate = $Calendar.AddMonths($Calendar.Today, 2); //adds 2 months to the current date and returns DateTimeOffset object.\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.Add\n\n\nCalendar.AddDays", 
            "title": "Calendar.AddMonths"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/#overview", 
            "text": "DateTimeOffset   Calendar . AddMonths   (   dateTime ,   months   )  \nAdds specified number of months to specified date time value and returns.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  months \n  Specifies the how many months will be added to dateTime parameter.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/#examples", 
            "text": "var newDate = $Calendar.AddMonths($Calendar.Today, 2); //adds 2 months to the current date and returns DateTimeOffset object.", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonths/#see-also", 
            "text": "Calendar  Calendar.Add  Calendar.AddDays", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nAddMonthsAsync\n \n(\n \ndateTime\n,\n \nmonths\n,\n \n[\ncallback\n]\n \n)\n\n\n\nAdds specified number of months to specified date time value and returns.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \nmonths\n\n  Specifies the how many months will be added to dateTime parameter.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n//adds 2 months to the current date and returns DateTimeOffset object.\n$Calendar.AddMonthsAsync($Calendar.Today, 2).then(function(newDate) {\n    console.log(newDate);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.AddAsync\n\n\nCalendar.AddDaysAsync\n\n\nCalendar.AddMonthsAsync\n\n\nCalendar.AddYearsAsync\n\n\nCalendar.GetTodayAsync\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.AddMonthsAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . AddMonthsAsync   (   dateTime ,   months ,   [ callback ]   )  \nAdds specified number of months to specified date time value and returns.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  months \n  Specifies the how many months will be added to dateTime parameter.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/#examples", 
            "text": "//adds 2 months to the current date and returns DateTimeOffset object.\n$Calendar.AddMonthsAsync($Calendar.Today, 2).then(function(newDate) {\n    console.log(newDate);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addmonthsasync/#see-also", 
            "text": "Calendar  Calendar.AddAsync  Calendar.AddDaysAsync  Calendar.AddMonthsAsync  Calendar.AddYearsAsync  Calendar.GetTodayAsync  Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nAddTimeSpan\n \n(\n \ndateTime\n,\n \ntime\n \n)\n\n\n\nReturns sum of specified dateTime and timespan string.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nString \ntime\n\n  The time parameter is in the \"d.hh\nss\" format\n\n\nRemarks\n\n\nPlease make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the \n$Calendar\n object.\n\n\nExamples\n\n\n//Adds exactly 1 day, 2 hours, 30 minutes and 45 seconds to the current time.\nvar newDate = $Calendar.StandardCalendar.AddTimeSpan($Calendar.Today, \n1.02:30:45\n);\n\n\n\n\nSee Also\n\n\n\n\nCalendar.Add\n\n\nCalendar.Subtract", 
            "title": "Calendar.AddTimeSpan"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/#overview", 
            "text": "DateTimeOffset   Calendar . AddTimeSpan   (   dateTime ,   time   )  \nReturns sum of specified dateTime and timespan string.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  String  time \n  The time parameter is in the \"d.hh ss\" format", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/#remarks", 
            "text": "Please make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the  $Calendar  object.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/#examples", 
            "text": "//Adds exactly 1 day, 2 hours, 30 minutes and 45 seconds to the current time.\nvar newDate = $Calendar.StandardCalendar.AddTimeSpan($Calendar.Today,  1.02:30:45 );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespan/#see-also", 
            "text": "Calendar.Add  Calendar.Subtract", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nAddTimeSpanAsync\n \n(\n \ndateTime\n,\n \ntime\n,\n \n[\ncallback\n]\n \n)\n\n\n\nReturns sum of specified dateTime and timespan string.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nString \ntime\n\n  The time parameter is in the \"d.hh\nss\" format\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nPlease make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the \n$Calendar\n object.\n\n\nExamples\n\n\n//Adds exactly 1 day, 2 hours, 30 minutes and 45 seconds to the current time.\n$Calendar.StandardCalendar.AddTimeSpanAsync(new DateTimeOffset(), \n1.02:30:45\n).then(function(newDate) {\n    console.log(newDate);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar.AddAsync\n\n\nCalendar.AddDaysAsync\n\n\nCalendar.AddMonthsAsync\n\n\nCalendar.AddYearsAsync\n\n\nCalendar.GetTodayAsync\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.AddTimeSpanAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . AddTimeSpanAsync   (   dateTime ,   time ,   [ callback ]   )  \nReturns sum of specified dateTime and timespan string.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  String  time \n  The time parameter is in the \"d.hh ss\" format  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/#remarks", 
            "text": "Please make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the  $Calendar  object.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/#examples", 
            "text": "//Adds exactly 1 day, 2 hours, 30 minutes and 45 seconds to the current time.\n$Calendar.StandardCalendar.AddTimeSpanAsync(new DateTimeOffset(),  1.02:30:45 ).then(function(newDate) {\n    console.log(newDate);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addtimespanasync/#see-also", 
            "text": "Calendar.AddAsync  Calendar.AddDaysAsync  Calendar.AddMonthsAsync  Calendar.AddYearsAsync  Calendar.GetTodayAsync  Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nAddYears\n \n(\n \ndateTime\n,\n \nyears\n \n)\n\n\n\nReturns sum of specified dateTime and years.\n\n\nArguments\n\n\n$paramType \nArgument Name\n\nSpecifies the base date time value.\n\n\nNumber \nyears\n\nSpecifies the how many years will be added to dateTime parameter.\n\n\nRemarks\n\n\nExamples\n\n\nvar newDate = $Calendar.AddYears($Calendar.Today, 3); //adds 3 years to the current date and returns DateTimeOffset object.\n\n\n\n\nSee Also\n\n\n\n\nCalendar.Add\n\n\nCalendar.AddDays\n\n\nCalendar.AddMonths", 
            "title": "Calendar.AddYears"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/#overview", 
            "text": "DateTimeOffset   Calendar . AddYears   (   dateTime ,   years   )  \nReturns sum of specified dateTime and years.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/#arguments", 
            "text": "$paramType  Argument Name \nSpecifies the base date time value.  Number  years \nSpecifies the how many years will be added to dateTime parameter.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/#examples", 
            "text": "var newDate = $Calendar.AddYears($Calendar.Today, 3); //adds 3 years to the current date and returns DateTimeOffset object.", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyears/#see-also", 
            "text": "Calendar.Add  Calendar.AddDays  Calendar.AddMonths", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nAddYearsAsync\n \n(\n \ndateTime\n,\n \nyears\n,\n \n[\ncallback\n]\n \n)\n\n\n\nReturns sum of specified dateTime and years.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nNumber \nyears\n\n  Specifies the how many years will be added to dateTime parameter.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n//adds 3 years to the current date and returns DateTimeOffset object.\n$Calendar.AddYearsAsync(new DateTimeOffset(), 3, function(newDate) {\n    console.log(newDate);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar.AddAsync\n\n\nCalendar.AddDaysAsync\n\n\nCalendar.AddMonthsAsync\n\n\nCalendar.GetTodayAsync\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.AddYearsAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . AddYearsAsync   (   dateTime ,   years ,   [ callback ]   )  \nReturns sum of specified dateTime and years.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  Number  years \n  Specifies the how many years will be added to dateTime parameter.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/#examples", 
            "text": "//adds 3 years to the current date and returns DateTimeOffset object.\n$Calendar.AddYearsAsync(new DateTimeOffset(), 3, function(newDate) {\n    console.log(newDate);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.addyearsasync/#see-also", 
            "text": "Calendar.AddAsync  Calendar.AddDaysAsync  Calendar.AddMonthsAsync  Calendar.GetTodayAsync  Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nChangeTimeZone\n \n(\n \ndateTime\n,\n \ntimeZone\n \n)\n\n\n\n Returns a new date time of specified date time at the zone offset.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n Specifies the base date time value.\n\n\nString \ntimeZone\n\nSpecifies the new time zone info for date value in \"hh:mm\" format.\n\n\nRemarks\n\n\nExamples\n\n\nvar currentDate = $Calendar.Today;\n$Xml.SetValue(\nCurrentDate\n, currentDate);\n$Xml.SetValue(\nChangedDate\n, $Calendar.ChangeTimeZone(currentDate, \n02:00\n));\n\n\nResult is \n\n\nCurrentDate\n2017-01-25T15:42:47.5389149Z\n/\nCurrentDate\n\n\nChangedDate\n2017-01-25T17:42:47.5389149+02:00\n/\nChangedDate\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar", 
            "title": "Calendar.ChangeTimeZone"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/#overview", 
            "text": "DateTimeOffset   Calendar . ChangeTimeZone   (   dateTime ,   timeZone   )  \n Returns a new date time of specified date time at the zone offset.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/#arguments", 
            "text": "DateTimeOffset  dateTime \n Specifies the base date time value.  String  timeZone \nSpecifies the new time zone info for date value in \"hh:mm\" format.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/#examples", 
            "text": "var currentDate = $Calendar.Today;\n$Xml.SetValue( CurrentDate , currentDate);\n$Xml.SetValue( ChangedDate , $Calendar.ChangeTimeZone(currentDate,  02:00 )); \nResult is   CurrentDate 2017-01-25T15:42:47.5389149Z / CurrentDate  ChangedDate 2017-01-25T17:42:47.5389149+02:00 / ChangedDate", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezone/#see-also", 
            "text": "Calendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nChangeTimeZoneAsync\n \n(\n \ndateTime\n,\n \ntimeZone\n,\n \n[\ncallback\n]\n \n)\n\n\n\nReturns a new date time of specified date time at the zone offset.\n\n\nArguments\n\n\nDateTimeOffset \ndateTime\n\n  Specifies the base date time value.\n\n\nString \ntimeZone\n\n  Specifies the new time zone info for date value in \"hh:mm\" format.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\nExamples\n\n\n$Xml.SetValue(\nCurrentDate\n, new DateTimeOffset());\n\n$Calendar.ChangeTimeZoneAsync(new DateTimeOffset(), \n02:00\n).then(function(newDate) {\n    $Xml.SetValue(\nChangedDate\n, newDate);\n});\n\n\nResult is \n\n\nCurrentDate\n2017-01-25T15:42:47.5389149Z\n/\nCurrentDate\n\n\nChangedDate\n2017-01-25T17:42:47.5389149+02:00\n/\nChangedDate\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar", 
            "title": "Calendar.ChangeTimeZoneAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . ChangeTimeZoneAsync   (   dateTime ,   timeZone ,   [ callback ]   )  \nReturns a new date time of specified date time at the zone offset.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/#arguments", 
            "text": "DateTimeOffset  dateTime \n  Specifies the base date time value.  String  timeZone \n  Specifies the new time zone info for date value in \"hh:mm\" format.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/#examples", 
            "text": "$Xml.SetValue( CurrentDate , new DateTimeOffset());\n\n$Calendar.ChangeTimeZoneAsync(new DateTimeOffset(),  02:00 ).then(function(newDate) {\n    $Xml.SetValue( ChangedDate , newDate);\n}); \nResult is   CurrentDate 2017-01-25T15:42:47.5389149Z / CurrentDate  ChangedDate 2017-01-25T17:42:47.5389149+02:00 / ChangedDate", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.changetimezoneasync/#see-also", 
            "text": "Calendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nGetDateTime\n \n(\n \n[\nrelativeDate\n],\n \n[\noffset\n]\n \n)\n\n\n\nReturns a date time offset by relatively at specified offset. \n\n\nArguments\n\n\nString \nrelativeDate\n\n  Relative date value. If set to empty or null, offset value is returned. \n\n\nDateTimeOffset \noffset\n\n  Offset date time value. If omitted current date time value is used.\n\n\nRemarks\n\n\n\n\nPlease refer to Relative Date format for more information. \n\n\nRelative date expression used to perform date calculation by relative points in time. Expression can be specified as following pattern;\n\n\n\n\n[Amount] Unit, [ [Amount] Unit ], ....\n\n\nYou can find an example relative date expression in below.\n\n\n2 Month, 3 Day\n\n\nFollowing table can be used to specify units. Example current time as \"2017-05-02T14:30:00+02:00\"\n\n\n\n\n\n\n\n\nUnit\n\n\nDescription\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nMinute\n\n\nMinutes\n\n\n5 Minute\n\n\n2017-05-02T14:35:00+02:00\n\n\n\n\n\n\nHour\n\n\nHours\n\n\n4 Hour\n\n\n2017-05-02T18:35:00+02:00\n\n\n\n\n\n\nDay\n\n\nDays\n\n\n2 Day\n\n\n2017-05-04T14:30:00+02:00\n\n\n\n\n\n\nBDay\n\n\nBeginning of Day\n\n\n4 BDay\n\n\n2017-05-08T00:00:00+02:00\n\n\n\n\n\n\nEDay\n\n\nEnd of Day\n\n\nEDay\n\n\n2017-05-02T23:59:59+02:00\n\n\n\n\n\n\nMonth\n\n\nMonths\n\n\n1 Month\n\n\n2017-06-02T14:30:00+02:00\n\n\n\n\n\n\nBMonth\n\n\nBeginning of Month\n\n\n2 BMonth\n\n\n2017-07-01T00:00:00+02:00\n\n\n\n\n\n\nEMonth\n\n\nEnd of Month\n\n\n1 EMonth\n\n\n2017-06-30T23:59:59+02:00\n\n\n\n\n\n\nYear\n\n\nYears\n\n\n1 Year\n\n\n2018-05-02T14:30:00+02:00\n\n\n\n\n\n\nBYear\n\n\nBeginning of Year\n\n\n2 BYear\n\n\n2019-01-01T00:00:00+02:00\n\n\n\n\n\n\nEYear\n\n\nEnd of Year\n\n\nEYear\n\n\n2017-12-31T23:59:59+02:00\n\n\n\n\n\n\n\n\nExamples\n\n\n$Xml.SetValue(\nStart\n, $Calendar.GetDateTime(\nBMonth\n));\n\n$Xml.SetValue(\nEnd\n, $Calendar.GetDateTime(\n2 Day, 4 Hour\n));\n\n\n\n\nSee Also", 
            "title": "Calendar.GetDateTime"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/#overview", 
            "text": "Promise DateTimeOffset   Calendar . GetDateTime   (   [ relativeDate ],   [ offset ]   )  \nReturns a date time offset by relatively at specified offset.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/#arguments", 
            "text": "String  relativeDate \n  Relative date value. If set to empty or null, offset value is returned.   DateTimeOffset  offset \n  Offset date time value. If omitted current date time value is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/#remarks", 
            "text": "Please refer to Relative Date format for more information.   Relative date expression used to perform date calculation by relative points in time. Expression can be specified as following pattern;   [Amount] Unit, [ [Amount] Unit ], .... \nYou can find an example relative date expression in below.  2 Month, 3 Day \nFollowing table can be used to specify units. Example current time as \"2017-05-02T14:30:00+02:00\"     Unit  Description  Example  Result      Minute  Minutes  5 Minute  2017-05-02T14:35:00+02:00    Hour  Hours  4 Hour  2017-05-02T18:35:00+02:00    Day  Days  2 Day  2017-05-04T14:30:00+02:00    BDay  Beginning of Day  4 BDay  2017-05-08T00:00:00+02:00    EDay  End of Day  EDay  2017-05-02T23:59:59+02:00    Month  Months  1 Month  2017-06-02T14:30:00+02:00    BMonth  Beginning of Month  2 BMonth  2017-07-01T00:00:00+02:00    EMonth  End of Month  1 EMonth  2017-06-30T23:59:59+02:00    Year  Years  1 Year  2018-05-02T14:30:00+02:00    BYear  Beginning of Year  2 BYear  2019-01-01T00:00:00+02:00    EYear  End of Year  EYear  2017-12-31T23:59:59+02:00", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/#examples", 
            "text": "$Xml.SetValue( Start , $Calendar.GetDateTime( BMonth ));\n\n$Xml.SetValue( End , $Calendar.GetDateTime( 2 Day, 4 Hour ));", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetime/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/", 
            "text": "Overview\n\n\nPromise\nDateTimeOffset\n \nCalendar\n.\nGetDateTimeAsync\n \n(\n \n[\nrelativeDate\n],\n \n[\noffset\n],\n \n[\ncallback\n]\n \n)\n\n\n\nReturns a date time offset by relatively at specified offset. \n\n\nArguments\n\n\nString \nrelativeDate\n\n  Relative date value. If set to empty or null, offset value is returned.\n\n\nDateTimeOffset \noffset\n\n  Offset date time value. If omitted current date time value is used.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\n\n\nPlease refer to Relative Date format for more information.\n\n\nRelative date expression used to perform date calculation by relative points in time. Expression can be specified as following pattern;\n\n\n\n\n[Amount] Unit, [ [Amount] Unit ], ....\n\n\nYou can find an example relative date expression in below.\n\n\n2 Month, 3 Day\n\n\nFollowing table can be used to specify units. Example current time as \"2017-05-02T14:30:00+02:00\"\n\n\n\n\n\n\n\n\nUnit\n\n\nDescription\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nMinute\n\n\nMinutes\n\n\n5 Minute\n\n\n2017-05-02T14:35:00+02:00\n\n\n\n\n\n\nHour\n\n\nHours\n\n\n4 Hour\n\n\n2017-05-02T18:35:00+02:00\n\n\n\n\n\n\nDay\n\n\nDays\n\n\n2 Day\n\n\n2017-05-04T14:30:00+02:00\n\n\n\n\n\n\nBDay\n\n\nBeginning of Day\n\n\n4 BDay\n\n\n2017-05-08T00:00:00+02:00\n\n\n\n\n\n\nEDay\n\n\nEnd of Day\n\n\nEDay\n\n\n2017-05-02T23:59:59+02:00\n\n\n\n\n\n\nMonth\n\n\nMonths\n\n\n1 Month\n\n\n2017-06-02T14:30:00+02:00\n\n\n\n\n\n\nBMonth\n\n\nBeginning of Month\n\n\n2 BMonth\n\n\n2017-07-01T00:00:00+02:00\n\n\n\n\n\n\nEMonth\n\n\nEnd of Month\n\n\n1 EMonth\n\n\n2017-06-30T23:59:59+02:00\n\n\n\n\n\n\nYear\n\n\nYears\n\n\n1 Year\n\n\n2018-05-02T14:30:00+02:00\n\n\n\n\n\n\nBYear\n\n\nBeginning of Year\n\n\n2 BYear\n\n\n2019-01-01T00:00:00+02:00\n\n\n\n\n\n\nEYear\n\n\nEnd of Year\n\n\nEYear\n\n\n2017-12-31T23:59:59+02:00\n\n\n\n\n\n\n\n\nExamples\n\n\n$Calendar.GetDateTimeAsync(\nBMonth\n).then(function(date) {\n    $Xml.SetValue(\nStart\n,date);\n});\n\n$Calendar.GetDateTimeAsync(\n2 Day, 4 Hour\n).then(function(date) {\n    $Xml.SetValue(\nEnd\n,date);\n});\n\n\n\n\nSee Also", 
            "title": "Calendar.GetDateTimeAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/#overview", 
            "text": "Promise DateTimeOffset   Calendar . GetDateTimeAsync   (   [ relativeDate ],   [ offset ],   [ callback ]   )  \nReturns a date time offset by relatively at specified offset.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/#arguments", 
            "text": "String  relativeDate \n  Relative date value. If set to empty or null, offset value is returned.  DateTimeOffset  offset \n  Offset date time value. If omitted current date time value is used.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/#remarks", 
            "text": "Please refer to Relative Date format for more information.  Relative date expression used to perform date calculation by relative points in time. Expression can be specified as following pattern;   [Amount] Unit, [ [Amount] Unit ], .... \nYou can find an example relative date expression in below.  2 Month, 3 Day \nFollowing table can be used to specify units. Example current time as \"2017-05-02T14:30:00+02:00\"     Unit  Description  Example  Result      Minute  Minutes  5 Minute  2017-05-02T14:35:00+02:00    Hour  Hours  4 Hour  2017-05-02T18:35:00+02:00    Day  Days  2 Day  2017-05-04T14:30:00+02:00    BDay  Beginning of Day  4 BDay  2017-05-08T00:00:00+02:00    EDay  End of Day  EDay  2017-05-02T23:59:59+02:00    Month  Months  1 Month  2017-06-02T14:30:00+02:00    BMonth  Beginning of Month  2 BMonth  2017-07-01T00:00:00+02:00    EMonth  End of Month  1 EMonth  2017-06-30T23:59:59+02:00    Year  Years  1 Year  2018-05-02T14:30:00+02:00    BYear  Beginning of Year  2 BYear  2019-01-01T00:00:00+02:00    EYear  End of Year  EYear  2017-12-31T23:59:59+02:00", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/#examples", 
            "text": "$Calendar.GetDateTimeAsync( BMonth ).then(function(date) {\n    $Xml.SetValue( Start ,date);\n});\n\n$Calendar.GetDateTimeAsync( 2 Day, 4 Hour ).then(function(date) {\n    $Xml.SetValue( End ,date);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getdatetimeasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/", 
            "text": "Overview\n\n\nCalendar\n \nCalendar\n.\nGetStandardCalendar\n \n(\n \n)\n\n\n\nGets the basic calendar without any rule restriction on date time range.\n\n\nArguments\n\n\nNo argument required.\n\n\nRemarks\n\n\nExamples\n\n\n$Calendar.GetStandardCalendar().AddDays(new DateTimeOffset(),2).then(function(date) {\n    $Xml.SetValue(\nDate\n, date);\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar.GetWeekendCalendar", 
            "title": "Calendar.GetStandardCalendar"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/#overview", 
            "text": "Calendar   Calendar . GetStandardCalendar   (   )  \nGets the basic calendar without any rule restriction on date time range.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/#arguments", 
            "text": "No argument required.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/#examples", 
            "text": "$Calendar.GetStandardCalendar().AddDays(new DateTimeOffset(),2).then(function(date) {\n    $Xml.SetValue( Date , date);\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getstandardcalendar/#see-also", 
            "text": "Calendar.GetWeekendCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/", 
            "text": "Overview\n\n\nstring\n \nCalendar\n.\nGetTimeZone\n \n(\n \nvalue\n \n)\n\n\n\n Returns timezone information of the specified target date time.\n\n\nArguments\n\n\nDateTimeOffset \nvalue\n\n  Value to extract time zone information\n\n\nRemarks\n\n\nReturn value is \"hh:mm\" time span format.\n\n\nExamples\n\n\nvar currentDate = $Calendar.Today;\n$Xml.SetValue(\nCurrentDate\n, currentDate);\n$Xml.SetValue(\nChangedDate\n, $Calendar.ChangeTimeZone(currentDate, \n02:00\n));\n\n$Xml.SetValue(\nResult\n, $Calendar.GetTimeZone($Xml.EvaluateDateTime(\nChangedDate\n)));\n\n\n\n\nResult is \n\n\nCurrentDate\n2017-01-25T15:47:56.4198506Z\n/\nCurrentDate\n\n\nChangedDate\n2017-01-25T17:47:56.4198506+02:00\n/\nChangedDate\n\n\nResult\n2:0\n/\nResult\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.ChangeTimeZone", 
            "title": "Calendar.GetTimeZone"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/#overview", 
            "text": "string   Calendar . GetTimeZone   (   value   )  \n Returns timezone information of the specified target date time.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/#arguments", 
            "text": "DateTimeOffset  value \n  Value to extract time zone information", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/#remarks", 
            "text": "Return value is \"hh:mm\" time span format.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/#examples", 
            "text": "var currentDate = $Calendar.Today;\n$Xml.SetValue( CurrentDate , currentDate);\n$Xml.SetValue( ChangedDate , $Calendar.ChangeTimeZone(currentDate,  02:00 ));\n\n$Xml.SetValue( Result , $Calendar.GetTimeZone($Xml.EvaluateDateTime( ChangedDate )));  Result is   CurrentDate 2017-01-25T15:47:56.4198506Z / CurrentDate  ChangedDate 2017-01-25T17:47:56.4198506+02:00 / ChangedDate  Result 2:0 / Result", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettimezone/#see-also", 
            "text": "Calendar  Calendar.ChangeTimeZone", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nGetToday\n \n(\n \n[\n \ntimezone\n \n]\n \n)\n\n\n\n Returns the current date in the specified time zone.\n\n\nArguments\n\n\nString \ntimezone\n\n Specifies the target time zone for current date in \"hh:mm\" format. Optional, if not specified system timezone information is used.\n\n\nRemarks\n\n\nYou may use toISOString() method for comparisons on Xml Database. Such as;\n\n\ndate comparison\n\n\n$Calendar.GetToday(\n).toISOString();\n\n\n\n\nExamples\n\n\n$Xml.SetValue(\nDate1\n, $Calendar.GetToday(\n));\n$Xml.SetValue(\nDate2\n, $Calendar.GetToday(\n02:00\n));\n\n\n\n\nResult is \n\n\nDate1\n2017-01-25T16:04:40.5625645Z\n/\nDate1\n\n\nDate2\n2017-01-25T18:04:40.5625645+02:00\n/\nDate2\n\n\n\n\n\nSee Also", 
            "title": "Calendar.GetToday"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/#overview", 
            "text": "DateTimeOffset   Calendar . GetToday   (   [   timezone   ]   )  \n Returns the current date in the specified time zone.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/#arguments", 
            "text": "String  timezone \n Specifies the target time zone for current date in \"hh:mm\" format. Optional, if not specified system timezone information is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/#remarks", 
            "text": "You may use toISOString() method for comparisons on Xml Database. Such as;  date comparison  $Calendar.GetToday( ).toISOString();", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/#examples", 
            "text": "$Xml.SetValue( Date1 , $Calendar.GetToday( ));\n$Xml.SetValue( Date2 , $Calendar.GetToday( 02:00 ));  Result is   Date1 2017-01-25T16:04:40.5625645Z / Date1  Date2 2017-01-25T18:04:40.5625645+02:00 / Date2", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettoday/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nCalendar\n.\nGetTodayAsync\n \n(\n \n[\n \ntimezone\n \n],\n \n[\ncallback\n]\n \n)\n\n\n\n Returns the current date in the specified time zone.\n\n\nArguments\n\n\nString \ntimezone\n\n Specifies the target time zone for current date in \"hh:mm\" format. Optional, if not specified system timezone information is used.\n\n\nFunction \ncallback\n\n  Callback to execute. Optional.\n\n\nRemarks\n\n\n\n\nYou may use toISOString() method for comparisons on Xml Database. Such as;\n\n\n\n\ndate comparison\n\n\n$Calendar.GetTodayAsync().then(function(today) {\n    if ( $Xml.Evaluate(\nOldDate\n) \n \ntoday.toISOString\n()\n \n)\n \n{\n\n        \n//\n \n...\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\nYou can use \nCalendar.GetDateTime\n or \nCalendar.GetDateTimeAsync\n methods as alternative to get relative date time values.\n\n\n\n\nExamples\n\n\n$Calendar.GetTodayAsync().then(function(date) {\n    $Xml.SetValue(\nDate1\n, date);\n});\n$Calendar.GetTodayAsync(\n02:00\n).then(function(date) {\n    $Xml.SetValue(\nDate2\n, date);\n});\n\n\n\n\nResult is \n\n\nDate1\n2017-01-25T16:04:40.5625645Z\n/\nDate1\n\n\nDate2\n2017-01-25T18:04:40.5625645+02:00\n/\nDate2\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar.GetDateTime\n\n\nCalendar.GetDateTimeAsync", 
            "title": "Calendar.GetTodayAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/#overview", 
            "text": "DateTimeOffset   Calendar . GetTodayAsync   (   [   timezone   ],   [ callback ]   )  \n Returns the current date in the specified time zone.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/#arguments", 
            "text": "String  timezone \n Specifies the target time zone for current date in \"hh:mm\" format. Optional, if not specified system timezone information is used.  Function  callback \n  Callback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/#remarks", 
            "text": "You may use toISOString() method for comparisons on Xml Database. Such as;   date comparison  $Calendar.GetTodayAsync().then(function(today) {\n    if ( $Xml.Evaluate( OldDate )    today.toISOString ()   )   { \n         //   ... \n     }  });    You can use  Calendar.GetDateTime  or  Calendar.GetDateTimeAsync  methods as alternative to get relative date time values.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/#examples", 
            "text": "$Calendar.GetTodayAsync().then(function(date) {\n    $Xml.SetValue( Date1 , date);\n});\n$Calendar.GetTodayAsync( 02:00 ).then(function(date) {\n    $Xml.SetValue( Date2 , date);\n});  Result is   Date1 2017-01-25T16:04:40.5625645Z / Date1  Date2 2017-01-25T18:04:40.5625645+02:00 / Date2", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.gettodayasync/#see-also", 
            "text": "Calendar.GetDateTime  Calendar.GetDateTimeAsync", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getweekendcalendar/", 
            "text": "Overview\n\n\nCalendar\n \nCalendar\n.\nGetWeekendCalendar\n \n(\n \n)\n\n\n\nReturns a basic calendar with only weekend days are excluded.\n\n\nRemarks\n\n\nExamples\n\n\n$Calendar2.GetWeekendCalendar().AddDays(new DateTimeOffset(),12).then(function(date) {\n    $Xml.SetValue(\nDate\n, date);\n\n});\n\n\n\n\nSee Also\n\n\n\n\nCalendar.GetStandardCalendar", 
            "title": "Calendar.GetWeekendCalendar"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getweekendcalendar/#overview", 
            "text": "Calendar   Calendar . GetWeekendCalendar   (   )  \nReturns a basic calendar with only weekend days are excluded.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getweekendcalendar/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getweekendcalendar/#examples", 
            "text": "$Calendar2.GetWeekendCalendar().AddDays(new DateTimeOffset(),12).then(function(date) {\n    $Xml.SetValue( Date , date);\n\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.getweekendcalendar/#see-also", 
            "text": "Calendar.GetStandardCalendar", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/", 
            "text": "Overview\n\n\nNumber\n \nCalendar\n.\nSubtract\n \n(\n \nstart\n,\n \nend\n \n)\n\n\n\nReturns the difference between the specified start and end date time values in hours.\n\n\nArguments\n\n\nDateTimeOffset \nstart\n\n  Specifies the start date time value.\n\n\nDateTimeOffset \nend\n\n  Specifies the end date time value.\n\n\nRemarks\n\n\nPlease make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the \n$Calendar\n object.\n\n\nExamples\n\n\nvar currentDate = $Calendar.Today;\n\n$Xml.SetValue(\nResult1\n, $Calendar.StandardCalendar.Subtract(currentDate, $Calendar.AddDays(currentDate, -1)));\n\n//using the defined calendar with work hours.\n$Xml.SetValue(\nResult2\n, $Calendar.Subtract(currentDate, $Calendar.AddDays(currentDate, -1)));\n\n\n\n\nResult is \n\n\nResult1\n24\n/\nResult\n\n\nResult2\n9\n/\nResult\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nCalendar.AddDays", 
            "title": "Calendar.Subtract"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/#overview", 
            "text": "Number   Calendar . Subtract   (   start ,   end   )  \nReturns the difference between the specified start and end date time values in hours.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/#arguments", 
            "text": "DateTimeOffset  start \n  Specifies the start date time value.  DateTimeOffset  end \n  Specifies the end date time value.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/#remarks", 
            "text": "Please make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the  $Calendar  object.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/#examples", 
            "text": "var currentDate = $Calendar.Today;\n\n$Xml.SetValue( Result1 , $Calendar.StandardCalendar.Subtract(currentDate, $Calendar.AddDays(currentDate, -1)));\n\n//using the defined calendar with work hours.\n$Xml.SetValue( Result2 , $Calendar.Subtract(currentDate, $Calendar.AddDays(currentDate, -1)));  Result is   Result1 24 / Result  Result2 9 / Result", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtract/#see-also", 
            "text": "Calendar  Calendar.AddDays", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/", 
            "text": "Overview\n\n\nPromise\nNumber\n \nCalendar\n.\nSubtractAsync\n \n(\n \nstart\n,\n \nend\n,\n \n[\ncallback\n]\n \n)\n\n\n\nReturns the difference between the specified start and end date time values in hours.\n\n\nArguments\n\n\nDateTimeOffset \nstart\n\n  Specifies the start date time value.\n\n\nDateTimeOffset \nend\n\n  Specifies the end date time value.\n\n\nFunction \ncallback\n\nCallback to execute. Optional.\n\n\nRemarks\n\n\nPlease make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the \n$Calendar2\n object.\n\n\nExamples\n\n\n$Calendar.SubtractAsync(new DateTimeOffset(), $Xml.EvaluateDateTime(\nNextTime\n)).then(function(hours) {\n    $Xml.SetValue(\nDays\n, hours / 9);\n});\n\n\n\n\nResult is \n\n\nDays\n5\n/\nDays\n\n\n\n\n\nSee Also\n\n\n\n\nCalendar.Add", 
            "title": "Calendar.SubtractAsync"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/#overview", 
            "text": "Promise Number   Calendar . SubtractAsync   (   start ,   end ,   [ callback ]   )  \nReturns the difference between the specified start and end date time values in hours.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/#arguments", 
            "text": "DateTimeOffset  start \n  Specifies the start date time value.  DateTimeOffset  end \n  Specifies the end date time value.  Function  callback \nCallback to execute. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/#remarks", 
            "text": "Please make sure that you are using the right calendar object, since adding time is related with your calendar of choice. You can have more info on Calendar definitions by checking the  $Calendar2  object.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/#examples", 
            "text": "$Calendar.SubtractAsync(new DateTimeOffset(), $Xml.EvaluateDateTime( NextTime )).then(function(hours) {\n    $Xml.SetValue( Days , hours / 9);\n});  Result is   Days 5 / Days", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/calendar.subtractasync/#see-also", 
            "text": "Calendar.Add", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.add/", 
            "text": "Overview\n\n\nobject\n \nDataTable\n.\nAdd\n \n(\n \ninput\n \n)\n\n\n\nAppends a new row in table and returns the new row.\n\n\nArguments\n\n\nobject | function \ninput\n\nObject or function for column values.\n\n\nRemarks\n\n\nExamples\n\n\nCreate a new row from object\n\n\nvar table = $Database.Empty({\n    Parameters : {\n      TargetSchema: \nHR\n,\n      TargetTable: \nGroups\n\n    }\n  });\n\ntable.Add({\n    id : Script.NewId(),\n    name : \nEmployee\n\n  });\n\ntable.Save();\n\n\n\n\nCreate a new row with mapper function\n\n\nvar table = $Database.Empty({\n    Parameters : {\n      TargetSchema: \nHR\n,\n      TargetTable: \nGroups\n\n    }\n  });\n\ntable.Add( function () {\n    this.Id = id;\n    this.Name = \nAdministrators-2\n;\n  });\n\ntable.Save();", 
            "title": "DataTable.Add"
        }, 
        {
            "location": "/ag/pm/sc/datatable.add/#overview", 
            "text": "object   DataTable . Add   (   input   )  \nAppends a new row in table and returns the new row.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.add/#arguments", 
            "text": "object | function  input \nObject or function for column values.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.add/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.add/#examples", 
            "text": "Create a new row from object  var table = $Database.Empty({\n    Parameters : {\n      TargetSchema:  HR ,\n      TargetTable:  Groups \n    }\n  });\n\ntable.Add({\n    id : Script.NewId(),\n    name :  Employee \n  });\n\ntable.Save();  Create a new row with mapper function  var table = $Database.Empty({\n    Parameters : {\n      TargetSchema:  HR ,\n      TargetTable:  Groups \n    }\n  });\n\ntable.Add( function () {\n    this.Id = id;\n    this.Name =  Administrators-2 ;\n  });\n\ntable.Save();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/", 
            "text": "Overview\n\n\nDataTable\n \nDataTable\n.\nDeleteAll\n \n(\n \n)\n\n\n\nMarks all records in data table as deleted.\n\n\nArguments\n\n\nRemarks\n\n\nRows in table is not instantly deleted, to delete persistently you need to call Save method.\n\n\nExamples\n\n\nDelete all rows\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nCustomers\n\n  }\n});\n\ntable.DeleteAll();\n\ntable.Save();\n\n\n\n\nSee Also\n\n\n\n\nDataTable.Save", 
            "title": "DataTable.DeleteAll"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/#overview", 
            "text": "DataTable   DataTable . DeleteAll   (   )  \nMarks all records in data table as deleted.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/#remarks", 
            "text": "Rows in table is not instantly deleted, to delete persistently you need to call Save method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/#examples", 
            "text": "Delete all rows  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Customers \n  }\n});\n\ntable.DeleteAll();\n\ntable.Save();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.deleteall/#see-also", 
            "text": "DataTable.Save", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/", 
            "text": "Overview\n\n\nDataTable\n \nDataTable\n.\nEach\n \n(\n \ncallback\n \n)\n\n\n\n Executes specified callback for every row in data table.\n\n\nArguments\n\n\nFunction \ncallback\n\nFunction to call for every data row.\n\n\nRemarks\n\n\nIf callback is null, error is thrown..\n\n\nExamples\n\n\nScan all rows\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\ntable.Each(function() {\n  var id = this.Id;\n});\n\n\n\n\nSee Also", 
            "title": "DataTable.Each"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/#overview", 
            "text": "DataTable   DataTable . Each   (   callback   )  \n Executes specified callback for every row in data table.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/#arguments", 
            "text": "Function  callback \nFunction to call for every data row.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/#remarks", 
            "text": "If callback is null, error is thrown..", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/#examples", 
            "text": "Scan all rows  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\ntable.Each(function() {\n  var id = this.Id;\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.each/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/", 
            "text": "Overview\n\n\nDataTable\n \nDataTable\n.\nImportFromXml\n \n(\n \noptions\n \n)\n\n\n\nImports xml data to specified table. If record already exist in table it's updates existing. If no record exist a new record added to table. Comparison automatically done with table primary key.\n\n\nArguments\n\n\nobject \noptions\n\nSpecifies the import options and may contain one or more following properties:\n\n\nString \nxpath\n\nSpecifies the XPath to be imported.\n\n\nXmlNode \nnode\n\nSpecifies the context xml node. Optional, if not specified \"$Xml\" is used.\n\n\nFunction__ map__\nSpecifies the mapper function to be executed for each row. Optional.\n\n\nString \ncolumnsXPath\n\nSpecifies the additional column mapping xpath. Optional. See remarks.\n\n\nRemarks\n\n\nColumnsXPath is used to specify additional secondary mapping path by XPath argument.\n\n\nThis method is not call save method after executed. If you want to save changes you need to explicitly call \nSave\n method or use $Database.ImportFromXml\n\n\nExamples\n\n\nCommon use for importing data\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\ntable.ImportFromXml({\n    XPath : \nGroups/Group\n\n});\n\ntable.Save();\n\n\n\n\nUsing map function\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\ntable.ImportFromXml({\n    XPath : \nGroups/Group\n,\n    map : function(node) {\n       this.Id = node.Evaluate(\n../Id\n);\n    }\n});\n\ntable.Save();\n\n\n\n\nSee Also", 
            "title": "DataTable.ImportFromXml"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/#overview", 
            "text": "DataTable   DataTable . ImportFromXml   (   options   )  \nImports xml data to specified table. If record already exist in table it's updates existing. If no record exist a new record added to table. Comparison automatically done with table primary key.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/#arguments", 
            "text": "object  options \nSpecifies the import options and may contain one or more following properties:  String  xpath \nSpecifies the XPath to be imported.  XmlNode  node \nSpecifies the context xml node. Optional, if not specified \"$Xml\" is used.  Function__ map__\nSpecifies the mapper function to be executed for each row. Optional.  String  columnsXPath \nSpecifies the additional column mapping xpath. Optional. See remarks.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/#remarks", 
            "text": "ColumnsXPath is used to specify additional secondary mapping path by XPath argument.  This method is not call save method after executed. If you want to save changes you need to explicitly call  Save  method or use $Database.ImportFromXml", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/#examples", 
            "text": "Common use for importing data  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\ntable.ImportFromXml({\n    XPath :  Groups/Group \n});\n\ntable.Save();  Using map function  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\ntable.ImportFromXml({\n    XPath :  Groups/Group ,\n    map : function(node) {\n       this.Id = node.Evaluate( ../Id );\n    }\n});\n\ntable.Save();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.importfromxml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/", 
            "text": "Overview\n\n\nobject\n[]\n \nDataTable\n.\nMap\n \n(\n \ncallback\n \n)\n\n\n\n Executes specified callback and returns array of callback return values.\n\n\nArguments\n\n\nFunction \ncallback\n\n Function to call for every data row.\n\n\nRemarks\n\n\nIf callback is null, error is thrown.\n\n\nExamples\n\n\nConvert all rows\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\nvar allRows = table.Map(function() {\n  return {\n    id : this.Id,\n    name : this.Name\n  };\n});\n\n// allRows is now [ {id:123, name:xxx}, {id:456, name:yyy}]\n\n\n\n\nSee Also", 
            "title": "DataTable.Map"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/#overview", 
            "text": "object []   DataTable . Map   (   callback   )  \n Executes specified callback and returns array of callback return values.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/#arguments", 
            "text": "Function  callback \n Function to call for every data row.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/#remarks", 
            "text": "If callback is null, error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/#examples", 
            "text": "Convert all rows  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\nvar allRows = table.Map(function() {\n  return {\n    id : this.Id,\n    name : this.Name\n  };\n});\n\n// allRows is now [ {id:123, name:xxx}, {id:456, name:yyy}]", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.map/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/", 
            "text": "Overview\n\n\nNumber\n \nDataTable\n.\nRowCount\n \n(\n \n)\n\n\n\n Returns the number of rows in data table.\n\n\nArguments\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "DataTable.RowCount"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/#overview", 
            "text": "Number   DataTable . RowCount   (   )  \n Returns the number of rows in data table.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rowcount/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/", 
            "text": "Overview\n\n\nobject\n[]\n \nDataTable\n.\nRows\n \n(\n \n)\n\n\n\nReturns the existing rows as javascript array.\n\n\nArguments\n\n\nRemarks\n\n\nExamples\n\n\nBasic Usage\n\n\nvar rows = myTable.Rows();\n\n\n\n\nConvert column to value array\n\n\nvar idValues = myTable.Rows().map(function() {\n  return this.Id;\n});\n\n\n\n\nSee Also", 
            "title": "DataTable.Rows"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/#overview", 
            "text": "object []   DataTable . Rows   (   )  \nReturns the existing rows as javascript array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/#examples", 
            "text": "Basic Usage  var rows = myTable.Rows();  Convert column to value array  var idValues = myTable.Rows().map(function() {\n  return this.Id;\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.rows/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/", 
            "text": "Overview\n\n\nDataTable\n \nDataTable\n.\nSave\n \n(\n \n)\n\n\n\nSaves changes on data table.\n\n\nArguments\n\n\nRemarks\n\n\nUntil Save method called all changes on data table is stored in memory. Save method flushes all changes to database.\n\n\nExamples\n\n\nScan all rows\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\ntable.Each(function() {\n  this.Name = \nMyAdmin\n;\n});\n\ntable.Save();\n\n\n\n\nSee Also", 
            "title": "DataTable.Save"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/#overview", 
            "text": "DataTable   DataTable . Save   (   )  \nSaves changes on data table.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/#remarks", 
            "text": "Until Save method called all changes on data table is stored in memory. Save method flushes all changes to database.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/#examples", 
            "text": "Scan all rows  var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\ntable.Each(function() {\n  this.Name =  MyAdmin ;\n});\n\ntable.Save();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.save/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/", 
            "text": "Overview\n\n\nDataTableDictionary\n \nDataTable\n.\nToDictionary\n \n(\n \ncolumns\n,\n \n[\n \nseperator\n \n=\n \n.\n \n]\n \n)\n\n\n\n Returns a \nDataTableDictionary\n by specified columns as key value to fast accessing.\n\n\nArguments\n\n\nString \ncolumns\n\n Comma or semicolon separated column names. If not specified error is thrown.\n\n\nString \nseperator\n\nSeparator to use as dictionary key when multiple columns specified. If not specified \".\" value is used by default.\n\n\nRemarks\n\n\n\n\nWhen columns argument contains an invalid column which is not in \nDataTable\n error is thrown.\n\n\nIf multiple columns shares same key, dictionary value would be array of data table row.\n\n\n\n\nExamples\n\n\nConvert users to a dictionary\n\n\nvar employeeTable = $Database.Get({ \n  Parameters : { \n    TargetSchema: \nHR\n, \n    TargetTable: \nEmployee\n\n  }\n});\n\nvar employeeList = employeeTable.ToDictionary(\nRegistryNumber\n);\n\n/* employeeList now contains\n   {\n     \n1234\n : { Id : \nABC\n, RegistryNumber: \n1234\n, StartDate: ... }\n     \n4567\n : { Id : \nDEF\n, RegistryNumber: \n4567\n, StartDate: ... }\n   }\n*/\n\nvar employee = employeeList.Get(\n12345\n);\n\n\n\n\nUsing multiple columns\n\n\nvar employeeTable = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nEmployee\n\n  }\n});\n\nvar employeeList = employeeTable.ToDictionary(\nId,RegistryNumber\n);\n\n/* employeeList now contains\n   {\n      \nABC.1234\n : { Id : \nABC\n, RegistryNumber: \n1234\n, StartDate: ... }\n      \nDEF.4567\n : { Id : \nDEF\n, RegistryNumber: \n4567\n, StartDate: ... }\n   }\n*/\n\nvar employee = employeeList.Get(\nABC.1234\n);\n\n\n\n\nSee Also\n\n\n\n\nDataTableDictionary", 
            "title": "DataTable.ToDictionary"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/#overview", 
            "text": "DataTableDictionary   DataTable . ToDictionary   (   columns ,   [   seperator   =   .   ]   )  \n Returns a  DataTableDictionary  by specified columns as key value to fast accessing.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/#arguments", 
            "text": "String  columns \n Comma or semicolon separated column names. If not specified error is thrown.  String  seperator \nSeparator to use as dictionary key when multiple columns specified. If not specified \".\" value is used by default.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/#remarks", 
            "text": "When columns argument contains an invalid column which is not in  DataTable  error is thrown.  If multiple columns shares same key, dictionary value would be array of data table row.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/#examples", 
            "text": "Convert users to a dictionary  var employeeTable = $Database.Get({ \n  Parameters : { \n    TargetSchema:  HR , \n    TargetTable:  Employee \n  }\n});\n\nvar employeeList = employeeTable.ToDictionary( RegistryNumber );\n\n/* employeeList now contains\n   {\n      1234  : { Id :  ABC , RegistryNumber:  1234 , StartDate: ... }\n      4567  : { Id :  DEF , RegistryNumber:  4567 , StartDate: ... }\n   }\n*/\n\nvar employee = employeeList.Get( 12345 );  Using multiple columns  var employeeTable = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Employee \n  }\n});\n\nvar employeeList = employeeTable.ToDictionary( Id,RegistryNumber );\n\n/* employeeList now contains\n   {\n       ABC.1234  : { Id :  ABC , RegistryNumber:  1234 , StartDate: ... }\n       DEF.4567  : { Id :  DEF , RegistryNumber:  4567 , StartDate: ... }\n   }\n*/\n\nvar employee = employeeList.Get( ABC.1234 );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatable.todictionary/#see-also", 
            "text": "DataTableDictionary", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/", 
            "text": "Overview\n\n\nObject\n \nDataTableDictionary\n.\nEnsure\n \n(\n \nkey\n,\n \n[\nproperties\n],\n \n[\ninitProperties\n]\n \n)\n\n\n\nAdds or updates rows in \nDataTable\n and \nDataTableDictionary\n by specified key and properties.\n\n\nReturn Value\n\n\nMatching row instance.\n\n\nArguments\n\n\nString \nkey\n\nRequired. Key of rows to be updated or added.\n\n\nObject \nproperties\n\nRow properties to be updated.\n\n\nObject \ninitProperties\n\nRow properties to be updated if no match found.\n\n\nRemarks\n\n\n\n\ninitProperties argument used as to initialize a new row no matching row found in \nDataTable\n.\n\n\nThis method inserts or updates rows in \nDataTable\n.\n\n\n\n\nExamples\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\nvar list = table.ToDictionary(\nName\n);\n\nvar myGroup = list.Ensure(\nMyGroup\n, {\n  Code : \n123\n\n}, {\n  Id : Script.NewId()\n});\n\nlist.Save();\n\n\n\n\nSee Also\n\n\n\n\nDataTableDictionary.Get\n\n\nDataTableDictionary.Save", 
            "title": "DataTableDictionary.Ensure"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#overview", 
            "text": "Object   DataTableDictionary . Ensure   (   key ,   [ properties ],   [ initProperties ]   )  \nAdds or updates rows in  DataTable  and  DataTableDictionary  by specified key and properties.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#return-value", 
            "text": "Matching row instance.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#arguments", 
            "text": "String  key \nRequired. Key of rows to be updated or added.  Object  properties \nRow properties to be updated.  Object  initProperties \nRow properties to be updated if no match found.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#remarks", 
            "text": "initProperties argument used as to initialize a new row no matching row found in  DataTable .  This method inserts or updates rows in  DataTable .", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#examples", 
            "text": "var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\nvar list = table.ToDictionary( Name );\n\nvar myGroup = list.Ensure( MyGroup , {\n  Code :  123 \n}, {\n  Id : Script.NewId()\n});\n\nlist.Save();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.ensure/#see-also", 
            "text": "DataTableDictionary.Get  DataTableDictionary.Save", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/", 
            "text": "Overview\n\n\nobject\n \nDataTableDictionary\n.\nGet\n \n(\n \nkey\n \n)\n\n\n\nLookups a data table row from dictionary.\n\n\nArguments\n\n\nString \nkey\n\nData table row key\n\n\nReturn Value\n\n\nReturns the matching object from \nDataTableDictionary\n if found, otherwise returns null.\n\n\nRemarks\n\n\n\n\nIf key value trimmed if starts with numeric 0 characters if not contain any '.' (dot) character. For example : '00001234' key becomes '1234' but '000.1234' preserved.\n\n\nIf multiple rows matched with key an matching object array is returns.\n\n\n\n\nExamples\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\nvar list = table.ToDictionary(\nName\n);\n\nvar myGroup = list.Get(\nMyGroup\n);\n\n\n\n\nSee Also\n\n\n\n\nDataTableDictionary.Ensure", 
            "title": "DataTableDictionary.Get"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#overview", 
            "text": "object   DataTableDictionary . Get   (   key   )  \nLookups a data table row from dictionary.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#arguments", 
            "text": "String  key \nData table row key", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#return-value", 
            "text": "Returns the matching object from  DataTableDictionary  if found, otherwise returns null.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#remarks", 
            "text": "If key value trimmed if starts with numeric 0 characters if not contain any '.' (dot) character. For example : '00001234' key becomes '1234' but '000.1234' preserved.  If multiple rows matched with key an matching object array is returns.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#examples", 
            "text": "var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\nvar list = table.ToDictionary( Name );\n\nvar myGroup = list.Get( MyGroup );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.get/#see-also", 
            "text": "DataTableDictionary.Ensure", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/", 
            "text": "Overview\n\n\nBoolean\n \nDataTableDictionary\n.\nHas\n \n(\n \nkey\n \n)\n\n\n\nReturns to if specified key value has in dictionary.\n\n\nArguments\n\n\nString \nkey\n\nKey of value to check\n\n\nReturn Value\n\n\nTrue if key value exists in dictionary, otherwise false.\n\n\nRemarks\n\n\n\n\nIf key value trimmed if starts with numeric 0 characters if not contain any '.' (dot) character. For example : '00001234' key becomes '1234' but '000.1234' preserved.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "DataTableDictionary.Has"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#overview", 
            "text": "Boolean   DataTableDictionary . Has   (   key   )  \nReturns to if specified key value has in dictionary.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#arguments", 
            "text": "String  key \nKey of value to check", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#return-value", 
            "text": "True if key value exists in dictionary, otherwise false.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#remarks", 
            "text": "If key value trimmed if starts with numeric 0 characters if not contain any '.' (dot) character. For example : '00001234' key becomes '1234' but '000.1234' preserved.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.has/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/", 
            "text": "Overview\n\n\nArray\n \nDataTableDictionary\n.\nKeys\n \n(\n \n)\n\n\n\nReturns all dictionary keys as string array.\n\n\nReturn Value\n\n\nArray of key values as string.\n\n\nArguments\n\n\nString \nkey\n\nData table row key\n\n\nRemarks\n\n\nExamples\n\n\nvar table = $Database.Get({\n  Parameters : {\n    TargetSchema: \nHR\n,\n    TargetTable: \nGroups\n\n  }\n});\n\nvar list = table.ToDictionary(\nName\n);\n\nvar keys = list.Keys();\n\n\nfor(var i=0; i\nkeys.length\n;\n \ni\n++)\n \n{\n\n    \nvar\n \ngroup \n=\n \nlist.Get(keys[i]);\n\n\n}\n\n\n\n\n\nSee Also", 
            "title": "DataTableDictionary.Keys"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#overview", 
            "text": "Array   DataTableDictionary . Keys   (   )  \nReturns all dictionary keys as string array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#return-value", 
            "text": "Array of key values as string.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#arguments", 
            "text": "String  key \nData table row key", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#examples", 
            "text": "var table = $Database.Get({\n  Parameters : {\n    TargetSchema:  HR ,\n    TargetTable:  Groups \n  }\n});\n\nvar list = table.ToDictionary( Name );\n\nvar keys = list.Keys();\n\n\nfor(var i=0; i keys.length ;   i ++)   { \n     var   group  =   list.Get(keys[i]);  }", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.keys/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/", 
            "text": "Overview\n\n\nvoid\n \nDataTableDictionary\n.\nSave\n \n(\n \n)\n\n\n\n\n\nUpdates all changes in \nDataTableDictionary\n instance to database.\n\n\nReturn Value\n\n\nDoes not return any value.\n\n\nArguments\n\n\nRemarks\n\n\n\n\nThis method performs same operation with \nDataTable.Save\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "DataTableDictionary.Save"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#overview", 
            "text": "void   DataTableDictionary . Save   (   )   Updates all changes in  DataTableDictionary  instance to database.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#return-value", 
            "text": "Does not return any value.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#arguments", 
            "text": "", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#remarks", 
            "text": "This method performs same operation with  DataTable.Save", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.save/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/", 
            "text": "Overview\n\n\nDataTableMap\n \nDataTableDictionary\n.\nSet\n \n(\n \nkey\n,\n \nvalue\n \n)\n\n\n\nAdds or updates a element with specified key and value in \nDataTableDictionary\n instance.\n\n\nArguments\n\n\nString \nkey\n\n\nRequired. Key of element to add to \nDataTableDictionary\n object.\n\n\nObject | Array \nValue\n\n\nValue of element to add to \nDataTableDictionary\n object.\n\n\nReturn Value\n\n\nAlways returns the current instance.\n\n\nRemarks\n\n\n\n\niThis method does NOT update \nDataTable\n and only apply temporary changes in \nDataTableDictionary\n instance. Please use \nDataTableDictionary.Ensure\n method to perform database changes and do not use this method if you have special reason.\n\n\nValue can be specified as Object Array if needed.\n\n\n\n\nExamples\n\n\nSee Also\n\n\n\n\nDataTableDictionary.Get", 
            "title": "DataTableDictionary.Set"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#overview", 
            "text": "DataTableMap   DataTableDictionary . Set   (   key ,   value   )  \nAdds or updates a element with specified key and value in  DataTableDictionary  instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#arguments", 
            "text": "String  key  Required. Key of element to add to  DataTableDictionary  object.  Object | Array  Value  Value of element to add to  DataTableDictionary  object.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#return-value", 
            "text": "Always returns the current instance.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#remarks", 
            "text": "iThis method does NOT update  DataTable  and only apply temporary changes in  DataTableDictionary  instance. Please use  DataTableDictionary.Ensure  method to perform database changes and do not use this method if you have special reason.  Value can be specified as Object Array if needed.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datatabledictionary.set/#see-also", 
            "text": "DataTableDictionary.Get", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/datetimeoffset/", 
            "text": "Overview\n\n\nThe DateTimeOffset object represents a date and time value, together with an offset that indicates how much that value differs from UTC.\n\n\nRemarks\n\n\nIt is the default date and time type for Workrunner.\n\n\nExamples\n\n\nSampleDate\n2017-01-25T19:32:37.748653+03:00\n/\nSampleDate\n\n\n\n\n\nvar newDate = DateTimeOffset.parse(\n2017-01-25\n);\n\n\n\n\nSee Also\n\n\n\n\nCalendar\n\n\nhttps://msdn.microsoft.com/en-us/library/bb384267%28v=vs.110%29.aspx?f=255\nMSPPError=-2147217396", 
            "title": "DateTimeOffset"
        }, 
        {
            "location": "/ag/pm/sc/datetimeoffset/#overview", 
            "text": "The DateTimeOffset object represents a date and time value, together with an offset that indicates how much that value differs from UTC.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/datetimeoffset/#remarks", 
            "text": "It is the default date and time type for Workrunner.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/datetimeoffset/#examples", 
            "text": "SampleDate 2017-01-25T19:32:37.748653+03:00 / SampleDate   var newDate = DateTimeOffset.parse( 2017-01-25 );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/datetimeoffset/#see-also", 
            "text": "Calendar  https://msdn.microsoft.com/en-us/library/bb384267%28v=vs.110%29.aspx?f=255 MSPPError=-2147217396", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nAddProfile\n \n(\n \ninput\n \n)\n\n\n\nAdds a new profile to document. \n\n\nArguments\n\n\nXmlNode | String \ninput\n\nProfile data as Xml node or string\n\n\nRemarks\n\n\nThis method copies provided input data to the document profile with xml schema based copy.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nDocument.Profile", 
            "title": "Document.AddProfile"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/#overview", 
            "text": "Document   Document . AddProfile   (   input   )  \nAdds a new profile to document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/#arguments", 
            "text": "XmlNode | String  input \nProfile data as Xml node or string", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/#remarks", 
            "text": "This method copies provided input data to the document profile with xml schema based copy.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.addprofile/#see-also", 
            "text": "Document.Profile", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.archive/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nArchive\n \n(\n \n)\n\n\n\nArchives the document and returns current document instance.\n\n\nRemarks\n\n\nThis method changes State property to \"Archived\". Any other changes on document are automatically saved.\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Archive"
        }, 
        {
            "location": "/ag/pm/sc/document.archive/#overview", 
            "text": "Document   Document . Archive   (   )  \nArchives the document and returns current document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.archive/#remarks", 
            "text": "This method changes State property to \"Archived\". Any other changes on document are automatically saved.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.archive/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.archive/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.branchid/", 
            "text": "Overview\n\n\nstring\n \nDocument\n.\nBranchId\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the branch id of document.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.BranchId"
        }, 
        {
            "location": "/ag/pm/sc/document.branchid/#overview", 
            "text": "string   Document . BranchId   {   get ;   }  \n Gets the branch id of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.branchid/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.branchid/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.branchid/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.contenttype/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nContentType\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\n Gets or sets the name content type of document.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.ContentType"
        }, 
        {
            "location": "/ag/pm/sc/document.contenttype/#overview", 
            "text": "String   Document . ContentType   {   get ;   set ;   }  \n Gets or sets the name content type of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.contenttype/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.contenttype/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.contenttype/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.createdat/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nDocument\n.\nCreatedAt\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the creation date of the document.\n\n\nRemarks\n\n\nCreate date may change between different versions of documents.\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.CreatedAt"
        }, 
        {
            "location": "/ag/pm/sc/document.createdat/#overview", 
            "text": "DateTimeOffset   Document . CreatedAt   {   get ;   }  \n Gets the creation date of the document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.createdat/#remarks", 
            "text": "Create date may change between different versions of documents.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.createdat/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.createdat/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nDelete\n \n(\n \n[\n \npermanently\n \n=\n \nfalse\n \n]\n \n)\n\n\n\n Deletes the document.\n\n\nArguments\n\n\nBoolean \npermanently\n\nSpecifies to delete document permanently or not. If not specified set to \"False\".\n\n\nRemarks\n\n\nIf real parameter is not specified or set to \"false\" state is changed to \"Deleted\".\n\n\nIf real parameter is set to \"true\" or document is already in \"Deleted\" state document permanently deleted from archive.\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Delete"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/#overview", 
            "text": "Document   Document . Delete   (   [   permanently   =   false   ]   )  \n Deletes the document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/#arguments", 
            "text": "Boolean  permanently \nSpecifies to delete document permanently or not. If not specified set to \"False\".", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/#remarks", 
            "text": "If real parameter is not specified or set to \"false\" state is changed to \"Deleted\".  If real parameter is set to \"true\" or document is already in \"Deleted\" state document permanently deleted from archive.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.delete/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.description/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nDescription\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the description of document \n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Description"
        }, 
        {
            "location": "/ag/pm/sc/document.description/#overview", 
            "text": "String   Document . Description   {   get ;   set ;   }  \nGets or sets the description of document", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.description/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.description/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.description/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.files/", 
            "text": "Overview\n\n\nFiles\n \nDocument\n.\nFiles\n \n{\n \nget\n;\n \n}\n\n\n\nGets the collection of attached files on document.\n\n\nRemarks\n\n\nExamples\n\n\nAccessing Document Files\n\n\nvar doc = $Documents.Get(id);\n\nvar fileCount = doc.Files.length;\n\n// access with index\nvar file = doc.Files[0];\n\n// access with file id\nvar file2 = doc.Files[fileId]\n\n\n\n\nSee Also", 
            "title": "Document.Files"
        }, 
        {
            "location": "/ag/pm/sc/document.files/#overview", 
            "text": "Files   Document . Files   {   get ;   }  \nGets the collection of attached files on document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.files/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.files/#examples", 
            "text": "Accessing Document Files  var doc = $Documents.Get(id);\n\nvar fileCount = doc.Files.length;\n\n// access with index\nvar file = doc.Files[0];\n\n// access with file id\nvar file2 = doc.Files[fileId]", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.files/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.id/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nId\n \n{\n \nget\n;\n \n}\n\n\n\nGets the globally unique identifier of document.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Id"
        }, 
        {
            "location": "/ag/pm/sc/document.id/#overview", 
            "text": "String   Document . Id   {   get ;   }  \nGets the globally unique identifier of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.id/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.id/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.id/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.isreadonly/", 
            "text": "Overview\n\n\nBoolean\n \nDocument\n.\nIsReadonly\n \n{\n \nget\n;\n \n}\n\n\n\nGets the boolean value that specifies the document is currently read only.\n\n\nRemarks\n\n\nPublished, Deleted and Archive state makes documents read only. Except profile data all other properties including document content is read only, any change attempt is prohibited\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.IsReadonly"
        }, 
        {
            "location": "/ag/pm/sc/document.isreadonly/#overview", 
            "text": "Boolean   Document . IsReadonly   {   get ;   }  \nGets the boolean value that specifies the document is currently read only.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.isreadonly/#remarks", 
            "text": "Published, Deleted and Archive state makes documents read only. Except profile data all other properties including document content is read only, any change attempt is prohibited", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.isreadonly/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.isreadonly/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.profile/", 
            "text": "Overview\n\n\nXmlNode\n \nDocument\n.\nProfile\n \n{\n \nget\n;\n \n}\n\n\n\nGets or sets the profile data of document.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Profile"
        }, 
        {
            "location": "/ag/pm/sc/document.profile/#overview", 
            "text": "XmlNode   Document . Profile   {   get ;   }  \nGets or sets the profile data of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.profile/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.profile/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.profile/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nPublish\n \n(\n \n[\n \nfolderPath\n \n]\n \n)\n\n\n\n Publishes document to specified folders and returns current document instance.\n\n\nArguments\n\n\nString \nfolderPath\n\nPath of folder(s\n\n\nRemarks\n\n\nThis method changes \nState\n property to \"Published\" and saves document.\n\n\nIf folderPath argument is specified document is attached to specified folder. Path can be specified as full path. If folder is not exist automatically created.\n\n\nExamples\n\n\nvar doc = $Documents.Get(id);\n\ndoc.Title = \nSample Document\n;\ndoc.Publish(\nTesting\\Folder1;Testing\\Folder2\n);\n\n\n\n\nSee Also", 
            "title": "Document.Publish"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/#overview", 
            "text": "Document   Document . Publish   (   [   folderPath   ]   )  \n Publishes document to specified folders and returns current document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/#arguments", 
            "text": "String  folderPath \nPath of folder(s", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/#remarks", 
            "text": "This method changes  State  property to \"Published\" and saves document.  If folderPath argument is specified document is attached to specified folder. Path can be specified as full path. If folder is not exist automatically created.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/#examples", 
            "text": "var doc = $Documents.Get(id);\n\ndoc.Title =  Sample Document ;\ndoc.Publish( Testing\\Folder1;Testing\\Folder2 );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.publish/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.save/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nSave\n \n(\n \n)\n\n\n\nSaves the changes on document and returns current document instance.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Save"
        }, 
        {
            "location": "/ag/pm/sc/document.save/#overview", 
            "text": "Document   Document . Save   (   )  \nSaves the changes on document and returns current document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.save/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.save/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.save/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nSetSecurityProfile\n \n(\n \nname\n \n)\n\n\n\nUpdates the security profile of document.\n\n\nArguments\n\n\nString \nname\n\n Name of security profile\n\n\nRemarks\n\n\n\n\nProfile is not updated until Document.Save method is called.\n\n\nIf specified named profile is not found error is thrown.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.SetSecurityProfile"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/#overview", 
            "text": "Document   Document . SetSecurityProfile   (   name   )  \nUpdates the security profile of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/#arguments", 
            "text": "String  name \n Name of security profile", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/#remarks", 
            "text": "Profile is not updated until Document.Save method is called.  If specified named profile is not found error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.setsecurityprofile/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.state/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nState\n \n{\n \nget\n;\n \n}\n\n\n\nGets the state of document.\n\n\nRemarks\n\n\nThis property returns one of following values:\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDraft\n\n\nDocument preparation state.\n\n\n\n\n\n\nPublished\n\n\nPublic access is enabled to accessible users.\n\n\n\n\n\n\nArchived\n\n\nDeleted documents are by default is hidden from all users and searchable only if requested.\n\n\n\n\n\n\nDeleted\n\n\nArchive state specifies the preparation to delete state.\n\n\n\n\n\n\n\n\nReadonly State\n\n\nPublished, Deleted and Archive state makes documents read only. Except profile data all other properties including document content is read only, any change attempt is prohibited.\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.State"
        }, 
        {
            "location": "/ag/pm/sc/document.state/#overview", 
            "text": "String   Document . State   {   get ;   }  \nGets the state of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.state/#remarks", 
            "text": "This property returns one of following values:     Value  Description      Draft  Document preparation state.    Published  Public access is enabled to accessible users.    Archived  Deleted documents are by default is hidden from all users and searchable only if requested.    Deleted  Archive state specifies the preparation to delete state.     Readonly State  Published, Deleted and Archive state makes documents read only. Except profile data all other properties including document content is read only, any change attempt is prohibited.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.state/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.state/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.title/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nTitle\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the title of document.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Title"
        }, 
        {
            "location": "/ag/pm/sc/document.title/#overview", 
            "text": "String   Document . Title   {   get ;   set ;   }  \nGets or sets the title of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.title/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.title/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.title/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/", 
            "text": "Overview\n\n\nDocument\n \nDocument\n.\nUnpublish\n \n(\n \n[\n \nfolderPath\n \n]\n \n)\n\n\n\nUnpublishes document from specified folders and returns current document instance.\n\n\nArguments\n\n\nString \nfolderPath\n\n Path of folder(s)\n\n\nRemarks\n\n\nThis method changes \nState\n property to \"Draft\" and saves document.\n\n\nIf folderPath is specified, document is removed from specified folders. Path can be specified as full path. Non existing folders are ignored.\n\n\nExamples\n\n\nSee Also", 
            "title": "Document.Unpublish"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/#overview", 
            "text": "Document   Document . Unpublish   (   [   folderPath   ]   )  \nUnpublishes document from specified folders and returns current document instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/#arguments", 
            "text": "String  folderPath \n Path of folder(s)", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/#remarks", 
            "text": "This method changes  State  property to \"Draft\" and saves document.  If folderPath is specified, document is removed from specified folders. Path can be specified as full path. Non existing folders are ignored.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.unpublish/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document.version/", 
            "text": "Overview\n\n\nString\n \nDocument\n.\nVersion\n \n{\n \nget\n;\n \n}\n\n\n\n Gets or sets the version number of document.\n\n\nRemarks\n\n\nVersion number formatted as \"Major\".\"Minor\".\"Revision\"\n\n\nExamples\n\n\nUpdating version number\n\n\nvar doc = $Documents.Get(id);\ndoc.Version = \n2.5.3\n;\n\n\n\n\nSee Also", 
            "title": "Document.Version"
        }, 
        {
            "location": "/ag/pm/sc/document.version/#overview", 
            "text": "String   Document . Version   {   get ;   }  \n Gets or sets the version number of document.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/document.version/#remarks", 
            "text": "Version number formatted as \"Major\".\"Minor\".\"Revision\"", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/document.version/#examples", 
            "text": "Updating version number  var doc = $Documents.Get(id);\ndoc.Version =  2.5.3 ;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/document.version/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/document/", 
            "text": "", 
            "title": "Document Methods"
        }, 
        {
            "location": "/ag/pm/sc/fileinfo/", 
            "text": "Overview\n\n\nRepresents a file instance.\n\n\n{\n  string Id,\n  string Hash,\n  string MimeType,\n  string Name,\n  string OwnerId,\n  DateTimeOffset CreateDate\n}\n\n\n\n\nDetails\n\n\nId\n\nGets the unique identifier of file\n\n\nHash\n\nGets the SHA-1 digest of file content.\n\n\nMimeType\n\nGets the mime type of content\n\n\nName\n\nGets the name of file.\n\n\nOwnerId\n\nGets the owner identity id of file.\n\n\nCreateDate\n\nGets the create date of file.\n\n\nscriptingfiles", 
            "title": "FileInfo"
        }, 
        {
            "location": "/ag/pm/sc/fileinfo/#overview", 
            "text": "Represents a file instance.  {\n  string Id,\n  string Hash,\n  string MimeType,\n  string Name,\n  string OwnerId,\n  DateTimeOffset CreateDate\n}", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/fileinfo/#details", 
            "text": "Id \nGets the unique identifier of file  Hash \nGets the SHA-1 digest of file content.  MimeType \nGets the mime type of content  Name \nGets the name of file.  OwnerId \nGets the owner identity id of file.  CreateDate \nGets the create date of file.  scriptingfiles", 
            "title": "Details"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nAddBase64\n \n(\n \ncontent\n,\n \nname\n,\n \nmimeType\n \n)\n\n\n\n Adds a new file to repository with base64 encoded content and returns created \nfile info\n.\n\n\nArguments\n\n\nString \ncontent\n\n Base64 encoded file content\n\n\nString \nname\n\nName of file\n\n\nString \nmimeType\n\nMime type of file.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\nYou can find the list of mime types at \nhttp://www.iana.org/assignments/media-types/media-types.xhtml", 
            "title": "Files.AddBase64"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/#overview", 
            "text": "FileInfo   Files . AddBase64   (   content ,   name ,   mimeType   )  \n Adds a new file to repository with base64 encoded content and returns created  file info .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/#arguments", 
            "text": "String  content \n Base64 encoded file content  String  name \nName of file  String  mimeType \nMime type of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.addbase64/#see-also", 
            "text": "You can find the list of mime types at  http://www.iana.org/assignments/media-types/media-types.xhtml", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nAddFile\n \n(\n \nid\n \n)\n\n\n\nCopies specified file as a new file and returns created \nfile info\n.\n\n\nArguments\n\n\nString \nid\n\n Id number of file to be copied.\n\n\nRemarks\n\n\nIf specified file not found, error is thrown.\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.AddFile"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/#overview", 
            "text": "FileInfo   Files . AddFile   (   id   )  \nCopies specified file as a new file and returns created  file info .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/#arguments", 
            "text": "String  id \n Id number of file to be copied.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/#remarks", 
            "text": "If specified file not found, error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.addfile/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nAddPDF\n \n(\n \nhtmlContent\n,\n \nname\n,\n \n[\n \noptions\n \n]\n \n)\n\n\n\n\n\nAdds a new PDF file to repository with html content and returns created \nfile info\n.\n\n\nArguments\n\n\nString \nhtmlContent\n\n Content of file in HTML format.\n\n\nString \nname\n\nName of file.\n\n\nObject \noptions\n\nPDF generating options. See remarks.\n\n\nOption may contain one or more following properties:\n\n\nNumber \nMarginLeft\n\nSpecifies the page margin in millimeters. (Default 20mm)\n\n\nNumber \nMarginRight\n\nSpecifies the page margin in millimeters. (Default 20mm)\n\n\nNumber \nMarginTop\n\nSpecifies the page margin in millimeters. (Default 20mm)\n\n\nNumber \nMarginBottom\n\nSpecifies the page margin in millimeters. (Default 20mm)\n\n\nNumber \nPageWidth\n\nSpecifies the page width in millimeters.\n\n\nNumber \nPageHeight\n\nSpecifies the page height in millimeters.\n\n\nString \nHeaderHtml\n\nSpecifies html content to be inserted top of every page.\n\n\nNumber \nHeaderSpacing\n\nSpacing between header and content in millimeters.\n\n\nString \nFooterHtml\n\nSpecifies html content to be inserted bottom of every page.\n\n\nNumber \nFooterSpacing\n\nSpacing between footer and content in millimeters.\n\n\nString \nStyle\n\nCSS style to apply on content and header and footer html.\n\n\nRemarks\n\n\nHeader and footer html parameters specifies the single page and may contain following parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[page]\n\n\nCurrent page number\n\n\n\n\n\n\n[frompage]\n\n\nFirst page number\n\n\n\n\n\n\n[topage]\n\n\nTotal number of pages\n\n\n\n\n\n\n[customField]\n\n\nOther custom property specified in options.\n\n\n\n\n\n\n\n\nSample header html\n\n\ntable\n \nstyle\n=\nborder-bottom: 1px solid black; width: 100%;\n\n   \ntr\n\n     \ntd\n \nstyle\n=\nwidth:20%;text-align:center;\n[logo]\n/\ntd\n\n     \ntd\n \nstyle\n=\nwidth:50%;text-align:center;font-size:1.3em;\n[documentTitle]\n/\ntd\n\n     \ntd\n \nstyle\n=\nwidth:30%\n\n       Document Number : [documentNumber]\nbr\n \n/\n\n       Page : [page]/[topage]\n     \n/\ntd\n\n   \n/\ntr\n\n \n/\ntable\n\n\n\n\n\nExamples\n\n\nUsage\n\n\nvar html = \nhtml\nbody\nHello!\n/\nbody\n/html\n;\n\nvar pdfFile = $Files.AddPDF(html, \nsample.pdf\n);\n\nreturn pdfFile.Id;\n\n\n\n\nSee Also", 
            "title": "Files.AddPDF"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/#overview", 
            "text": "FileInfo   Files . AddPDF   (   htmlContent ,   name ,   [   options   ]   )   Adds a new PDF file to repository with html content and returns created  file info .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/#arguments", 
            "text": "String  htmlContent \n Content of file in HTML format.  String  name \nName of file.  Object  options \nPDF generating options. See remarks.  Option may contain one or more following properties:  Number  MarginLeft \nSpecifies the page margin in millimeters. (Default 20mm)  Number  MarginRight \nSpecifies the page margin in millimeters. (Default 20mm)  Number  MarginTop \nSpecifies the page margin in millimeters. (Default 20mm)  Number  MarginBottom \nSpecifies the page margin in millimeters. (Default 20mm)  Number  PageWidth \nSpecifies the page width in millimeters.  Number  PageHeight \nSpecifies the page height in millimeters.  String  HeaderHtml \nSpecifies html content to be inserted top of every page.  Number  HeaderSpacing \nSpacing between header and content in millimeters.  String  FooterHtml \nSpecifies html content to be inserted bottom of every page.  Number  FooterSpacing \nSpacing between footer and content in millimeters.  String  Style \nCSS style to apply on content and header and footer html.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/#remarks", 
            "text": "Header and footer html parameters specifies the single page and may contain following parameters:     Parameter  Description      [page]  Current page number    [frompage]  First page number    [topage]  Total number of pages    [customField]  Other custom property specified in options.     Sample header html  table   style = border-bottom: 1px solid black; width: 100%; \n    tr \n      td   style = width:20%;text-align:center; [logo] / td \n      td   style = width:50%;text-align:center;font-size:1.3em; [documentTitle] / td \n      td   style = width:30% \n       Document Number : [documentNumber] br   / \n       Page : [page]/[topage]\n      / td \n    / tr \n  / table", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/#examples", 
            "text": "Usage  var html =  html body Hello! / body /html ;\n\nvar pdfFile = $Files.AddPDF(html,  sample.pdf );\n\nreturn pdfFile.Id;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.addpdf/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nAddString\n \n(\n \ncontent\n,\n \nname\n,\n \n[\n \ncodePage\n \n]\n \n)\n\n\n\n Adds a new text file to repository and returns created \nfile info\n.\n\n\nArguments\n\n\nString \ncontent\n\n Content of file\n\n\nString \nname\n\nName of file\n\n\nNumber \ncodePage\n\nCode page of string. If not specified UTF8 encoding is used.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.AddString"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/#overview", 
            "text": "FileInfo   Files . AddString   (   content ,   name ,   [   codePage   ]   )  \n Adds a new text file to repository and returns created  file info .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/#arguments", 
            "text": "String  content \n Content of file  String  name \nName of file  Number  codePage \nCode page of string. If not specified UTF8 encoding is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.addstring/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/", 
            "text": "Overview\n\n\nvoid\n \nFiles\n.\nDelete\n \n(\n \nid\n \n)\n\n\n\n Deletes specified file from repository.\n\n\nArguments\n\n\nString \nid\n\n Id number of file\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.Delete"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/#overview", 
            "text": "void   Files . Delete   (   id   )  \n Deletes specified file from repository.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/#arguments", 
            "text": "String  id \n Id number of file", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.delete/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.download/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nDownload\n \n(\n \nname\n,\n \nmimeType\n,\n \noptions\n \n)\n\n\n\n\n\nDownloads a file from remote environment stores in repository and returns created \nfile info\n.\n\n\nArguments\n\n\nString \nname\n\nName of file to be saved.\n\n\nString \nmimeType\n\nMime type of file\n\n\nFileTransferOptions \noptions\n\nDownload options. See \nFileTransferOptions\n for more details.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.Download"
        }, 
        {
            "location": "/ag/pm/sc/files.download/#overview", 
            "text": "FileInfo   Files . Download   (   name ,   mimeType ,   options   )   Downloads a file from remote environment stores in repository and returns created  file info .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.download/#arguments", 
            "text": "String  name \nName of file to be saved.  String  mimeType \nMime type of file  FileTransferOptions  options \nDownload options. See  FileTransferOptions  for more details.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.download/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.download/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.download/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/", 
            "text": "Overview\n\n\nString\n \nFiles\n.\nGetBase64\n \n(\n \nid\n \n)\n\n\n\nReturns content of file as Base64 encoded.\n\n\nArguments\n\n\nString \nid\n\n Id number of file.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.GetBase64"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/#overview", 
            "text": "String   Files . GetBase64   (   id   )  \nReturns content of file as Base64 encoded.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/#arguments", 
            "text": "String  id \n Id number of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.getbase64/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/", 
            "text": "Overview\n\n\nString\n \nFiles\n.\nGetString\n \n(\n \nid\n \n)\n\n\n\nReturns file content as string.\n\n\nArguments\n\n\nString \nid\n\nId number of file\n\n\nRemarks\n\n\nThis function used to retrieve text file contents, if file is binary you should consider to use Files.GetBase64 otherwise file content would be corrupted.\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.GetString"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/#overview", 
            "text": "String   Files . GetString   (   id   )  \nReturns file content as string.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/#arguments", 
            "text": "String  id \nId number of file", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/#remarks", 
            "text": "This function used to retrieve text file contents, if file is binary you should consider to use Files.GetBase64 otherwise file content would be corrupted.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.getstring/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/", 
            "text": "Overview\n\n\nvoid\n \nFiles\n.\nReplace\n \n(\n \nid\n,\n \nreplaceWith\n \n)\n\n\n\nReplaces contents of file with another file.\n\n\nArguments\n\n\nString \nid\n\n Id number of file to be replaced.\n\n\nString \nreplaceWith\n\nId number of file to be replace.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.Replace"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/#overview", 
            "text": "void   Files . Replace   (   id ,   replaceWith   )  \nReplaces contents of file with another file.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/#arguments", 
            "text": "String  id \n Id number of file to be replaced.  String  replaceWith \nId number of file to be replace.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.replace/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/", 
            "text": "Overview\n\n\nFileInfo\n \nFiles\n.\nUpload\n \n(\n \nid\n,\n \noptions\n \n)\n\n\n\nUploads the specified file to remote environment.\n\n\nArguments\n\n\nString \nid\n\n Id number of file to upload\n\n\nFileTransferOptions \noptions\n\nInstance of \nfile transferring options\n.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Files.Upload"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/#overview", 
            "text": "FileInfo   Files . Upload   (   id ,   options   )  \nUploads the specified file to remote environment.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/#arguments", 
            "text": "String  id \n Id number of file to upload  FileTransferOptions  options \nInstance of  file transferring options .", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/files.upload/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/filetransferoptions/", 
            "text": "Overview\n\n\nOptions for file transfer operations.\n\n\n{\n  string RemoteHost;\n  string RemotePath;\n  int Port;\n  string UserName;\n  string Password;\n  string Protocol;\n}\n\n\n\n\nDetails\n\n\nRemoteHost\n\nSpecifies the remote host system. The IP address or hostname may be used.\n\n\nRemotePath\n\nSpecifies the path of the remote file.\n\n\nPort\n\nSpecifies the remote host TCP port number. If not set, the default port will be used.\n\n\nUserName\n\nSpecifies the authentication user name if required.\n\n\nPassword\n\nSpecifies the authentication password if required.\n\n\nProtocol\n\nSpecifies the communication protocol to be used. HTTP, HTTPS, FTP, FTPS, SCP are valid values.", 
            "title": "FileTransferOptions"
        }, 
        {
            "location": "/ag/pm/sc/filetransferoptions/#overview", 
            "text": "Options for file transfer operations.  {\n  string RemoteHost;\n  string RemotePath;\n  int Port;\n  string UserName;\n  string Password;\n  string Protocol;\n}", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/filetransferoptions/#details", 
            "text": "RemoteHost \nSpecifies the remote host system. The IP address or hostname may be used.  RemotePath \nSpecifies the path of the remote file.  Port \nSpecifies the remote host TCP port number. If not set, the default port will be used.  UserName \nSpecifies the authentication user name if required.  Password \nSpecifies the authentication password if required.  Protocol \nSpecifies the communication protocol to be used. HTTP, HTTPS, FTP, FTPS, SCP are valid values.", 
            "title": "Details"
        }, 
        {
            "location": "/ag/pm/sc/identity/", 
            "text": "Overview\n\n\nRepresents a identity in system.\n\n\n{\n    string Id,\n    string Domain,\n    string Name,\n    string Type\n}\n\n\n\n\nIn Workrunner every organizational entity defined as identity. Identity can be a user or organization unit (department) or group commonly called as \"Identity\". \n\n\nDetails\n\n\nId\n\nUnique identifier of identity.\n\n\nDomain\n\nUnique identifier of domain where identity defined.\n\n\nName\n\nDisplay name of identity.\n\n\nType\n\nType of identity.\n\n\nRemarks\n\n\nIdentity type can be one of following types;\n\n\n\n\nUser\n\n\nOrganizationUnit\n\n\nPosition\n\n\nGroup", 
            "title": "Identity"
        }, 
        {
            "location": "/ag/pm/sc/identity/#overview", 
            "text": "Represents a identity in system.  {\n    string Id,\n    string Domain,\n    string Name,\n    string Type\n}  In Workrunner every organizational entity defined as identity. Identity can be a user or organization unit (department) or group commonly called as \"Identity\".", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/identity/#details", 
            "text": "Id \nUnique identifier of identity.  Domain \nUnique identifier of domain where identity defined.  Name \nDisplay name of identity.  Type \nType of identity.", 
            "title": "Details"
        }, 
        {
            "location": "/ag/pm/sc/identity/#remarks", 
            "text": "Identity type can be one of following types;   User  OrganizationUnit  Position  Group", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance/", 
            "text": "", 
            "title": "Instance Methods"
        }, 
        {
            "location": "/ag/pm/sc/instance.culture/", 
            "text": "Overview\n\n\nstring\n \nInstance\n.\nCulture\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the culture of instance.\n\n\nRemarks\n\n\nThis property is assigned on initiating a new instance of process and cannot be changed later.\n\n\nIf active user uses another culture, form is displayed on culture value by this property.\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.Culture"
        }, 
        {
            "location": "/ag/pm/sc/instance.culture/#overview", 
            "text": "string   Instance . Culture   {   get ;   set ;   }  \nGets or sets the culture of instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.culture/#remarks", 
            "text": "This property is assigned on initiating a new instance of process and cannot be changed later.  If active user uses another culture, form is displayed on culture value by this property.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.culture/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.culture/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.id/", 
            "text": "Overview\n\n\nstring\n \nInstance\n.\nId\n \n{\n \nget\n;\n \n}\n\n\n\nGets the globally unique identifier of instance.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.Id"
        }, 
        {
            "location": "/ag/pm/sc/instance.id/#overview", 
            "text": "string   Instance . Id   {   get ;   }  \nGets the globally unique identifier of instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.id/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.id/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.id/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiator/", 
            "text": "Overview\n\n\nIdentity\n \nInstance\n.\nInitiator\n \n{\n \nget\n;\n \n}\n\n\n\nGets the initiator \nidentity\n of instance.\n\n\nRemarks\n\n\nWhen instance is created by system this property returns null value.\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.Initiator"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiator/#overview", 
            "text": "Identity   Instance . Initiator   {   get ;   }  \nGets the initiator  identity  of instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiator/#remarks", 
            "text": "When instance is created by system this property returns null value.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiator/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiator/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiatorworkitem/", 
            "text": "Overview\n\n\nWorkItem\n \nInstance\n.\nInitiatorWorkItem\n \n{\n \nget\n;\n \n}\n\n\n\nGets the initiator \nWorkItem\n.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.InitiatorWorkItem"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiatorworkitem/#overview", 
            "text": "WorkItem   Instance . InitiatorWorkItem   {   get ;   }  \nGets the initiator  WorkItem .", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiatorworkitem/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiatorworkitem/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.initiatorworkitem/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.number/", 
            "text": "Overview\n\n\nNumber\n \nInstance\n.\nNumber\n \n{\n \nget\n;\n \n}\n\n\n\nGets the unique instance number.\n\n\nRemarks\n\n\nThis number is used to identify workflow instances.\n\n\nInstance number is incremental number by for each created new instance by domain.\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.Number"
        }, 
        {
            "location": "/ag/pm/sc/instance.number/#overview", 
            "text": "Number   Instance . Number   {   get ;   }  \nGets the unique instance number.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.number/#remarks", 
            "text": "This number is used to identify workflow instances.  Instance number is incremental number by for each created new instance by domain.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.number/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.number/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.parentworkitem/", 
            "text": "Overview\n\n\nWorkItem\n \nInstance\n.\nParentWorkItem\n \n{\n \nget\n;\n \n}\n\n\n\nGets the parent work item of instance.\n\n\nRemarks\n\n\nIf no parent exists this property returns null value.\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.ParentWorkItem"
        }, 
        {
            "location": "/ag/pm/sc/instance.parentworkitem/#overview", 
            "text": "WorkItem   Instance . ParentWorkItem   {   get ;   }  \nGets the parent work item of instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.parentworkitem/#remarks", 
            "text": "If no parent exists this property returns null value.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.parentworkitem/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.parentworkitem/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.priority/", 
            "text": "Overview\n\n\nNumber\n \nInstance\n.\nPriority\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the priority of instance. \n\n\nRemarks\n\n\nThis property changes the priority of instance in user work lists and job processing order in queue.\n\n\nAll instances are created in Normal (2) state. Changing priority affects all child work items in instance.\n\n\nFollowing values are can be used;\n\n\n\n\n\n\n\n\nValue\n\n\nName\n\n\n\n\n\n\n\n\n\n\n0\n\n\nNone\n\n\n\n\n\n\n1\n\n\nLow\n\n\n\n\n\n\n2\n\n\nNormal\n\n\n\n\n\n\n3\n\n\nHigh\n\n\n\n\n\n\n4\n\n\nVery High\n\n\n\n\n\n\n5\n\n\nCritical\n\n\n\n\n\n\n\n\nExamples\n\n\n$Instance.Priority = 3;\n\n\n\n\nSee Also", 
            "title": "Instance.Priority"
        }, 
        {
            "location": "/ag/pm/sc/instance.priority/#overview", 
            "text": "Number   Instance . Priority   {   get ;   set ;   }  \nGets or sets the priority of instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.priority/#remarks", 
            "text": "This property changes the priority of instance in user work lists and job processing order in queue.  All instances are created in Normal (2) state. Changing priority affects all child work items in instance.  Following values are can be used;     Value  Name      0  None    1  Low    2  Normal    3  High    4  Very High    5  Critical", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.priority/#examples", 
            "text": "$Instance.Priority = 3;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.priority/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.processid/", 
            "text": "Overview\n\n\nstring\n \nInstance\n.\nProcessId\n \n{\n \nget\n;\n \n}\n\n\n\nGets the id number of process that instance created on.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.ProcessId"
        }, 
        {
            "location": "/ag/pm/sc/instance.processid/#overview", 
            "text": "string   Instance . ProcessId   {   get ;   }  \nGets the id number of process that instance created on.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.processid/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.processid/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.processid/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/instance.testmode/", 
            "text": "Overview\n\n\nboolean\n \nInstance\n.\nTestMode\n \n{\n \nget\n;\n \n}\n\n\n\nGets the boolean value that specifies the instance is in test mode or not.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Instance.TestMode"
        }, 
        {
            "location": "/ag/pm/sc/instance.testmode/#overview", 
            "text": "boolean   Instance . TestMode   {   get ;   }  \nGets the boolean value that specifies the instance is in test mode or not.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/instance.testmode/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/instance.testmode/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/instance.testmode/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.id/", 
            "text": "Overview\n\n\nstring\n \nMessage\n.\nId\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\n Gets or sets the Id of message\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Id"
        }, 
        {
            "location": "/ag/pm/sc/message.id/#overview", 
            "text": "string   Message . Id   {   get ;   set ;   }  \n Gets or sets the Id of message", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.id/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.id/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.id/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.from/", 
            "text": "Overview\n\n\nMessageContact\n \nMessage\n.\nFrom\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets the from address of message instance.\n\n\nRemarks\n\n\nThis property also accepts string values when assignment.\n\n\nExamples\n\n\nAssign value\n\n\nmessage.From = \nno-reply@mycompany.com\n;\n\n\n\n\nRead from address\n\n\nvar address = message.From.Address;\nvar displayName = message.From.DisplayName;\n\n\n\n\nSee Also", 
            "title": "Message.From"
        }, 
        {
            "location": "/ag/pm/sc/message.from/#overview", 
            "text": "MessageContact   Message . From   {   get ;   set ;   }  \nGets the from address of message instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.from/#remarks", 
            "text": "This property also accepts string values when assignment.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.from/#examples", 
            "text": "Assign value  message.From =  no-reply@mycompany.com ;  Read from address  var address = message.From.Address;\nvar displayName = message.From.DisplayName;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.from/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.to/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nTo\n \n(\n \naddress\n \n)\n\n\n\n Adds a new recipient to To field.\n\n\nArguments\n\n\nMessageContact | String \nto\n\nRecipient \n\n\nRemarks\n\n\nExamples\n\n\nAdd new recipient\n\n\nmessage.To(\nuser@host.com\n);\n\n\n\n\nAdd new recipient with display name\n\n\nmessage.To(\nuser@host.com \ndisplay\n \nname\n);\n\n\n\n\nSee Also", 
            "title": "Message.To"
        }, 
        {
            "location": "/ag/pm/sc/message.to/#overview", 
            "text": "Message   Message . To   (   address   )  \n Adds a new recipient to To field.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.to/#arguments", 
            "text": "MessageContact | String  to \nRecipient", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.to/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.to/#examples", 
            "text": "Add new recipient  message.To( user@host.com );  Add new recipient with display name  message.To( user@host.com  display   name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.to/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nCC\n \n(\n \naddress\n \n)\n\n\n\nAdds a new recipient to CC field.\n\n\nArguments\n\n\nMessageContact | String \naddress\n\nThe recipient address.\n\n\nRemarks\n\n\nExamples\n\n\nAdd new recipient\n\n\nmessage.CC(\nuser@host.com\n);\n\n\n\n\nSee Also", 
            "title": "Message.CC"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/#overview", 
            "text": "Message   Message . CC   (   address   )  \nAdds a new recipient to CC field.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/#arguments", 
            "text": "MessageContact | String  address \nThe recipient address.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/#examples", 
            "text": "Add new recipient  message.CC( user@host.com );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.cc/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nBCC\n \n(\n \naddress\n \n)\n\n\n\nAdds a new recipient to BCC field.\n\n\nArguments\n\n\nMessageContact | String \naddress\n\nThe recipient address. \n\n\nRemarks\n\n\nExamples\n\n\nAdd new recipient\n\n\nmessage.BCC(\nuser@host.com\n);\n\n\n\n\nSee Also", 
            "title": "Message.BCC"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/#overview", 
            "text": "Message   Message . BCC   (   address   )  \nAdds a new recipient to BCC field.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/#arguments", 
            "text": "MessageContact | String  address \nThe recipient address.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/#examples", 
            "text": "Add new recipient  message.BCC( user@host.com );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.bcc/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.subject/", 
            "text": "Overview\n\n\nString\n \nMessage\n.\nSubject\n \n{\n \nget\n;\n \n}\n\n\n\nGets or sets the subject of message.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Subject"
        }, 
        {
            "location": "/ag/pm/sc/message.subject/#overview", 
            "text": "String   Message . Subject   {   get ;   }  \nGets or sets the subject of message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.subject/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.subject/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.subject/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.body/", 
            "text": "Overview\n\n\nString\n \nMessage\n.\nBody\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the subject of message.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Body"
        }, 
        {
            "location": "/ag/pm/sc/message.body/#overview", 
            "text": "String   Message . Body   {   get ;   set ;   }  \nGets or sets the subject of message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.body/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.body/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.body/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.send/", 
            "text": "Overview\n\n\nvoid\n \nMessage\n.\nSend\n \n(\n \n)\n\n\n\n Queues the message to be send.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Send"
        }, 
        {
            "location": "/ag/pm/sc/message.send/#overview", 
            "text": "void   Message . Send   (   )  \n Queues the message to be send.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.send/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.send/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.send/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nAttach\n \n(\n \nfileName\n,\n \n[\n \nmimeType\n \n],\n \ncontent\n \n)\n\n\n\n Adds a new attachment with base64 encoding.\n\n\nArguments\n\n\nString \nfileName\n\n Name of file attachment.\n\n\nString \nmimeType\n\nMime type of attachment. If specified as empty string or null value \"application/octet-stream\" mime type is used.\n\n\nString \ncontent\n\nBase64 encoded file content.\n\n\nRemarks\n\n\nExamples\n\n\nAttach file\n\n\nmessage.Attach(\nmyFile.bin\n,\napplication/octet-stream\n,\naGVsbG8gd29ybGQ=\n);\n\n\n\n\nSee Also", 
            "title": "Message.Attach"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/#overview", 
            "text": "Message   Message . Attach   (   fileName ,   [   mimeType   ],   content   )  \n Adds a new attachment with base64 encoding.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/#arguments", 
            "text": "String  fileName \n Name of file attachment.  String  mimeType \nMime type of attachment. If specified as empty string or null value \"application/octet-stream\" mime type is used.  String  content \nBase64 encoded file content.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/#examples", 
            "text": "Attach file  message.Attach( myFile.bin , application/octet-stream , aGVsbG8gd29ybGQ= );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.attach/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nAttachString\n \n(\n \nfileName\n,\n \n[\n \nmimeType\n \n],\n \ncontent\n \n)\n\n\n\nAdds a new attachment with plain text.\n\n\nArguments\n\n\nString \nfileName\n\n Name of file attachment.\n\n\nString \nmimeType\n\nMime type of attachment. If specified as empty or null value \"text/text\" is used.\n\n\nString \ncontent\n\nContent of file. \n\n\nRemarks\n\n\nExamples\n\n\nAttach file\n\n\nmessage.AttachString(\ntext.txt\n,\ntext/text\n,\nHello!\n);\n\n\n\n\nSee Also", 
            "title": "Message.AttachString"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/#overview", 
            "text": "Message   Message . AttachString   (   fileName ,   [   mimeType   ],   content   )  \nAdds a new attachment with plain text.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/#arguments", 
            "text": "String  fileName \n Name of file attachment.  String  mimeType \nMime type of attachment. If specified as empty or null value \"text/text\" is used.  String  content \nContent of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/#examples", 
            "text": "Attach file  message.AttachString( text.txt , text/text , Hello! );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.attachstring/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nAttachFile\n \n(\n \nfile\n \n)\n\n\n\nAdds a new attachment with file.\n\n\nArguments\n\n\nFileInfo | Document | String \nfile\n\n Instance of file info or Id number of file.\n\n\nRemarks\n\n\nExamples\n\n\nAttach file\n\n\nmessage.AttachFile( myFileId );\n\n\n\n\nAttach all files in document\n\n\nmessage.AttachFile( myDoc );\n\n\n\n\nSee Also", 
            "title": "Message.AttachFile"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/#overview", 
            "text": "Message   Message . AttachFile   (   file   )  \nAdds a new attachment with file.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/#arguments", 
            "text": "FileInfo | Document | String  file \n Instance of file info or Id number of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/#examples", 
            "text": "Attach file  message.AttachFile( myFileId );  Attach all files in document  message.AttachFile( myDoc );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.attachfile/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.date/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nMessage\n.\nDate\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the date of message. Can be null.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Date"
        }, 
        {
            "location": "/ag/pm/sc/message.date/#overview", 
            "text": "DateTimeOffset   Message . Date   {   get ;   set ;   }  \nGets or sets the date of message. Can be null.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.date/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.date/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.date/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.priority/", 
            "text": "Overview\n\n\nNumber\n \nMessage\n.\nPriority\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the priority of message. \n\n\nRemarks\n\n\nPriority can be one of following values:\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nNone\n\n\n\n\n\n\n1\n\n\nLow\n\n\n\n\n\n\n2\n\n\nNormal\n\n\n\n\n\n\n3\n\n\nHigh\n\n\n\n\n\n\n4\n\n\nVery High\n\n\n\n\n\n\n5\n\n\nCritical\n\n\n\n\n\n\n\n\nChanging this property value affects the prioritize sending mail queue order.\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Priority"
        }, 
        {
            "location": "/ag/pm/sc/message.priority/#overview", 
            "text": "Number   Message . Priority   {   get ;   set ;   }  \nGets or sets the priority of message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.priority/#remarks", 
            "text": "Priority can be one of following values:     Value  Description      0  None    1  Low    2  Normal    3  High    4  Very High    5  Critical     Changing this property value affects the prioritize sending mail queue order.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.priority/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.priority/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.replyto/", 
            "text": "Overview\n\n\nMessageContact\n \nMessage\n.\nReplyTo\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets to reply to property of message. \n\n\nRemarks\n\n\nThis property also accepts string values when assignment.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nMessage.From", 
            "title": "Message.ReplyTo"
        }, 
        {
            "location": "/ag/pm/sc/message.replyto/#overview", 
            "text": "MessageContact   Message . ReplyTo   {   get ;   set ;   }  \nGets or sets to reply to property of message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.replyto/#remarks", 
            "text": "This property also accepts string values when assignment.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.replyto/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.replyto/#see-also", 
            "text": "Message.From", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.signature/", 
            "text": "Overview\n\n\nString\n \nMessage\n.\nSignature\n \n{\n \nget\n;\n \n}\n\n\n\nGets the base64 encoded signature of message.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.Signature"
        }, 
        {
            "location": "/ag/pm/sc/message.signature/#overview", 
            "text": "String   Message . Signature   {   get ;   }  \nGets the base64 encoded signature of message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.signature/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.signature/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.signature/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.sendbefore/", 
            "text": "Overview\n\n\nDateTime\n \nMessage\n.\nSendBefore\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the date time of send before message.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.SendBefore"
        }, 
        {
            "location": "/ag/pm/sc/message.sendbefore/#overview", 
            "text": "DateTime   Message . SendBefore   {   get ;   set ;   }  \nGets or sets the date time of send before message.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.sendbefore/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.sendbefore/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.sendbefore/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.sendafter/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nMessage\n.\nSendAfter\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the date of send after\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.SendAfter"
        }, 
        {
            "location": "/ag/pm/sc/message.sendafter/#overview", 
            "text": "DateTimeOffset   Message . SendAfter   {   get ;   set ;   }  \nGets or sets the date of send after", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.sendafter/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.sendafter/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.sendafter/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.deleteafter/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nMessage\n.\nDeleteAfter\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the date time of delete after.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.DeleteAfter"
        }, 
        {
            "location": "/ag/pm/sc/message.deleteafter/#overview", 
            "text": "DateTimeOffset   Message . DeleteAfter   {   get ;   set ;   }  \nGets or sets the date time of delete after.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.deleteafter/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.deleteafter/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.deleteafter/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/", 
            "text": "Overview\n\n\nstring\n[]\n \nMessage\n.\nGetHeader\n \n(\n \nname\n \n)\n\n\n\n Gets the header values by name.\n\n\nArguments\n\n\nString \nname\n\n Name of header\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.GetHeader"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/#overview", 
            "text": "string []   Message . GetHeader   (   name   )  \n Gets the header values by name.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/#arguments", 
            "text": "String  name \n Name of header", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.getheader/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/", 
            "text": "Overview\n\n\nMessage\n \nMessage\n.\nSetHeader\n \n(\n \nname\n,\n \nvalue\n \n)\n\n\n\nAdds or updates existing header value. \n\n\nArguments\n\n\nString \nname\n\n Name of header\n\n\nString \nvalue\n\nValue of header\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "Message.SetHeader"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/#overview", 
            "text": "Message   Message . SetHeader   (   name ,   value   )  \nAdds or updates existing header value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/#arguments", 
            "text": "String  name \n Name of header  String  value \nValue of header", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/message.setheader/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/", 
            "text": "Overview\n\n\nbool\n \nRestClient\n.\nAuthenticate\n \n(\n \n[\nservice\n],\n \n[\nscope\n],\n \n[\nidentity\n]\n \n)\n\n\n\nAuthenticates the client from specified service with scope and user and returns the authentication result.\n\n\nArguments\n\n\nString \nservice\n\n Name of service to authenticate. Can be empty.\n\n\nString \nscope\n\nScope of authentication context.\n\n\nIdentity | String \nidentity\n\nIdentity to impersonate\n\n\nRemarks\n\n\n\n\nIf service argument empty, client is authenticated with HTTP basic credentials from domain settings.\n\n\nScope argument is based on service parameter and may change to following request's security context. Please refer the service documentation.\n\n\nIdentity is Id number of identity or Identity instance.\n\n\nThis method tries to server-to-server authentication if configured on service, otherwise user consent must be previously given.\n\n\nAuthentication result can be queried with \nRestClient.IsAuthenticated\n property.\n\n\n\n\nExamples\n\n\nvar scopes = \nhttps://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\n;\n\nvar client = $Rest.Create(\nhttps://www.googleapis.com/oauth2/v2/userinfo\n);\n\nif ( client.Authenticate(\nGoogle\n,scopes, $Initiator) ) {\n\n  var userInfo = client.ExecuteJson();\n\n}\n\n\n\n\nSee Also\n\n\n\n\nRestClient.IsAuthenticated", 
            "title": "RestClient.Authenticate"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/#overview", 
            "text": "bool   RestClient . Authenticate   (   [ service ],   [ scope ],   [ identity ]   )  \nAuthenticates the client from specified service with scope and user and returns the authentication result.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/#arguments", 
            "text": "String  service \n Name of service to authenticate. Can be empty.  String  scope \nScope of authentication context.  Identity | String  identity \nIdentity to impersonate", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/#remarks", 
            "text": "If service argument empty, client is authenticated with HTTP basic credentials from domain settings.  Scope argument is based on service parameter and may change to following request's security context. Please refer the service documentation.  Identity is Id number of identity or Identity instance.  This method tries to server-to-server authentication if configured on service, otherwise user consent must be previously given.  Authentication result can be queried with  RestClient.IsAuthenticated  property.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/#examples", 
            "text": "var scopes =  https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email ;\n\nvar client = $Rest.Create( https://www.googleapis.com/oauth2/v2/userinfo );\n\nif ( client.Authenticate( Google ,scopes, $Initiator) ) {\n\n  var userInfo = client.ExecuteJson();\n\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticate/#see-also", 
            "text": "RestClient.IsAuthenticated", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/", 
            "text": "Overview\n\n\nRestClient\n \nRestClient\n.\nAuthenticateBasic\n \n(\n \nuserName\n,\n \npassword\n \n)\n\n\n\nAuthenticates the client with HTTP Basic mechanism.\n\n\nArguments\n\n\nString \nuserName\n\n\nUser name to be sent. Cannot be null or empty. \n\n\nString \nPassword\n\n\nPassword to be sent.\n\n\nRemarks\n\n\n\n\nHTTP Basic method is considered as non-secure mechanism. Password sent is almost in clear text format.\n\n\nSpecifying user name and password from scripting environment is not recommended. \nRestClient.Authenticate\n method automatically resolves the credentials from domain settings and more secure.\n\n\n\n\nExamples\n\n\nSee Also\n\n\n\n\nRestClient.Authenticate", 
            "title": "RestClient.AuthenticateBasic"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/#overview", 
            "text": "RestClient   RestClient . AuthenticateBasic   (   userName ,   password   )  \nAuthenticates the client with HTTP Basic mechanism.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/#arguments", 
            "text": "String  userName  User name to be sent. Cannot be null or empty.   String  Password  Password to be sent.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/#remarks", 
            "text": "HTTP Basic method is considered as non-secure mechanism. Password sent is almost in clear text format.  Specifying user name and password from scripting environment is not recommended.  RestClient.Authenticate  method automatically resolves the credentials from domain settings and more secure.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatebasic/#see-also", 
            "text": "RestClient.Authenticate", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/", 
            "text": "Overview\n\n\nRestClient\n \nRestClient\n.\nAuthenticateJwt\n \n(\n \naccessToken\n \n)\n\n\n\nAuthenticates the client with JWT token.\n\n\nArguments\n\n\nString \naccessToken\n\n\nJWT Access Token\n\n\nRemarks\n\n\n\n\nHTTP Basic method is considered as non-secure mechanism. Password sent is almost in clear text format.\n\n\nSpecifying user name and password from scripting environment is not recommended. \nRestClient.Authenticate\n method automatically resolves the credentials from domain settings and more secure.\n\n\n\n\nExamples\n\n\nSee Also\n\n\n\n\nPlease see \nhttps://jwt.io/\n for more information.", 
            "title": "RestClient.AuthenticateJwt"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/#overview", 
            "text": "RestClient   RestClient . AuthenticateJwt   (   accessToken   )  \nAuthenticates the client with JWT token.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/#arguments", 
            "text": "String  accessToken  JWT Access Token", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/#remarks", 
            "text": "HTTP Basic method is considered as non-secure mechanism. Password sent is almost in clear text format.  Specifying user name and password from scripting environment is not recommended.  RestClient.Authenticate  method automatically resolves the credentials from domain settings and more secure.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatejwt/#see-also", 
            "text": "Please see  https://jwt.io/  for more information.", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/", 
            "text": "Overview\n\n\nRestClient\n \nRestClient\n.\nAuthenticateNtlm\n \n(\n \nuserName\n,\n \npassword\n \n)\n\n\n\nAuthenticates the client with NTLM mechanism.\n\n\nArguments\n\n\nString \nuserName\n\nUser name to be sent. Cannot be null or empty. \n\n\nString \nPassword\n\n\nPassword to be sent.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\nRestClient.Authenticate", 
            "title": "RestClient.AuthenticateNtlm"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/#overview", 
            "text": "RestClient   RestClient . AuthenticateNtlm   (   userName ,   password   )  \nAuthenticates the client with NTLM mechanism.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/#arguments", 
            "text": "String  userName \nUser name to be sent. Cannot be null or empty.   String  Password  Password to be sent.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.authenticatentlm/#see-also", 
            "text": "RestClient.Authenticate", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/", 
            "text": "Overview\n\n\nRestClient\n \nRestClient\n.\nEnsureAuthenticated\n \n(\n \n[\nservice\n],\n \n[\nscope\n],\n \n[\nidentity\n]\n \n)\n\n\n\nAuthenticates the client from specified service with scope if not already authenticated and user and returns the client.\n\n\nArguments\n\n\nString \nservice\n\nName of service to authenticate.\n\n\nString \nscope\n\nScope of authentication context.\n\n\nIdentity | String \nidentity\n\nIdentity to impersonate.\n\n\nRemarks\n\n\n\n\nScope argument is based on service and may change. Please refer the service documentation.\n\n\nIdentity is Id number of identity or Identity instance.\n\n\nThis method tries to server-to-server authentication if configured on service, otherwise user consent must be previously given.\n\n\nIf authentication failed error is thrown.\n\n\n\n\nExamples\n\n\nvar scopes = \nhttps://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\n;\n\nvar client = $Rest.Create(\nhttps://www.googleapis.com/oauth2/v2/userinfo\n);\n\nvar result = client.EnsureAuthenticated(\nGoogle\n,scopes, $Initiator).ExecuteJson();\n\n\n\n\nSee Also\n\n\n\n\nRestClient.Authenticate", 
            "title": "RestClient.EnsureAuthenticated"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/#overview", 
            "text": "RestClient   RestClient . EnsureAuthenticated   (   [ service ],   [ scope ],   [ identity ]   )  \nAuthenticates the client from specified service with scope if not already authenticated and user and returns the client.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/#arguments", 
            "text": "String  service \nName of service to authenticate.  String  scope \nScope of authentication context.  Identity | String  identity \nIdentity to impersonate.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/#remarks", 
            "text": "Scope argument is based on service and may change. Please refer the service documentation.  Identity is Id number of identity or Identity instance.  This method tries to server-to-server authentication if configured on service, otherwise user consent must be previously given.  If authentication failed error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/#examples", 
            "text": "var scopes =  https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email ;\n\nvar client = $Rest.Create( https://www.googleapis.com/oauth2/v2/userinfo );\n\nvar result = client.EnsureAuthenticated( Google ,scopes, $Initiator).ExecuteJson();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.ensureauthenticated/#see-also", 
            "text": "RestClient.Authenticate", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.isauthenticated/", 
            "text": "Overview\n\n\nbool\n \nRestClient\n.\nIsAuthenticated\n \n{\n \nget\n;\n \n}\n\n\n\nGets the status of client currently is authenticated. \n\n\nRemarks\n\n\n\n\nThis property is automatically set when service parameter is specified in $Rest.Create method or Authenticate method is called.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nclient.Authenticate(\nGoogle\n, \nhttps://www.googleapis.com/auth/drive.readonly\n, $Initiator);\n\nconsole.log(\nAuthenticated : \n + client.IsAuthenticated);\n\n\n\n\nAlternative sample;\n\nvar client = $Rest.Create(\nhttp://targetserver\n, \nGoogle\n, \nhttps://www.googleapis.com/auth/drive.readonly\n, $Initiator);\n\nconsole.log(\nAuthenticated : \n + client.IsAuthenticated);\n\n\n\nSee Also", 
            "title": "RestClient.IsAuthenticated"
        }, 
        {
            "location": "/ag/pm/sc/restclient.isauthenticated/#overview", 
            "text": "bool   RestClient . IsAuthenticated   {   get ;   }  \nGets the status of client currently is authenticated.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.isauthenticated/#remarks", 
            "text": "This property is automatically set when service parameter is specified in $Rest.Create method or Authenticate method is called.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.isauthenticated/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nclient.Authenticate( Google ,  https://www.googleapis.com/auth/drive.readonly , $Initiator);\n\nconsole.log( Authenticated :   + client.IsAuthenticated);  Alternative sample; var client = $Rest.Create( http://targetserver ,  Google ,  https://www.googleapis.com/auth/drive.readonly , $Initiator);\n\nconsole.log( Authenticated :   + client.IsAuthenticated);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.isauthenticated/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/", 
            "text": "Overview\n\n\nRestRequest\n \nRestClient\n.\nRequest\n \n(\n \n[\n \nresource\n \n]\n \n,\n \n[\n \nbody\n \n]\n \n)\n\n\n\nCreates a \nRestRequest\n instance.\n\n\nArguments\n\n\nString \nresource\n\nResource part of URL.\n\n\nObject | XmlProxy | String \nbody\n\nRequest body.\n\n\nRemarks\n\n\n\n\nBody argument is optional. If specified request method automatically set to POST, otherwise is set to GET\n\n\nXml type of body is automatically detected if specified as \nXmlNode\n or string with starts with \"\n\" and ends with \"\n\" characters.\n\n\n\n\nExamples\n\n\nJSON Request\n\n\nvar client = $Rest.Create(\nhttp://targetserver/\n);\n\nvar request = client.Request(\nfile/{id}\n, {\n    field : \nvalue\n\n});\n\nrequest.AddUrlParameter(\nid\n,123456);\n\nvar result = request.ExecuteJson();\n\n\n\n\nXml Request\n\n\nvar client = $Rest.Create(\nhttp://targetserver/\n);\n\nvar request = client.Request(\nfile/{id}\n,\nroot\nfield\nvalue\n/\nfield\n/\nroot\n);\n\nrequest.AddUrlParameter(\nid\n,123456);\n\nvar result = request.ExecuteXml();\n\n\n\n\nSee Also", 
            "title": "RestClient.Request"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/#overview", 
            "text": "RestRequest   RestClient . Request   (   [   resource   ]   ,   [   body   ]   )  \nCreates a  RestRequest  instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/#arguments", 
            "text": "String  resource \nResource part of URL.  Object | XmlProxy | String  body \nRequest body.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/#remarks", 
            "text": "Body argument is optional. If specified request method automatically set to POST, otherwise is set to GET  Xml type of body is automatically detected if specified as  XmlNode  or string with starts with \" \" and ends with \" \" characters.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/#examples", 
            "text": "JSON Request  var client = $Rest.Create( http://targetserver/ );\n\nvar request = client.Request( file/{id} , {\n    field :  value \n});\n\nrequest.AddUrlParameter( id ,123456);\n\nvar result = request.ExecuteJson();  Xml Request  var client = $Rest.Create( http://targetserver/ );\n\nvar request = client.Request( file/{id} , root field value / field / root );\n\nrequest.AddUrlParameter( id ,123456);\n\nvar result = request.ExecuteXml();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.request/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restclient.url/", 
            "text": "Overview\n\n\nString\n \nRestClient\n.\nUrl\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the target Url of client\n\n\nRemarks\n\n\n\n\nUrl can contain parameters in curly paranthesis format.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver/\n);\n\nclient.Url = \nhttp://targetserver/file/{id}\n;\n\n\n\n\nSee Also", 
            "title": "RestClient.Url"
        }, 
        {
            "location": "/ag/pm/sc/restclient.url/#overview", 
            "text": "String   RestClient . Url   {   get ;   set ;   }  \nGets or sets the target Url of client", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restclient.url/#remarks", 
            "text": "Url can contain parameters in curly paranthesis format.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restclient.url/#examples", 
            "text": "var client = $Rest.Create( http://targetserver/ );\n\nclient.Url =  http://targetserver/file/{id} ;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restclient.url/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddFile\n \n(\n \nname\n,\n \nfile\n \n)\n\n\n\nAdds the specified file to request. \n\n\nArguments\n\n\nString \nname\n\nName of parameter \n\n\nString \nfile\n\nId number of file\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.AddFile"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/#overview", 
            "text": "RestRequest   RestRequest . AddFile   (   name ,   file   )  \nAdds the specified file to request.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/#arguments", 
            "text": "String  name \nName of parameter   String  file \nId number of file", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfile/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddFileBase64\n \n(\n \nname\n,\n \ncontent\n,\n \nfileName\n,\n \nmimeType\n \n)\n\n\n\nAdds specified base64 encoded file content to request \n\n\nArguments\n\n\nString \nname\n\nName of parameter \n\n\nString \ncontent\n\nBase64 encoded string\n\n\nString \nfileName\n\nName of file including extension\n\n\nString \nmimeType\n\nMime type of file.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.AddFileBase64"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/#overview", 
            "text": "RestRequest   RestRequest . AddFileBase64   (   name ,   content ,   fileName ,   mimeType   )  \nAdds specified base64 encoded file content to request", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/#arguments", 
            "text": "String  name \nName of parameter   String  content \nBase64 encoded string  String  fileName \nName of file including extension  String  mimeType \nMime type of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebase64/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddFileBody\n \n(\n \nfile\n \n)\n\n\n\nAdds specified file as request body.\n\n\nArguments\n\n\nString \nfile\n\n\nId number of file.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\nRestRequest.AddFileBodyBase64\n\n\nRestRequest.SetFileFragment", 
            "title": "RestRequest.AddFileBody"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/#overview", 
            "text": "RestRequest   RestRequest . AddFileBody   (   file   )  \nAdds specified file as request body.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/#arguments", 
            "text": "String  file  Id number of file.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebody/#see-also", 
            "text": "RestRequest.AddFileBodyBase64  RestRequest.SetFileFragment", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddFileBodyBase64\n \n(\n \ncontent\n \n)\n\n\n\nAdds specified base64 encoded file as request body. \n\n\nArguments\n\n\nString \ncontent\n\n\nBase64 encoded file content \n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\nRestRequest.AddFileBody\n\n\nRestRequest.SetFileFragment", 
            "title": "RestRequest.AddFileBodyBase64"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/#overview", 
            "text": "RestRequest   RestRequest . AddFileBodyBase64   (   content   )  \nAdds specified base64 encoded file as request body.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/#arguments", 
            "text": "String  content  Base64 encoded file content", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addfilebodybase64/#see-also", 
            "text": "RestRequest.AddFileBody  RestRequest.SetFileFragment", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddHeader\n \n(\n \nname\n,\n \nvalue\n \n)\n\n\n\nImports a HTTP header on request.\n\n\nArguments\n\n\nString \nname\n\n\nName of HTTP header \n\n\nString \nvalue\n\n\nValue of HTTP header\n\n\nRemarks\n\n\n\n\nName and Value arguments are required. Otherwise error is thrown.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.AddHeader"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/#overview", 
            "text": "RestRequest   RestRequest . AddHeader   (   name ,   value   )  \nImports a HTTP header on request.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/#arguments", 
            "text": "String  name  Name of HTTP header   String  value  Value of HTTP header", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/#remarks", 
            "text": "Name and Value arguments are required. Otherwise error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addheader/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddObject\n \n(\n \nobj\n \n)\n\n\n\nAdds a new object in request \n\n\nArguments\n\n\nObject \nobj\n\n\nObject to add\n\n\nRemarks\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddObject({\n  z : 3\n});\n\nvar result = request.ExecuteJson();\n\n\n\n\nSee Also", 
            "title": "RestRequest.AddObject"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/#overview", 
            "text": "RestRequest   RestRequest . AddObject   (   obj   )  \nAdds a new object in request", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/#arguments", 
            "text": "Object  obj  Object to add", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddObject({\n  z : 3\n});\n\nvar result = request.ExecuteJson();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addobject/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddParameter\n \n(\n \nname\n,\n \nvalue\n,\n \n[\n \ntype\n \n]\n \n)\n\n\n\nAdds a new parameter to request \n\n\nArguments\n\n\nString \nname\n\n\nName of parameter \n\n\nObject \nvalue\n\n\nValue of parameter\n\n\nString \ntype\n\n\nType of parameter. Optional.\n\n\nRemarks\n\n\n\n\nName and value arguments are required.\n\n\nType parameter is optional. If not specified default value is \"GetOrPost\".\n\n\nType parameter can be one of following;\n\n\nGetOrPost\n\n\nCookie\n\n\nHttpHeader\n\n\nRequestBody\n\n\nQueryString\n\n\n\n\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\nrequest.AddParameter(\ny\n, {\n  z : 3\n});\n\n// request body as\n// {\n//    \nx\n : 1,\n//    \ny\n : {\n//        \nz\n : 3\n//    }\n// }\n\nvar response = request.ExecuteJson();\n\n\n\n\nSee Also", 
            "title": "RestRequest.AddParameter"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/#overview", 
            "text": "RestRequest   RestRequest . AddParameter   (   name ,   value ,   [   type   ]   )  \nAdds a new parameter to request", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/#arguments", 
            "text": "String  name  Name of parameter   Object  value  Value of parameter  String  type  Type of parameter. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/#remarks", 
            "text": "Name and value arguments are required.  Type parameter is optional. If not specified default value is \"GetOrPost\".  Type parameter can be one of following;  GetOrPost  Cookie  HttpHeader  RequestBody  QueryString", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\nrequest.AddParameter( y , {\n  z : 3\n});\n\n// request body as\n// {\n//     x  : 1,\n//     y  : {\n//         z  : 3\n//    }\n// }\n\nvar response = request.ExecuteJson();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addparameter/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddQueryParameter\n \n(\n \nname\n,\n \nvalue\n \n)\n\n\n\nRegisters a new query string parameter.\n\n\nArguments\n\n\nString \nname\n\n\nName of query string parameter \n\n\nString \nvalue\n\n\nValue of query string parameter\n\n\nRemarks\n\n\nName argument is required.\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddQueryParameter(\nx\n,1);\n\nvar response = request.Execute(); // executed url : http://targetserver/?x=1\n\n\n\n\nSee Also", 
            "title": "RestRequest.AddQueryParameter"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/#overview", 
            "text": "RestRequest   RestRequest . AddQueryParameter   (   name ,   value   )  \nRegisters a new query string parameter.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/#arguments", 
            "text": "String  name  Name of query string parameter   String  value  Value of query string parameter", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/#remarks", 
            "text": "Name argument is required.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddQueryParameter( x ,1);\n\nvar response = request.Execute(); // executed url : http://targetserver/?x=1", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addqueryparameter/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddUrlParameter\n \n(\n \nname\n,\n \nvalue\n \n)\n\n\n\nRegisters a new Url parameter. \n\n\nArguments\n\n\nString \nname\n\n\nName of Url parameter. \n\n\nString \nvalue\n\n\nValue of Url parameter.\n\n\nRemarks\n\n\nName and Value arguments are required.\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.AddUrlParameter"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/#overview", 
            "text": "RestRequest   RestRequest . AddUrlParameter   (   name ,   value   )  \nRegisters a new Url parameter.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/#arguments", 
            "text": "String  name  Name of Url parameter.   String  value  Value of Url parameter.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/#remarks", 
            "text": "Name and Value arguments are required.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addurlparameter/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nAddXml\n \n(\n \nxml\n \n)\n\n\n\nAdds a new xml content in request\n\n\nArguments\n\n\nXmlNode | String \nxml\n\n\nXml to add \n\n\nRemarks\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddXml($Xml.SelectSingle(\nInput\n));\n\nvar result = request.ExecuteXml($Xml);\n\n\n\n\nSee Also", 
            "title": "RestRequest.AddXml"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/#overview", 
            "text": "RestRequest   RestRequest . AddXml   (   xml   )  \nAdds a new xml content in request", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/#arguments", 
            "text": "XmlNode | String  xml  Xml to add", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddXml($Xml.SelectSingle( Input ));\n\nvar result = request.ExecuteXml($Xml);", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.addxml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.delete/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nDelete\n \n(\n \n)\n\n\n\nPerforms request with DELETE method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), Accepted (202) or No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Delete"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.delete/#overview", 
            "text": "RestResponse   RestRequest . Delete   (   )  \nPerforms request with DELETE method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.delete/#remarks", 
            "text": "This method expects the response status code as OK (200), Accepted (202) or No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.delete/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.delete/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.deleteasync/", 
            "text": "Overview\n\n\nPromise\nRestResponse\n \nRestRequest\n.\nDeleteAsync\n \n(\n \n)\n\n\n\nPerforms request with DELETE method as asynchronous.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), Accepted (202) or No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.DeleteAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.deleteasync/#overview", 
            "text": "Promise RestResponse   RestRequest . DeleteAsync   (   )  \nPerforms request with DELETE method as asynchronous.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.deleteasync/#remarks", 
            "text": "This method expects the response status code as OK (200), Accepted (202) or No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.deleteasync/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.deleteasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.execute/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nExecute\n \n(\n \n)\n\n\n\nExecutes the request and returns the target server response. \n\n\nRemarks\n\n\n\n\nThis method does not verify the response status. \n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nvar response = request.Execute();\n\n\n\n\nSee Also", 
            "title": "RestRequest.Execute"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.execute/#overview", 
            "text": "RestResponse   RestRequest . Execute   (   )  \nExecutes the request and returns the target server response.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.execute/#remarks", 
            "text": "This method does not verify the response status.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.execute/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nvar response = request.Execute();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.execute/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executeasync/", 
            "text": "Overview\n\n\nPromise\nRestResponse\n \nRestRequest\n.\nExecuteAsync\n \n(\n \n)\n\n\n\nExecutes the request and returns the target server response as asynchronous. \n\n\nRemarks\n\n\n\n\nThis method does not verify the response status. \n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nrequest.ExecuteAsync().then(function(response) {\n    // ..\n});\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executeasync/#overview", 
            "text": "Promise RestResponse   RestRequest . ExecuteAsync   (   )  \nExecutes the request and returns the target server response as asynchronous.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executeasync/#remarks", 
            "text": "This method does not verify the response status.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executeasync/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nrequest.ExecuteAsync().then(function(response) {\n    // ..\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executeasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejson/", 
            "text": "Overview\n\n\nObject\n \nRestRequest\n.\nExecuteJson\n \n(\n \n)\n\n\n\nExecutes the request and returns the result as object. \n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nrequest.ExecuteAsync().then(function(response) {\n    // ..\n});\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteJson"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejson/#overview", 
            "text": "Object   RestRequest . ExecuteJson   (   )  \nExecutes the request and returns the result as object.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejson/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejson/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nrequest.ExecuteAsync().then(function(response) {\n    // ..\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejson/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejsonasync/", 
            "text": "Overview\n\n\nPromise\nObject\n \nRestRequest\n.\nExecuteJsonAsync\n \n(\n \n)\n\n\n\nExecutes the request and returns the result as object.\n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nrequest.ExecuteJsonAsync().then(function(result) {\n    // ..\n});\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteJsonAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejsonasync/#overview", 
            "text": "Promise Object   RestRequest . ExecuteJsonAsync   (   )  \nExecutes the request and returns the result as object.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejsonasync/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejsonasync/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nrequest.ExecuteJsonAsync().then(function(result) {\n    // ..\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executejsonasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestring/", 
            "text": "Overview\n\n\nString\n \nRestRequest\n.\nExecuteString\n \n(\n \n)\n\n\n\n Executes the request and returns the result as string\n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nvar result = request.ExecuteString();\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteString"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestring/#overview", 
            "text": "String   RestRequest . ExecuteString   (   )  \n Executes the request and returns the result as string", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestring/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestring/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nvar result = request.ExecuteString();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestring/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestringasync/", 
            "text": "Overview\n\n\nPromise\nString\n \nRestRequest\n.\nExecuteStringAsync\n \n(\n \n)\n\n\n\n Executes the request and returns the result as string\n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nrequest.ExecuteStringAsync().then(function(result) {\n    // ...\n});\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteStringAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestringasync/#overview", 
            "text": "Promise String   RestRequest . ExecuteStringAsync   (   )  \n Executes the request and returns the result as string", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestringasync/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestringasync/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nrequest.ExecuteStringAsync().then(function(result) {\n    // ...\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executestringasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/", 
            "text": "Overview\n\n\nXmlNode\n \nRestRequest\n.\nExecuteXml\n \n(\n \n[\n \ncontextNode\n \n]\n \n)\n\n\n\nExecutes the request and returns the result as Xml node. \n\n\nArguments\n\n\nXmlNode contextNode\n Instance of xml node to use as context to reference namespace and schema set. This parameter is optional.\n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nvar result = request.ExecuteXml();\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteXml"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/#overview", 
            "text": "XmlNode   RestRequest . ExecuteXml   (   [   contextNode   ]   )  \nExecutes the request and returns the result as Xml node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/#arguments", 
            "text": "XmlNode contextNode\n Instance of xml node to use as context to reference namespace and schema set. This parameter is optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nvar result = request.ExecuteXml();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/", 
            "text": "Overview\n\n\nPromise\nXmlNode\n \nRestRequest\n.\nExecuteXmlAsync\n \n(\n \n[\n \ncontextNode\n \n]\n \n)\n\n\n\nExecutes the request and returns the result as Xml node. \n\n\nArguments\n\n\nXmlNode contextNode\n Instance of xml node to use as context to reference namespace and schema set. This parameter is optional.\n\n\nRemarks\n\n\n\n\nUnlike \nRestRequest.Execute\n method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown\n\n\n\n\nExamples\n\n\nvar client = $Rest.Create(\nhttp://targetserver\n);\n\nvar request = client.Request();\n\nrequest.AddParameter(\nx\n, 1);\n\nrequest.ExecuteXml().then(function(result) {\n    // ...\n});\n\n\n\n\nSee Also", 
            "title": "RestRequest.ExecuteXmlAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/#overview", 
            "text": "Promise XmlNode   RestRequest . ExecuteXmlAsync   (   [   contextNode   ]   )  \nExecutes the request and returns the result as Xml node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/#arguments", 
            "text": "XmlNode contextNode\n Instance of xml node to use as context to reference namespace and schema set. This parameter is optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/#remarks", 
            "text": "Unlike  RestRequest.Execute  method this method verifes the server status code is returned as OK ( HTTP 200 ). If not exception is thrown", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/#examples", 
            "text": "var client = $Rest.Create( http://targetserver );\n\nvar request = client.Request();\n\nrequest.AddParameter( x , 1);\n\nrequest.ExecuteXml().then(function(result) {\n    // ...\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.executexmlasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nExpect\n \n(\n \nstatus\n \n)\n\n\n\nSets the expected status code to verify request \n\n\nArguments\n\n\nString \nstatus\n\nStatus code\n\n\nRemarks\n\n\n\n\nIf this method is not used, default expected status codes are used.\n\n\nThis method can be called multiple times to allow different status codes.\n\n\nStatus Code must be one of the following values from \"Status\" column;\n\n\n\n\n\n\n\n\n\n\nLocation\n\n\nRelated Elements\n\n\n\n\n\n\n\n\n\n\nContinue\n\n\n100\n\n\n\n\n\n\nSwitchingProtocols\n\n\n101\n\n\n\n\n\n\nOK\n\n\n200\n\n\n\n\n\n\nCreated\n\n\n201\n\n\n\n\n\n\nAccepted\n\n\n202\n\n\n\n\n\n\nNonAuthoritativeInformation\n\n\n203\n\n\n\n\n\n\nNoContent\n\n\n204\n\n\n\n\n\n\nResetContent\n\n\n205\n\n\n\n\n\n\nPartialContent\n\n\n206\n\n\n\n\n\n\nAmbiguous\n\n\n300\n\n\n\n\n\n\nMultipleChoices\n\n\n300\n\n\n\n\n\n\nMoved\n\n\n301\n\n\n\n\n\n\nMovedPermanently\n\n\n301\n\n\n\n\n\n\nFound\n\n\n302\n\n\n\n\n\n\nRedirect\n\n\n302\n\n\n\n\n\n\nRedirectMethod\n\n\n303\n\n\n\n\n\n\nSeeOther\n\n\n303\n\n\n\n\n\n\nNotModified\n\n\n304\n\n\n\n\n\n\nUseProxy\n\n\n305\n\n\n\n\n\n\nUnused\n\n\n306\n\n\n\n\n\n\nRedirectKeepVerb\n\n\n307\n\n\n\n\n\n\nTemporaryRedirect\n\n\n307\n\n\n\n\n\n\nBadRequest\n\n\n400\n\n\n\n\n\n\nUnauthorized\n\n\n401\n\n\n\n\n\n\nPaymentRequired\n\n\n402\n\n\n\n\n\n\nForbidden\n\n\n403\n\n\n\n\n\n\nNotFound\n\n\n404\n\n\n\n\n\n\nMethodNotAllowed\n\n\n405\n\n\n\n\n\n\nNotAcceptable\n\n\n406\n\n\n\n\n\n\nProxyAuthenticationRequired\n\n\n407\n\n\n\n\n\n\nRequestTimeout\n\n\n408\n\n\n\n\n\n\nConflict\n\n\n409\n\n\n\n\n\n\nGone\n\n\n410\n\n\n\n\n\n\nLengthRequired\n\n\n411\n\n\n\n\n\n\nPreconditionFailed\n\n\n412\n\n\n\n\n\n\nRequestEntityTooLarge\n\n\n413\n\n\n\n\n\n\nRequestUriTooLong\n\n\n414\n\n\n\n\n\n\nUnsupportedMediaType\n\n\n415\n\n\n\n\n\n\nRequestedRangeNotSatisfiable\n\n\n416\n\n\n\n\n\n\nExpectationFailed\n\n\n417\n\n\n\n\n\n\nUpgradeRequired\n\n\n426\n\n\n\n\n\n\nInternalServerError\n\n\n500\n\n\n\n\n\n\nNotImplemented\n\n\n501\n\n\n\n\n\n\nBadGateway\n\n\n502\n\n\n\n\n\n\nServiceUnavailable\n\n\n503\n\n\n\n\n\n\nGatewayTimeout\n\n\n504\n\n\n\n\n\n\nHttpVersionNotSupported\n\n\n505\n\n\n\n\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Expect"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/#overview", 
            "text": "RestRequest   RestRequest . Expect   (   status   )  \nSets the expected status code to verify request", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/#arguments", 
            "text": "String  status \nStatus code", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/#remarks", 
            "text": "If this method is not used, default expected status codes are used.  This method can be called multiple times to allow different status codes.  Status Code must be one of the following values from \"Status\" column;      Location  Related Elements      Continue  100    SwitchingProtocols  101    OK  200    Created  201    Accepted  202    NonAuthoritativeInformation  203    NoContent  204    ResetContent  205    PartialContent  206    Ambiguous  300    MultipleChoices  300    Moved  301    MovedPermanently  301    Found  302    Redirect  302    RedirectMethod  303    SeeOther  303    NotModified  304    UseProxy  305    Unused  306    RedirectKeepVerb  307    TemporaryRedirect  307    BadRequest  400    Unauthorized  401    PaymentRequired  402    Forbidden  403    NotFound  404    MethodNotAllowed  405    NotAcceptable  406    ProxyAuthenticationRequired  407    RequestTimeout  408    Conflict  409    Gone  410    LengthRequired  411    PreconditionFailed  412    RequestEntityTooLarge  413    RequestUriTooLong  414    UnsupportedMediaType  415    RequestedRangeNotSatisfiable  416    ExpectationFailed  417    UpgradeRequired  426    InternalServerError  500    NotImplemented  501    BadGateway  502    ServiceUnavailable  503    GatewayTimeout  504    HttpVersionNotSupported  505", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.expect/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.get/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nGet\n \n(\n \n)\n\n\n\n Performs request with GET method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204) \n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Get"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.get/#overview", 
            "text": "RestResponse   RestRequest . Get   (   )  \n Performs request with GET method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.get/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.get/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.getasync/", 
            "text": "Overview\n\n\nPromise\nltRestResponse\n \nRestRequest\n.\nGetAsync\n \n(\n \n)\n\n\n\n Performs request with GET method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204) \n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.GetAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.getasync/#overview", 
            "text": "Promise ltRestResponse   RestRequest . GetAsync   (   )  \n Performs request with GET method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.getasync/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.getasync/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.getasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.method/", 
            "text": "Overview\n\n\nString\n \nRestRequest\n.\nMethod\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the HTTP method of request.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Method"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.method/#overview", 
            "text": "String   RestRequest . Method   {   get ;   set ;   }  \nGets or sets the HTTP method of request.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.method/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.method/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.method/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patch/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nPatch\n \n(\n \n)\n\n\n\n Performs request with PATCH method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204) \n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Patch"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patch/#overview", 
            "text": "RestResponse   RestRequest . Patch   (   )  \n Performs request with PATCH method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patch/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patch/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patch/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patchasync/", 
            "text": "Overview\n\n\nPromise\nRestResponse\n \nRestRequest\n.\nPatchAsync\n \n(\n \n)\n\n\n\n Performs request with PATCH method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204) \n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.PatchAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patchasync/#overview", 
            "text": "Promise RestResponse   RestRequest . PatchAsync   (   )  \n Performs request with PATCH method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patchasync/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patchasync/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.patchasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.post/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nPost\n \n(\n \n)\n\n\n\n Performs request with POST method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), Accepted (202) or No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Post"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.post/#overview", 
            "text": "RestResponse   RestRequest . Post   (   )  \n Performs request with POST method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.post/#remarks", 
            "text": "This method expects the response status code as OK (200), Accepted (202) or No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.post/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.post/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.postasync/", 
            "text": "Overview\n\n\nPromise\nRestResponse\n \nRestRequest\n.\nPostAsync\n \n(\n \n)\n\n\n\n Performs request with POST method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), Accepted (202) or No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.PostAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.postasync/#overview", 
            "text": "Promise RestResponse   RestRequest . PostAsync   (   )  \n Performs request with POST method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.postasync/#remarks", 
            "text": "This method expects the response status code as OK (200), Accepted (202) or No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.postasync/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.postasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.put/", 
            "text": "Overview\n\n\nRestResponse\n \nRestRequest\n.\nPut\n \n(\n \n)\n\n\n\n Performs request with PUT method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.Put"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.put/#overview", 
            "text": "RestResponse   RestRequest . Put   (   )  \n Performs request with PUT method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.put/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.put/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.put/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.putasync/", 
            "text": "Overview\n\n\nPromise\nRestResponse\n \nRestRequest\n.\nPutAsync\n \n(\n \n)\n\n\n\nPerforms request with PUT method.\n\n\nRemarks\n\n\n\n\nThis method expects the response status code as OK (200), No Content (204)\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestRequest.PutAsync"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.putasync/#overview", 
            "text": "Promise RestResponse   RestRequest . PutAsync   (   )  \nPerforms request with PUT method.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.putasync/#remarks", 
            "text": "This method expects the response status code as OK (200), No Content (204)", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.putasync/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.putasync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/", 
            "text": "Overview\n\n\nRestRequest\n \nRestRequest\n.\nSetFileFragment\n \n(\n \nsize\n \n)\n\n\n\n Sets to buffer size for partial upload fragment size.\n\n\nArguments\n\n\nNumber \nsize\n\nSize of fragment size.\n\n\nRemarks\n\n\n\n\nThis method used to send body file uploads in small fragments (chunks)\n\n\nBefore using this method, please ensure target rest service is supports the \"Content-Range\" header.\n\n\n\n\nExamples\n\n\nSee Also\n\n\n\n\nRestRequest.AddFileBody\n\n\nRestRequest.AddFileBodyBase64", 
            "title": "RestRequest.SetFileFragment"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/#overview", 
            "text": "RestRequest   RestRequest . SetFileFragment   (   size   )  \n Sets to buffer size for partial upload fragment size.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/#arguments", 
            "text": "Number  size \nSize of fragment size.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/#remarks", 
            "text": "This method used to send body file uploads in small fragments (chunks)  Before using this method, please ensure target rest service is supports the \"Content-Range\" header.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restrequest.setfilefragment/#see-also", 
            "text": "RestRequest.AddFileBody  RestRequest.AddFileBodyBase64", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.content/", 
            "text": "Overview\n\n\nString\n \nRestResponse\n.\nContent\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the response content\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.Content"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.content/#overview", 
            "text": "String   RestResponse . Content   {   get ;   }  \n Gets the response content", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.content/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.content/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.content/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.contenttype/", 
            "text": "Overview\n\n\nString\n \nRestResponse\n.\nContentType\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the content type of response\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.ContentType"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.contenttype/#overview", 
            "text": "String   RestResponse . ContentType   {   get ;   }  \n Gets the content type of response", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.contenttype/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.contenttype/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.contenttype/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/", 
            "text": "Overview\n\n\nString\n \nRestResponse\n.\nGetHeader\n \n(\n \nname\n \n)\n\n\n\nReturns a header value\n\n\nArguments\n\n\nString \nname\n\n\nName of header\n\n\nReturn Value\n\n\nHeader value in string if found, otherwise null.\n\n\nRemarks\n\n\n\n\nHeader name search performed case insensitively.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.GetHeader"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#overview", 
            "text": "String   RestResponse . GetHeader   (   name   )  \nReturns a header value", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#arguments", 
            "text": "String  name  Name of header", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#return-value", 
            "text": "Header value in string if found, otherwise null.", 
            "title": "Return Value"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#remarks", 
            "text": "Header name search performed case insensitively.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.getheader/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.statuscode/", 
            "text": "Overview\n\n\nString\n \nRestResponse\n.\nStatusCode\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the status code of response\n\n\nRemarks\n\n\n\n\nThis property may be one of following values;\n\n\nOK\n\n\nMoved\n\n\nNotFound\n\n\nForbidden\n\n\nMethodNotAllowed\n\n\nRequestEntityTooLarge\n\n\nRequestUriTooLong\n\n\nInternalServerError\n\n\nServiceUnavailable\n\n\nGatewayTimeout\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.StatusCode"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.statuscode/#overview", 
            "text": "String   RestResponse . StatusCode   {   get ;   }  \n Gets the status code of response", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.statuscode/#remarks", 
            "text": "This property may be one of following values;  OK  Moved  NotFound  Forbidden  MethodNotAllowed  RequestEntityTooLarge  RequestUriTooLong  InternalServerError  ServiceUnavailable  GatewayTimeout", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.statuscode/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.statuscode/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.tojson/", 
            "text": "Overview\n\n\nObject\n \nRestResponse\n.\nToJson\n \n(\n \n)\n\n\n\nReturns \nContent\n property as JSON object.\n\n\nRemarks\n\n\n\n\nIf content is not in JSON syntax, parsing error is occurs.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.ToJson"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.tojson/#overview", 
            "text": "Object   RestResponse . ToJson   (   )  \nReturns  Content  property as JSON object.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.tojson/#remarks", 
            "text": "If content is not in JSON syntax, parsing error is occurs.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.tojson/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.tojson/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.toxml/", 
            "text": "Overview\n\n\nXmlNode\n \nRestResponse\n.\nToXml\n \n(\n \n)\n\n\n\n Returns \nContent\n property as \nXml\n node.\n\n\nRemarks\n\n\n\n\nIf content is not in XML syntax, parsing error occurs.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.ToXml"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.toxml/#overview", 
            "text": "XmlNode   RestResponse . ToXml   (   )  \n Returns  Content  property as  Xml  node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.toxml/#remarks", 
            "text": "If content is not in XML syntax, parsing error occurs.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.toxml/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.toxml/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.verify/", 
            "text": "Overview\n\n\nRestResponse\n \nRestResponse\n.\nVerify\n \n(\n \n)\n\n\n\nVerifies the \nRestResponse.StatusCode\n is OK and returns current instance. \n\n\nRemarks\n\n\n\n\nIf status code is not set to OK value error is thrown.\n\n\n\n\nExamples\n\n\nSee Also", 
            "title": "RestResponse.Verify"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.verify/#overview", 
            "text": "RestResponse   RestResponse . Verify   (   )  \nVerifies the  RestResponse.StatusCode  is OK and returns current instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.verify/#remarks", 
            "text": "If status code is not set to OK value error is thrown.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.verify/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/restresponse.verify/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem/", 
            "text": "WorkItem.Caption\n\n\nWorkItem.CompletedBy\n\n\nWorkItem.Data\n\n\nWorkItem.DeadlineDate\n\n\nWorkItem.End\n\n\nWorkItem.Forward\n\n\nWorkItem.Get\n\n\nWorkItem.Id\n\n\nWorkItem.Initiate\n\n\nWorkItem.Instance\n\n\nWorkItem.Instructions\n\n\nWorkItem.IsDeadlined\n\n\nWorkItem.Name\n\n\nWorkItem.NextItems\n\n\nWorkItem.NextReminder\n\n\nWorkItem.Previous\n\n\nWorkItem.Process\n\n\nWorkItem.ProcessWorkItem\n\n\nWorkItem.ReProcess\n\n\nWorkItem.SelectedAction\n\n\nWorkItem.Start\n\n\nWorkItem.State\n\n\nWorkItem.Terminate\n\n\nWorkItem.Trigger", 
            "title": "WorkItem Methods"
        }, 
        {
            "location": "/ag/pm/sc/workitem.caption/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nCaption\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the caption of work item to display in user interfaces. \n\n\nRemarks\n\n\nCaption is evaluated from task caption by default but unlike \nname property\n, this property can be changed later.\n\n\nIf state is not in Waiting or Created trying to set this property prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.Name", 
            "title": "WorkItem.Caption"
        }, 
        {
            "location": "/ag/pm/sc/workitem.caption/#overview", 
            "text": "string   WorkItem . Caption   {   get ;   set ;   }  \nGets or sets the caption of work item to display in user interfaces.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.caption/#remarks", 
            "text": "Caption is evaluated from task caption by default but unlike  name property , this property can be changed later.  If state is not in Waiting or Created trying to set this property prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.caption/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.caption/#see-also", 
            "text": "WorkItem.Name", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.completedby/", 
            "text": "Overview\n\n\nIdentity\n \nWorkItem\n.\nCompletedBy\n \n{\n \nget\n;\n \n}\n\n\n\nGets the \nIdentity\n that completes the work item.\n\n\nRemarks\n\n\nThis property is filled when the work item is committed by user. Otherwise returns null value.\n\n\nWhen work item is processed by system (by scripting or module type tasks) this property returns null value.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.CompletedBy"
        }, 
        {
            "location": "/ag/pm/sc/workitem.completedby/#overview", 
            "text": "Identity   WorkItem . CompletedBy   {   get ;   }  \nGets the  Identity  that completes the work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.completedby/#remarks", 
            "text": "This property is filled when the work item is committed by user. Otherwise returns null value.  When work item is processed by system (by scripting or module type tasks) this property returns null value.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.completedby/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.completedby/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.data/", 
            "text": "Overview\n\n\nXmlNode\n \nWorkItem\n.\nData\n \n{\n \nget\n;\n \n}\n\n\n\nGets the attached data node of work item.\n\n\nRemarks\n\n\nThis property allows to read only access to work item data and any changes on \nXmlNode\n is not saved to database for data protection.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Data"
        }, 
        {
            "location": "/ag/pm/sc/workitem.data/#overview", 
            "text": "XmlNode   WorkItem . Data   {   get ;   }  \nGets the attached data node of work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.data/#remarks", 
            "text": "This property allows to read only access to work item data and any changes on  XmlNode  is not saved to database for data protection.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.data/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.data/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.deadlinedate/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nWorkItem\n.\nDeadlineDate\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets deadline date of work item.\n\n\nRemarks\n\n\nIf no deadline date specified returns null.\n\n\nIf \nstate\n is not in Waiting or Created trying to set this property prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.DeadlineDate"
        }, 
        {
            "location": "/ag/pm/sc/workitem.deadlinedate/#overview", 
            "text": "DateTimeOffset   WorkItem . DeadlineDate   {   get ;   set ;   }  \nGets or sets deadline date of work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.deadlinedate/#remarks", 
            "text": "If no deadline date specified returns null.  If  state  is not in Waiting or Created trying to set this property prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.deadlinedate/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.deadlinedate/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.end/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nWorkItem\n.\nEnd\n \n{\n \nget\n;\n \n}\n\n\n\nGets the end date of work item. End date is set when work item is completed with action by user or system.\n\n\nRemarks\n\n\nIf \nstate\n state is not in Waiting or Created this property returns null.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.End"
        }, 
        {
            "location": "/ag/pm/sc/workitem.end/#overview", 
            "text": "DateTimeOffset   WorkItem . End   {   get ;   }  \nGets the end date of work item. End date is set when work item is completed with action by user or system.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.end/#remarks", 
            "text": "If  state  state is not in Waiting or Created this property returns null.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.end/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.end/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nForward\n \n(\n \ntargetIdentity\n,\n \n[\n \ncurrentIdentity\n \n]\n \n)\n\n\n\nForwards the current work item to specified target identity. \n\n\nArguments\n\n\nIdentity | string \ntargetIdentity\n\nSpecifies the target identity to delegate work item.\n\n\nIdentity | string \ncurrentIdentity\n\nSpecifies identiy of delegator. Can be null.\n\n\nRemarks\n\n\nIf workitem state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nIdentity", 
            "title": "WorkItem.Forward"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/#overview", 
            "text": "WorkItem   WorkItem . Forward   (   targetIdentity ,   [   currentIdentity   ]   )  \nForwards the current work item to specified target identity.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/#arguments", 
            "text": "Identity | string  targetIdentity \nSpecifies the target identity to delegate work item.  Identity | string  currentIdentity \nSpecifies identiy of delegator. Can be null.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/#remarks", 
            "text": "If workitem state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.forward/#see-also", 
            "text": "Identity", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nGet\n \n(\n \nid\n \n)\n\n\n\nGets an \nWorkItem\n instance by specified Id number. \n\n\nArguments\n\n\nstring \nid\n\n\nSpecifies the id number of work item to get. \n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Get"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/#overview", 
            "text": "WorkItem   WorkItem . Get   (   id   )  \nGets an  WorkItem  instance by specified Id number.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/#arguments", 
            "text": "string  id  Specifies the id number of work item to get.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.get/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.id/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nId\n \n{\n \nget\n;\n \n}\n\n\n\nGets the globally unique identifier of work item.\n\n\nRemarks\n\n\nId number is in \nGUID\n format.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Id"
        }, 
        {
            "location": "/ag/pm/sc/workitem.id/#overview", 
            "text": "string   WorkItem . Id   {   get ;   }  \nGets the globally unique identifier of work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.id/#remarks", 
            "text": "Id number is in  GUID  format.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.id/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.id/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nInitiate\n \n(\n \ninputData\n,\n \n[\n \nprocess\n \n],\n \n[\n \noptions\n \n]\n \n)\n\n\n\nInitiates a new instance by specified arguments. \n\n\nArguments\n\n\nstring | XmlNode \ninputData\n\nSpecifies the input data of new instance. Can be specified as xml string or XmlNode. \n\n\nstring \nprocess\n\nSpecifies the process of new instance. Can be Name or Id number of process. If not specified current process is used.\n\n\nobject \noptions\n\nSpecifies the options of new instance.\n\n\nCan be contain any of following properties.\n\n\nstring \ntask\n\nName or Id of task to be initiated. If not specified, uses the Initiator task if found only one exist, otherwise throws error.\n\n\nstring \nculture\n\nCulture of new instance. If not specified uses the current instance culture.\n\n\nIdentity | string \ninitiator\n\nIdentity of initiator. If not specified null value used.\n\n\nstring \nparent\n\nParent work item. If not specified current work item is set as parent.\n\n\nboolean \ntestMode\n\nSpecifies the initiate in test mode or not. If not specified uses the current instance's test mode state.\n\n\nRemarks\n\n\nExamples\n\n\nBasic Usage\n\n\nvar formData = \nRoot\nName\nLady\n/\nName\nSurname\nGaga\n/\nSurname\n;\nvar childWorkItem = $WorkItem.Initiate(formData, \nMy Process\n);\n\n\n\n\nInitiate by Task Name\n\n\nvar formData = \nRoot\nName\nLady\n/\nName\nSurname\nGaga\n/\nSurname\n;\nvar childWorkItem = $WorkItem.Initiate(formData, \nMy Process\n, {\n      task : \nMy Task\n\n});\n\n\n\n\nInitiate with User\n\n\nvar formData = \nRoot\nName\nLady\n/\nName\nSurname\nGaga\n/\nSurname\n;\nvar initiator = $Membership.Administrator;\nvar childWorkItem = $WorkItem.Initiate(formData, \nMy Process\n, {\n        task : \nMy Task\n,\n        initiator : initiator.id\n});\n\n\n\n\nSee Also", 
            "title": "WorkItem.Initiate"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/#overview", 
            "text": "WorkItem   WorkItem . Initiate   (   inputData ,   [   process   ],   [   options   ]   )  \nInitiates a new instance by specified arguments.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/#arguments", 
            "text": "string | XmlNode  inputData \nSpecifies the input data of new instance. Can be specified as xml string or XmlNode.   string  process \nSpecifies the process of new instance. Can be Name or Id number of process. If not specified current process is used.  object  options \nSpecifies the options of new instance.  Can be contain any of following properties.  string  task \nName or Id of task to be initiated. If not specified, uses the Initiator task if found only one exist, otherwise throws error.  string  culture \nCulture of new instance. If not specified uses the current instance culture.  Identity | string  initiator \nIdentity of initiator. If not specified null value used.  string  parent \nParent work item. If not specified current work item is set as parent.  boolean  testMode \nSpecifies the initiate in test mode or not. If not specified uses the current instance's test mode state.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/#examples", 
            "text": "Basic Usage  var formData =  Root Name Lady / Name Surname Gaga / Surname ;\nvar childWorkItem = $WorkItem.Initiate(formData,  My Process );  Initiate by Task Name  var formData =  Root Name Lady / Name Surname Gaga / Surname ;\nvar childWorkItem = $WorkItem.Initiate(formData,  My Process , {\n      task :  My Task \n});  Initiate with User  var formData =  Root Name Lady / Name Surname Gaga / Surname ;\nvar initiator = $Membership.Administrator;\nvar childWorkItem = $WorkItem.Initiate(formData,  My Process , {\n        task :  My Task ,\n        initiator : initiator.id\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.initiate/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instance/", 
            "text": "Overview\n\n\nInstance\n \nWorkItem\n.\nInstance\n \n{\n \nget\n;\n \n}\n\n\n\nGets the \ninstance\n of work item belongs. \n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Instance"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instance/#overview", 
            "text": "Instance   WorkItem . Instance   {   get ;   }  \nGets the  instance  of work item belongs.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instance/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instance/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instance/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instructions/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nInstructions\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the instructions of work item to display in user interfaces.\n\n\nRemarks\n\n\nInstructions is copied from \ntask instructions\n by default but can be changed if needed.\n\n\nIf \nstate\n is not in Waiting or Created trying to set this property prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.Caption\n\n\nWorkItem.Name", 
            "title": "WorkItem.Instructions"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instructions/#overview", 
            "text": "string   WorkItem . Instructions   {   get ;   set ;   }  \nGets or sets the instructions of work item to display in user interfaces.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instructions/#remarks", 
            "text": "Instructions is copied from  task instructions  by default but can be changed if needed.  If  state  is not in Waiting or Created trying to set this property prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instructions/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.instructions/#see-also", 
            "text": "WorkItem.Caption  WorkItem.Name", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.isdeadlined/", 
            "text": "Overview\n\n\nboolean\n \nWorkItem\n.\nIsDeadlined\n \n{\n \nget\n;\n \n}\n\n\n\nGets boolean value that specifies the current work item is deadlined. \n\n\nRemarks\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.DeadlineDate", 
            "title": "WorkItem.IsDeadlined"
        }, 
        {
            "location": "/ag/pm/sc/workitem.isdeadlined/#overview", 
            "text": "boolean   WorkItem . IsDeadlined   {   get ;   }  \nGets boolean value that specifies the current work item is deadlined.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.isdeadlined/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.isdeadlined/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.isdeadlined/#see-also", 
            "text": "WorkItem.DeadlineDate", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.name/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nName\n \n{\n \nget\n;\n \n}\n\n\n\nGets the name of work item. \n\n\nRemarks\n\n\nName is evaluated from task name and cannot be changed. Please use \nWorkItem.Caption\n property if you want to change displayed text to user.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.Caption", 
            "title": "WorkItem.Name"
        }, 
        {
            "location": "/ag/pm/sc/workitem.name/#overview", 
            "text": "string   WorkItem . Name   {   get ;   }  \nGets the name of work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.name/#remarks", 
            "text": "Name is evaluated from task name and cannot be changed. Please use  WorkItem.Caption  property if you want to change displayed text to user.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.name/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.name/#see-also", 
            "text": "WorkItem.Caption", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.nextreminder/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nWorkItem\n.\nNextReminder\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\nGets or sets the date of next reminder to send. \n\n\nRemarks\n\n\nIf no reminder set on task definition gets null value.\n\n\nIf set to null value reminder is disabled.\n\n\nIf \nstate\n is not in Waiting or Created trying to set this property prohibited and throws an access denied error.\n\n\nExamples\n\n\n$WorkItem.NextReminder = $Calendar.Today();\n\n\n\n\nSee Also\n\n\n\n\nWorkItem", 
            "title": "WorkItem.NextReminder"
        }, 
        {
            "location": "/ag/pm/sc/workitem.nextreminder/#overview", 
            "text": "DateTimeOffset   WorkItem . NextReminder   {   get ;   set ;   }  \nGets or sets the date of next reminder to send.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.nextreminder/#remarks", 
            "text": "If no reminder set on task definition gets null value.  If set to null value reminder is disabled.  If  state  is not in Waiting or Created trying to set this property prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.nextreminder/#examples", 
            "text": "$WorkItem.NextReminder = $Calendar.Today();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.nextreminder/#see-also", 
            "text": "WorkItem", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.previous/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nPrevious\n \n{\n \nget\n;\n \n}\n\n\n\nGets the previous work item in workflow. \n\n\nRemarks\n\n\nIf no previous work item exists this property returns null value.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Previous"
        }, 
        {
            "location": "/ag/pm/sc/workitem.previous/#overview", 
            "text": "WorkItem   WorkItem . Previous   {   get ;   }  \nGets the previous work item in workflow.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.previous/#remarks", 
            "text": "If no previous work item exists this property returns null value.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.previous/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.previous/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/", 
            "text": "Overview\n\n\nvoid\n \nWorkItem\n.\nProcess\n \n(\n \n[\n \nselectedAction\n \n],\n \n[\n \nasync\n \n],\n \n[\n \ncompletedBy\n \n]\n \n)\n\n\n\nProcesses the current work item by specified parameters. \n\n\nArguments\n\n\nstring \nselectedAction\n\nSpecifies the action to be selected. If not specified uses the existing WorkItem.SelectedAction property. \n\n\nboolean  \nasync\n\nSpecifies the processing of work item is syncronized or not. If set to true, work item is processed another thread context.\n\n\nIdentity | string  \ncompletedBy\n\nSpecifies the identity that completes the work item. Can be null.\n\n\nRemarks\n\n\nIf state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.ProcessWorkItem", 
            "title": "WorkItem.Process"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/#overview", 
            "text": "void   WorkItem . Process   (   [   selectedAction   ],   [   async   ],   [   completedBy   ]   )  \nProcesses the current work item by specified parameters.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/#arguments", 
            "text": "string  selectedAction \nSpecifies the action to be selected. If not specified uses the existing WorkItem.SelectedAction property.   boolean   async \nSpecifies the processing of work item is syncronized or not. If set to true, work item is processed another thread context.  Identity | string   completedBy \nSpecifies the identity that completes the work item. Can be null.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/#remarks", 
            "text": "If state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.process/#see-also", 
            "text": "WorkItem.ProcessWorkItem", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/", 
            "text": "Overview\n\n\nvoid\n \nWorkItem\n.\nProcessWorkItem\n \n(\n \nid\n,\n \n[\n \nselectedAction\n \n],\n \n[\n \nasync\n \n],\n \n[\n \ncompletedBy\n \n]\n \n)\n\n\n\nProcesses the specified work item by specified parameters.\n\n\nArguments\n\n\nstring \nid\n\n\nSpecifies the id number of work item to be processed.\n\n\nstring \nselectedAction\n\n\nSpecifies the action to be selected. If not specified uses the existing WorkItem.SelectedAction property.\n\n\nboolean \nasync\n\n\nSpecifies the processing of work item is syncronized or not. If set to true, work item is processed another thread context.\n\n\nIdentity | string \ncompletedBy\n\n\nSpecifies the identity that completes the work item. Can be null.\n\n\nRemarks\n\n\nIf state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nWorkItem.Process", 
            "title": "WorkItem.ProcessWorkItem"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/#overview", 
            "text": "void   WorkItem . ProcessWorkItem   (   id ,   [   selectedAction   ],   [   async   ],   [   completedBy   ]   )  \nProcesses the specified work item by specified parameters.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/#arguments", 
            "text": "string  id  Specifies the id number of work item to be processed.  string  selectedAction  Specifies the action to be selected. If not specified uses the existing WorkItem.SelectedAction property.  boolean  async  Specifies the processing of work item is syncronized or not. If set to true, work item is processed another thread context.  Identity | string  completedBy  Specifies the identity that completes the work item. Can be null.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/#remarks", 
            "text": "If state is not in Waiting or Created trying to call this method is prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.processworkitem/#see-also", 
            "text": "WorkItem.Process", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.reprocess/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nReProcess\n \n(\n \n)}\n\n\n\n\n\nRemarks\n\n\nIf state is not in Error method returns silently without do anything.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.ReProcess"
        }, 
        {
            "location": "/ag/pm/sc/workitem.reprocess/#overview", 
            "text": "WorkItem   WorkItem . ReProcess   (   )}", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.reprocess/#remarks", 
            "text": "If state is not in Error method returns silently without do anything.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.reprocess/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.reprocess/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.selectedaction/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nSelectedAction\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n\n Gets or sets the selected action on work item.\n\n\nRemarks\n\n\nIf no action selected, this property returns null.\n\n\nIf WorkItem.State is not in Waiting or Created trying to set this property prohibited and throws an access denied error.\n\n\nWhile setting this property if specified action not found throws an scripting error.\n\n\nExamples\n\n\nReading User Action\n\n\nif ( $WorkItem.SelectedAction == \nApprove\n ) {\n   ...\n}\n\n\n\n\nSetting an Action\n\n\n$WorkItem.SelectedAction = \nApprove\n;\n\n\n\n\nSee Also", 
            "title": "WorkItem.SelectedAction"
        }, 
        {
            "location": "/ag/pm/sc/workitem.selectedaction/#overview", 
            "text": "string   WorkItem . SelectedAction   {   get ;   set ;   }  \n Gets or sets the selected action on work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.selectedaction/#remarks", 
            "text": "If no action selected, this property returns null.  If WorkItem.State is not in Waiting or Created trying to set this property prohibited and throws an access denied error.  While setting this property if specified action not found throws an scripting error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.selectedaction/#examples", 
            "text": "Reading User Action  if ( $WorkItem.SelectedAction ==  Approve  ) {\n   ...\n}  Setting an Action  $WorkItem.SelectedAction =  Approve ;", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.selectedaction/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.start/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nWorkItem\n.\nStart\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the start date of work item.\n\n\nRemarks\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Start"
        }, 
        {
            "location": "/ag/pm/sc/workitem.start/#overview", 
            "text": "DateTimeOffset   WorkItem . Start   {   get ;   }  \n Gets the start date of work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.start/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.start/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.start/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.state/", 
            "text": "Overview\n\n\nstring\n \nWorkItem\n.\nState\n \n{\n \nget\n;\n \n}\n\n\n\n Gets the current work item state. \n\n\nRemarks\n\n\nThis property may be one of following values:\n\n\nCreated\n\nCreated but not submitted yet.\n\n\nWaiting\n\nWaiting on user inbox and still active.\n\n\nCommitted\n\nCommitted by user and closed but not yet processed.\n\n\nCompleted\n\nProcessed by system and not active.\n\n\nJoin\n\nCompleted but waiting for external event to continue.\n\n\nSubWorkflow\n\nWaiting for child workflows to complete.\n\n\nDelegated\n\nUser has delegated to another user.\n\n\nKilled\n\nTerminated by system administrator.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.State"
        }, 
        {
            "location": "/ag/pm/sc/workitem.state/#overview", 
            "text": "string   WorkItem . State   {   get ;   }  \n Gets the current work item state.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.state/#remarks", 
            "text": "This property may be one of following values:  Created \nCreated but not submitted yet.  Waiting \nWaiting on user inbox and still active.  Committed \nCommitted by user and closed but not yet processed.  Completed \nProcessed by system and not active.  Join \nCompleted but waiting for external event to continue.  SubWorkflow \nWaiting for child workflows to complete.  Delegated \nUser has delegated to another user.  Killed \nTerminated by system administrator.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.state/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.state/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.terminate/", 
            "text": "Overview\n\n\nWorkItem\n \nWorkItem\n.\nTerminate\n \n(\n \n)\n\n\n\n Terminates the current work item.\n\n\nRemarks\n\n\nIf \nWorkItem.State\n is not in Waiting or Committed, trying to call this method is prohibited and throws an access denied error.\n\n\nExamples\n\n\nSee Also", 
            "title": "WorkItem.Terminate"
        }, 
        {
            "location": "/ag/pm/sc/workitem.terminate/#overview", 
            "text": "WorkItem   WorkItem . Terminate   (   )  \n Terminates the current work item.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.terminate/#remarks", 
            "text": "If  WorkItem.State  is not in Waiting or Committed, trying to call this method is prohibited and throws an access denied error.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.terminate/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.terminate/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/", 
            "text": "Overview\n\n\nstring\n[]\n \nWorkItem\n.\nTrigger\n \n(\n \neventName\n,\n \ninputData\n \n)\n\n\n\n Triggers the specified event with input data and returns triggered listener work items.\n\n\nArguments\n\n\nstring \neventName\n\nName of event to be trigger. Multiple events can be specified with \";\" delimeter. \n\n\nXmlNode | String \ninputData\n\nInput data to be sent listeners.\n\n\nRemarks\n\n\nIf input data is not a instance of \nXmlNode\n or string exception is thrown.\n\n\nIf no listener triggered return value is a empty array.\n\n\nExamples\n\n\nvar workItems = $WorkItem.Trigger(\nCustomer.Created\n, $Xml.SelectSingle(\nCustomer\n));\n\nif (workItems.length) {\n   var workItem = workItems[0];\n}\n\n\n\n\nSee Also\n\n\n\n\nEvent Listener Module\n\n\nEvent Module", 
            "title": "WorkItem.Trigger"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/#overview", 
            "text": "string []   WorkItem . Trigger   (   eventName ,   inputData   )  \n Triggers the specified event with input data and returns triggered listener work items.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/#arguments", 
            "text": "string  eventName \nName of event to be trigger. Multiple events can be specified with \";\" delimeter.   XmlNode | String  inputData \nInput data to be sent listeners.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/#remarks", 
            "text": "If input data is not a instance of  XmlNode  or string exception is thrown.  If no listener triggered return value is a empty array.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/#examples", 
            "text": "var workItems = $WorkItem.Trigger( Customer.Created , $Xml.SelectSingle( Customer ));\n\nif (workItems.length) {\n   var workItem = workItems[0];\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/workitem.trigger/#see-also", 
            "text": "Event Listener Module  Event Module", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode/", 
            "text": "", 
            "title": "XmlNode Methods"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/", 
            "text": "Overview\n\n\nXmlNode\n \nXmlNode\n.\nAppendChild\n \n(\n \nxpath\n,\n \n[\n \ncallback\n \n]\n \n)\n\n\n\n Appends a new child in the specified xpath and executes the specified callback on created new node before inserting to DOM and returns the appended new node.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of node to be append\n\n\nFunction \ncallback\n\n\nCallback function to be execute.\n\n\nRemarks\n\n\nThis method creates node and childs nodes according to the xml schema definition. If xml schema definition is not found in xml schema error is thrown.\n\n\nQualified node path can be specified in xpath argument when it is required. Example; Customer/Orders/Order\n\n\nCallback function is executed before node is appended on DOM tree and in callback function, it does not trigger the monitoring events like XmlNode.Bind or XmlNode.Live.\n\n\nFunction returns created node after node is appended on DOM tree.\n\n\nCallback function is called before adding the document.\n\n\nExamples\n\n\nAppend node\n\n\nvar customer = $Xml.AppendChild(\nCustomers/Customer\n);\ncustomer.SetValue(\nId\n,\n1\n);\n\n\n\n\nAppend node with callback\n\n\n$Xml.AppendChild(\nCustomers/Customer\n, function() {\n  this.SetValue(\nId\n,\n1\n);\n});\n\n\n\n\nSee Also", 
            "title": "XmlNode.AppendChild"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/#overview", 
            "text": "XmlNode   XmlNode . AppendChild   (   xpath ,   [   callback   ]   )  \n Appends a new child in the specified xpath and executes the specified callback on created new node before inserting to DOM and returns the appended new node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/#arguments", 
            "text": "String  xpath  XPath of node to be append  Function  callback  Callback function to be execute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/#remarks", 
            "text": "This method creates node and childs nodes according to the xml schema definition. If xml schema definition is not found in xml schema error is thrown.  Qualified node path can be specified in xpath argument when it is required. Example; Customer/Orders/Order  Callback function is executed before node is appended on DOM tree and in callback function, it does not trigger the monitoring events like XmlNode.Bind or XmlNode.Live.  Function returns created node after node is appended on DOM tree.  Callback function is called before adding the document.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/#examples", 
            "text": "Append node  var customer = $Xml.AppendChild( Customers/Customer );\ncustomer.SetValue( Id , 1 );  Append node with callback  $Xml.AppendChild( Customers/Customer , function() {\n  this.SetValue( Id , 1 );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.appendchild/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nAssert\n \n(\n \nxpath\n,\n \n[\n \nmessage\n \n],\n \n[\n \ndetailXPath\n \n]\n \n)\n\n\n\nUsed for error checks. Makes an assertion that specified xpath is returns a true boolean value, otherwise error is thrown.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate as boolean.\n\n\nString \nmessage\n\n\nError message to show. If not specified \"Assertion Failed\" standard message is used.\n\n\nString \ndetailXPath\n\n\nXPath to evalute to append in error message.\n\n\nRemarks\n\n\nExamples\n\n\nSimple Usage\n\n\n$Xml.Assert(\n//Customer/Name = \nX\n, \nInvalid customer\n, \n//Customer/Name\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Assert"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/#overview", 
            "text": "void   XmlNode . Assert   (   xpath ,   [   message   ],   [   detailXPath   ]   )  \nUsed for error checks. Makes an assertion that specified xpath is returns a true boolean value, otherwise error is thrown.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/#arguments", 
            "text": "String  xpath  XPath to evaluate as boolean.  String  message  Error message to show. If not specified \"Assertion Failed\" standard message is used.  String  detailXPath  XPath to evalute to append in error message.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/#examples", 
            "text": "Simple Usage  $Xml.Assert( //Customer/Name =  X ,  Invalid customer ,  //Customer/Name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.assert/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nBind\n \n(\n \n[\n \nxpath\n \n],\n \n[\n \ncallback\n \n]\n \n)\n\n\n\nAttaches an change event handler on specified xpath resulting nodes.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of nodes to be attached. If not specified current node is selected.\n\n\nFunction \ncallback\n\n\nCallback function to be execute.\n\n\nRemarks\n\n\nThis method is only available on client side scripts like Form scripts.\n\n\nBind method only attaches to existing nodes, to receive notifications for existing and created nodes in future please use XmlNode.Live method.\n\n\nExamples\n\n\nReceive an alert for changing a node\n\n\nvar isNameEmpty = $Xml.Bind(\n//Customer/Name\n, function() {\n  alert(\nCustomer name is changed\n);\n});\n\n\n\n\nReceive an alert for any change on current document\n\n\n$Xml.Bind(function() {\n  alert( this.LocalName() + \n is changed.\n);\n});\n\n\n\n\nSee Also", 
            "title": "XmlNode.Bind"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/#overview", 
            "text": "void   XmlNode . Bind   (   [   xpath   ],   [   callback   ]   )  \nAttaches an change event handler on specified xpath resulting nodes.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/#arguments", 
            "text": "String  xpath  XPath of nodes to be attached. If not specified current node is selected.  Function  callback  Callback function to be execute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/#remarks", 
            "text": "This method is only available on client side scripts like Form scripts.  Bind method only attaches to existing nodes, to receive notifications for existing and created nodes in future please use XmlNode.Live method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/#examples", 
            "text": "Receive an alert for changing a node  var isNameEmpty = $Xml.Bind( //Customer/Name , function() {\n  alert( Customer name is changed );\n});  Receive an alert for any change on current document  $Xml.Bind(function() {\n  alert( this.LocalName() +   is changed. );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.bind/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.commitdeletes/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nCommitDeletes\n \n(\n \n)\n\n\n\nDeletes all children that have State attribute set to 'Deleted' value.\n\n\nRemarks\n\n\nContainer form controls by default instead of delete nodes directly, sets the State attribute to 'Deleted' value. After required actions have been performed, these marked nodes should be deleted if not needed.\n\n\nThis method internally uses //\n[@\n[local-name()='State']='Deleted'] xpath query to find deleted children on current node.\n\n\nExamples\n\n\nCommit deleted nodes\n\n\n$Xml.CommitDeletes();\n\n\n\n\nCommit deleted nodes on specific path\n\n\n$Xml.SelectAll(\n//Contacts/Contact\n, function() {\n  this.CommitDeletes()\n});\n\n\n\n\nSee Also", 
            "title": "XmlNode.CommitDeletes"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.commitdeletes/#overview", 
            "text": "void   XmlNode . CommitDeletes   (   )  \nDeletes all children that have State attribute set to 'Deleted' value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.commitdeletes/#remarks", 
            "text": "Container form controls by default instead of delete nodes directly, sets the State attribute to 'Deleted' value. After required actions have been performed, these marked nodes should be deleted if not needed.  This method internally uses // [@ [local-name()='State']='Deleted'] xpath query to find deleted children on current node.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.commitdeletes/#examples", 
            "text": "Commit deleted nodes  $Xml.CommitDeletes();  Commit deleted nodes on specific path  $Xml.SelectAll( //Contacts/Contact , function() {\n  this.CommitDeletes()\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.commitdeletes/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/", 
            "text": "Overview\n\n\nXmlNode\n \nXmlNode\n.\nCopy\n \n(\n \nsourceXPath\n,\n \ntarget\n \n)\n\n\n\n Copies current and all child xml nodes from sourceXPath to target xpath or target navigator.\n\n\nArguments\n\n\nString \nsourceXPath\n\n\nXPath to copy. If you want to use current node specify as \".\".\n\n\nXmlNode | String \ntarget\n\n\nTarget XmlNode or Xpath to be copy.\n\n\nRemarks\n\n\nThis method tries to find type of copying node from XML schema. If the related scheme is found, the operation is copied based on XML scheme definitions. Otherwise it copies only name matching nodes.\n\n\nCopying by XML scheme definitions automatically resolves collection items and creates new nodes.\n\n\nExamples\n\n\nAssume $Xml content has following data;\n\n\nSample Data\n\n\nroot\n\n  \nPerson\n\n    \nName\njohn\n/\nName\n\n    \nSurname\nx\n/\nSurname\n\n  \n/\nPerson\n\n  \nPerson2\n\n    \nName\n/\nName\n\n    \nSurname\n/\nSurname\n\n  \n/\nPerson2\n\n\n/\nroot\n\n\n\n\n\nCopy Simple Node\n\n\n$Xml.Copy( \nPerson/Name\n, \nPerson/Surname\n );\n\n\n\nCopy complex nodee\n\n\n$Xml.Copy( \nPerson\n, \nPerson2\n );\n\n\n\n\nSee Also", 
            "title": "XmlNode.Copy"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/#overview", 
            "text": "XmlNode   XmlNode . Copy   (   sourceXPath ,   target   )  \n Copies current and all child xml nodes from sourceXPath to target xpath or target navigator.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/#arguments", 
            "text": "String  sourceXPath  XPath to copy. If you want to use current node specify as \".\".  XmlNode | String  target  Target XmlNode or Xpath to be copy.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/#remarks", 
            "text": "This method tries to find type of copying node from XML schema. If the related scheme is found, the operation is copied based on XML scheme definitions. Otherwise it copies only name matching nodes.  Copying by XML scheme definitions automatically resolves collection items and creates new nodes.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/#examples", 
            "text": "Assume $Xml content has following data;  Sample Data  root \n   Person \n     Name john / Name \n     Surname x / Surname \n   / Person \n   Person2 \n     Name / Name \n     Surname / Surname \n   / Person2  / root   Copy Simple Node  $Xml.Copy(  Person/Name ,  Person/Surname  );  Copy complex nodee  $Xml.Copy(  Person ,  Person2  );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.copy/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/", 
            "text": "Overview\n\n\nNumber\n \nXmlNode\n.\nCount\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\n Returns number of nodes on specified xpath.\n\n\nArguments\n\n\n$paramType \nArgument Name\n\n\nXPath to count. If not specified current node childs are selected.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar customerCount = $Xml.Count(\n//Customer\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Count"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/#overview", 
            "text": "Number   XmlNode . Count   (   [   xpath   ]   )  \n Returns number of nodes on specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/#arguments", 
            "text": "$paramType  Argument Name  XPath to count. If not specified current node childs are selected.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/#examples", 
            "text": "Evaluate with an xpath  var customerCount = $Xml.Count( //Customer );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.count/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/", 
            "text": "Overview\n\n\nBoolean\n \nXmlNode\n.\nEquals\n \n(\n \n[\n \nxpath\n \n],\n \nvalue\n \n)\n\n\n\n Returns a boolean value that states if the specified xpath has the specified value.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specified current node is used.\n\n\nObject \nvalue\n\n\nValue to compare.\n\n\nRemarks\n\n\nExamples\n\n\nSimple comparison\n\n\nvar isDisabled = $Xml.Equals(\n//Customer/IsDisabled\n,\nTrue\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Equals"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/#overview", 
            "text": "Boolean   XmlNode . Equals   (   [   xpath   ],   value   )  \n Returns a boolean value that states if the specified xpath has the specified value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specified current node is used.  Object  value  Value to compare.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/#examples", 
            "text": "Simple comparison  var isDisabled = $Xml.Equals( //Customer/IsDisabled , True );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.equals/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nEvaluate\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\nReturns string value of specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specified current node is used.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar id = $Xml.Evaluate(\n//Customer/Id\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Evaluate"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/#overview", 
            "text": "String   XmlNode . Evaluate   (   [   xpath   ]   )  \nReturns string value of specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specified current node is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/#examples", 
            "text": "Evaluate with an xpath  var id = $Xml.Evaluate( //Customer/Id );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluate/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/", 
            "text": "Overview\n\n\nBoolean\n \nXmlNode\n.\nEvaluateBoolean\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\nReturns boolean value of the specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specified current node is used.\n\n\nRemarks\n\n\nThis method checks the evaluated value is (non-case sensitive) equal to \"false\" or \"0\" or empty value. All other values are evaluated as true value.\n\n\nExamples\n\n\nEvaluate with a xpath\n\n\nvar isDisabled = $Xml.EvaluateBoolean(\n//Customer/IsDisabled\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.EvaluateBoolean"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/#overview", 
            "text": "Boolean   XmlNode . EvaluateBoolean   (   [   xpath   ]   )  \nReturns boolean value of the specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specified current node is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/#remarks", 
            "text": "This method checks the evaluated value is (non-case sensitive) equal to \"false\" or \"0\" or empty value. All other values are evaluated as true value.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/#examples", 
            "text": "Evaluate with a xpath  var isDisabled = $Xml.EvaluateBoolean( //Customer/IsDisabled );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluateboolean/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/", 
            "text": "Overview\n\n\nDateTimeOffset\n \nXmlNode\n.\nEvaluateDateTime\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\n Returns the datetime offset value of the specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specifed current node is used.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar createdAt = $Xml.EvaluateDateTime(\n//Customer/CreateDate\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.EvaluateDateTime"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/#overview", 
            "text": "DateTimeOffset   XmlNode . EvaluateDateTime   (   [   xpath   ]   )  \n Returns the datetime offset value of the specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specifed current node is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/#examples", 
            "text": "Evaluate with an xpath  var createdAt = $Xml.EvaluateDateTime( //Customer/CreateDate );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatedatetime/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/", 
            "text": "Overview\n\n\nNumber\n \nXmlNode\n.\nEvaluateNumber\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\nReturns the numeric value of the specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specifed current node is used.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar number = $Xml.EvaluateNumber(\n//Customer/Number\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.EvaluateNumber"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/#overview", 
            "text": "Number   XmlNode . EvaluateNumber   (   [   xpath   ]   )  \nReturns the numeric value of the specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specifed current node is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/#examples", 
            "text": "Evaluate with an xpath  var number = $Xml.EvaluateNumber( //Customer/Number );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.evaluatenumber/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nFormat\n \n(\n \ntemplate\n,\n \n[\n \noptions\n \n]\n \n)\n\n\n\n Returns result of specified template on current node.\n\n\nArguments\n\n\nString \ntemplate\n\n Template to apply.\n\n\nObject \noptions\n\nTemplate options. Can be null. Option contains the parameters to be used in template or following properties:\n\n\nString \nCulture\n\nCulture to use on converting date or numeric values.\n\n\nRemarks\n\n\nLike XSLT formatting this method provides much simpler template usage for converting XML data to HTML or any other data.\n\n\nTemplate may contain xpath expressions or variables that wrapped in {{ and }} characters. All formatting done with invariant culture if not specified in options. Please refer the \nData Templates\n section for more information.\n\n\nCustom variables can be used in template content as {{\nVariableName}} format. If variable is an object; formatting string can be used as {{\nVariableName}} format. If variable is an object; formatting string can be used as {{\nVariableName.Property}}. \n\n\nExamples\n\n\nBasic template\n\n\nvar myNode = $Xml.Parse(\nCustomer\nName\nJohn\n/\nName\n/Customer\n);\nvar result = myNode.Format(\np\nHello {{Customer/Name}}!\n/\np\n);\n// result now contains \np\nHello John!\n/\np\n\n\n\n\n\nDate formatting\n\n\nvar myNode = $Xml.Parse(\nCustomer\nName\nJohn\n/\nName\nBirthDate\n2014-01-31T09:00:00+02:00\n/\nBirthDate\n/Customer\n);\nvar result = myNode.Format(\np\nBirth date : {{Customer/BirthDate}}\n/\np\n);\n// result now contains \np\nBirth date : 01/31/2014 09:00:00 +02:00\n/\np\n\n\n\n\n\nUsing variable\n\n\nvar myNode = $Xml.Parse(\nCustomer\nName\nJohn\n/\nName\nBirthDate\n2014-01-31T09:00:00+02:00\n/\nBirthDate\n/Customer\n);\nvar result = myNode.Format(\np\n{{$MyVariable}}\n/\np\n, {\n  MyVariable : \nCustom Variable\n\n});\n// result: \np\nCustom Variable\n/\np\n\n\n\n\n\nSee Also\n\n\n\n\nData Templates\n\n\nTransform", 
            "title": "XmlNode.Format"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/#overview", 
            "text": "String   XmlNode . Format   (   template ,   [   options   ]   )  \n Returns result of specified template on current node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/#arguments", 
            "text": "String  template \n Template to apply.  Object  options \nTemplate options. Can be null. Option contains the parameters to be used in template or following properties:  String  Culture \nCulture to use on converting date or numeric values.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/#remarks", 
            "text": "Like XSLT formatting this method provides much simpler template usage for converting XML data to HTML or any other data.  Template may contain xpath expressions or variables that wrapped in {{ and }} characters. All formatting done with invariant culture if not specified in options. Please refer the  Data Templates  section for more information.  Custom variables can be used in template content as {{ VariableName}} format. If variable is an object; formatting string can be used as {{ VariableName}} format. If variable is an object; formatting string can be used as {{ VariableName.Property}}.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/#examples", 
            "text": "Basic template  var myNode = $Xml.Parse( Customer Name John / Name /Customer );\nvar result = myNode.Format( p Hello {{Customer/Name}}! / p );\n// result now contains  p Hello John! / p   Date formatting  var myNode = $Xml.Parse( Customer Name John / Name BirthDate 2014-01-31T09:00:00+02:00 / BirthDate /Customer );\nvar result = myNode.Format( p Birth date : {{Customer/BirthDate}} / p );\n// result now contains  p Birth date : 01/31/2014 09:00:00 +02:00 / p   Using variable  var myNode = $Xml.Parse( Customer Name John / Name BirthDate 2014-01-31T09:00:00+02:00 / BirthDate /Customer );\nvar result = myNode.Format( p {{$MyVariable}} / p , {\n  MyVariable :  Custom Variable \n});\n// result:  p Custom Variable / p", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.format/#see-also", 
            "text": "Data Templates  Transform", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nGetAttribute\n \n(\n \nattributeName\n \n)\n\n\n\nGets an attribute value on the current node.\n\n\nArguments\n\n\nString \nattributeName\n\n\nSpecifies the name of the attribute\n\n\nRemarks\n\n\nIf attribute is not exists return value is null.\n\n\nExamples\n\n\nBasic Usage\n\n\nvar name = $Xml.GetAttribute(\nName\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.GetAttribute"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/#overview", 
            "text": "String   XmlNode . GetAttribute   (   attributeName   )  \nGets an attribute value on the current node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/#arguments", 
            "text": "String  attributeName  Specifies the name of the attribute", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/#remarks", 
            "text": "If attribute is not exists return value is null.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/#examples", 
            "text": "Basic Usage  var name = $Xml.GetAttribute( Name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.getattribute/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nInnerXml\n \n(\n \n[\n \nvalue\n \n]\n \n)\n\n\n\nReturns the inner xml of the current node or updates inner xml of current node.\n\n\nArguments\n\n\nString \nvalue\n\n Inner xml to replace. If not specified no change applied.\n\n\nRemarks\n\n\nIf value specified; this method directly changes the inner xml content without schema definitions. If you need schema based change please use XmlNode.Copy method.\n\n\nExamples\n\n\nUpdate inner xml\n\n\n$Xml.InnerXml(\nCustomer\nName\nJohn\n/\nName\n/\nCustomer\n);\n\n\n\n\nGet inner xml\n\n\nvar xml = $Xml.SelectSingle(\n//Customer\n).InnerXml();\n\n\n\n\nSee Also\n\n\n\n\nXmlNode.OuterXml", 
            "title": "XmlNode.InnerXml"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/#overview", 
            "text": "String   XmlNode . InnerXml   (   [   value   ]   )  \nReturns the inner xml of the current node or updates inner xml of current node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/#arguments", 
            "text": "String  value \n Inner xml to replace. If not specified no change applied.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/#remarks", 
            "text": "If value specified; this method directly changes the inner xml content without schema definitions. If you need schema based change please use XmlNode.Copy method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/#examples", 
            "text": "Update inner xml  $Xml.InnerXml( Customer Name John / Name / Customer );  Get inner xml  var xml = $Xml.SelectSingle( //Customer ).InnerXml();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.innerxml/#see-also", 
            "text": "XmlNode.OuterXml", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/", 
            "text": "Overview\n\n\nBoolean\n \nXmlNode\n.\nIsEmpty\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\n Returns boolean value that states if the current node or specified xpath has an empty string.\n\n\nArguments\n\n\nString \nxpath\n\n XPath to evaluate.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar isNameEmpty = $Xml.IsEmpty(\n//Customer/Name\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.IsEmpty"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/#overview", 
            "text": "Boolean   XmlNode . IsEmpty   (   [   xpath   ]   )  \n Returns boolean value that states if the current node or specified xpath has an empty string.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/#arguments", 
            "text": "String  xpath \n XPath to evaluate.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/#examples", 
            "text": "Evaluate with an xpath  var isNameEmpty = $Xml.IsEmpty( //Customer/Name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.isempty/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nLive\n \n(\n \n[\n \nxpath\n \n],\n \n[\n \ncallback\n \n]\n \n)\n\n\n\nAttaches a change event handler on specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of nodes to be attached. If not specified current node is selected.\n\n\nFunction \ncallback\n\n\nCallback function to be execute.\n\n\nRemarks\n\n\nThis method attaches to existing and created in later future nodes.\n\n\nThis method is only available on client side scripts like Form scripts.\n\n\nExamples\n\n\nReceive an alert for changing the customer name\n\n\n$Xml.Live(\n//Customer/Name\n, function() {\n  alert(\nCustomer name is changed\n);\n});\n\n\n\n\nReceive an alert for any change all order/count nodes\n\n\n$Xml.Live(\n//Order/Count\n,function() {\n  alert( \nOrder count is changed.\n);\n});\n\n\n\n\nSee Also\n\n\n\n\nXmlNode.Bind", 
            "title": "XmlNode.Live"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/#overview", 
            "text": "void   XmlNode . Live   (   [   xpath   ],   [   callback   ]   )  \nAttaches a change event handler on specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/#arguments", 
            "text": "String  xpath  XPath of nodes to be attached. If not specified current node is selected.  Function  callback  Callback function to be execute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/#remarks", 
            "text": "This method attaches to existing and created in later future nodes.  This method is only available on client side scripts like Form scripts.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/#examples", 
            "text": "Receive an alert for changing the customer name  $Xml.Live( //Customer/Name , function() {\n  alert( Customer name is changed );\n});  Receive an alert for any change all order/count nodes  $Xml.Live( //Order/Count ,function() {\n  alert(  Order count is changed. );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.live/#see-also", 
            "text": "XmlNode.Bind", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nLoad\n \n(\n \nxquery\n,\n \n[\n \nparameters\n \n],\n \n[\n \ncollection\n \n]\n \n)\n\n\n\nLoads xml content to current node from \n$XmlRepository\n\n\nArguments\n\n\nString \nxquery\n\n\nXQuery to perform.\n\n\nObject \nparameters\n\n\nIf xquery has binding parameters this argument specifies to a dictionary of parameter values.\n\n\nRemarks\n\n\nThis method loads only matched elements with node xml scheme. Non-matching elements are ignored.\n\n\nRegistered namespace prefixes are implicitly declared while performing xquery.\n\n\nIf the resulting query returns the same node name as the current node name; the current node inner xml is replaced with the result, otherwise resulting nodes are processed as child nodes to current node.\n\n\nFor more xquery details please refer to \nXQuery standard\n and \nXQuery Update standard\n\n\nExamples\n\n\nLoading a simple result to current node\n\n\n$Xml.Load(\nPerson[Id=1]\n);\n\n\n\n\nLoading basic transformed result to current node\n\n\n$Xml.Load(\nfor $c in //Person                                \n +\n          \nwhere $c/Surname                                  \n +\n          \nreturn                                            \n +\n          \n  \nPerson\n                                        \n +\n          \n    \nName\n{ $c/Name }\n/\nName\n                      \n +\n          \n  \nPerson\n                                        \n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Load"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/#overview", 
            "text": "void   XmlNode . Load   (   xquery ,   [   parameters   ],   [   collection   ]   )  \nLoads xml content to current node from  $XmlRepository", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/#arguments", 
            "text": "String  xquery  XQuery to perform.  Object  parameters  If xquery has binding parameters this argument specifies to a dictionary of parameter values.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/#remarks", 
            "text": "This method loads only matched elements with node xml scheme. Non-matching elements are ignored.  Registered namespace prefixes are implicitly declared while performing xquery.  If the resulting query returns the same node name as the current node name; the current node inner xml is replaced with the result, otherwise resulting nodes are processed as child nodes to current node.  For more xquery details please refer to  XQuery standard  and  XQuery Update standard", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/#examples", 
            "text": "Loading a simple result to current node  $Xml.Load( Person[Id=1] );  Loading basic transformed result to current node  $Xml.Load( for $c in //Person                                  +\n           where $c/Surname                                    +\n           return                                              +\n              Person                                           +\n                Name { $c/Name } / Name                         +\n              Person                                          );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.load/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nOuterXml\n \n(\n \n[\n \nvalue\n \n]\n \n)\n\n\n\nReturns the outer xml of the current node or updates outer xml of current node.\n\n\nArguments\n\n\nString \nvalue\n\n\nOuter xml to replace. If not specified no change applied. \n\n\nRemarks\n\n\nIf value specified; this method directly changes the outer xml content without schema definitions. If you need schema based change please use \nXmlNode.Copy\n method.\n\n\nExamples\n\n\nUpdate outer xml\n\n\n$Xml.OuterXml(\nCustomer\nName\nJohn\n/\nName\n/\nCustomer\n);\n\n\n\n\nGet outer xml\n\n\nvar xml = $Xml.SelectSingle(\n//Customer\n).OuterXml();\n\n\n\n\nSee Also\n\n\n\n\nXmlNode.InnerXml", 
            "title": "XmlNode.OuterXml"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/#overview", 
            "text": "String   XmlNode . OuterXml   (   [   value   ]   )  \nReturns the outer xml of the current node or updates outer xml of current node.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/#arguments", 
            "text": "String  value  Outer xml to replace. If not specified no change applied.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/#remarks", 
            "text": "If value specified; this method directly changes the outer xml content without schema definitions. If you need schema based change please use  XmlNode.Copy  method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/#examples", 
            "text": "Update outer xml  $Xml.OuterXml( Customer Name John / Name / Customer );  Get outer xml  var xml = $Xml.SelectSingle( //Customer ).OuterXml();", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.outerxml/#see-also", 
            "text": "XmlNode.InnerXml", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/", 
            "text": "Overview\n\n\nXmlNode\n \nXmlNode\n.\nParse\n \n(\n \nxml\n \n)\n\n\n\nParses specified string as xml node and returns document element as \nXmlNode\n instance.\n\n\nArguments\n\n\nString \nxml\n\n XML string to parse.\n\n\nRemarks\n\n\nWhile parsing the xml white spaces is preserved.\n\n\nExamples\n\n\nUsage\n\n\nvar myXml = $Xml.Parse(\ndoc\nCustomer\nName\nhello\n/\nName\n/\nCustomer\n/\ndoc\n);\nvar name = myXml.Evaluate(\n//Customer/Name\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Parse"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/#overview", 
            "text": "XmlNode   XmlNode . Parse   (   xml   )  \nParses specified string as xml node and returns document element as  XmlNode  instance.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/#arguments", 
            "text": "String  xml \n XML string to parse.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/#remarks", 
            "text": "While parsing the xml white spaces is preserved.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/#examples", 
            "text": "Usage  var myXml = $Xml.Parse( doc Customer Name hello / Name / Customer / doc );\nvar name = myXml.Evaluate( //Customer/Name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.parse/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/", 
            "text": "Overview\n\n\nXmlNode\n[]\n \nXmlNode\n.\nRemove\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\n Removes all nodes on specified xpath or current node and returns removed nodes in array.\n\n\nArguments\n\n\nString \nxpath\n\n XPath of nodes to remove. If not specified current node is used.\n\n\nRemarks\n\n\nExamples\n\n\nRemove all customer nodes\n\n\nvar deletedCustomers = $Xml.Remove(\n//Customer\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Remove"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/#overview", 
            "text": "XmlNode []   XmlNode . Remove   (   [   xpath   ]   )  \n Removes all nodes on specified xpath or current node and returns removed nodes in array.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/#arguments", 
            "text": "String  xpath \n XPath of nodes to remove. If not specified current node is used.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/#examples", 
            "text": "Remove all customer nodes  var deletedCustomers = $Xml.Remove( //Customer );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.remove/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nRemoveAttribute\n \n(\n \nattributeName\n \n)\n\n\n\n Removes the attribute with the specified name.\n\n\nArguments\n\n\nString \nattributeName\n\n\nQualified name of attribute.\n\n\nRemarks\n\n\nExamples\n\n\nRemoving the attribute with 'Name'\n\n\n$Xml.RemoveAttribute(\nName\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.RemoveAttribute"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/#overview", 
            "text": "void   XmlNode . RemoveAttribute   (   attributeName   )  \n Removes the attribute with the specified name.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/#arguments", 
            "text": "String  attributeName  Qualified name of attribute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/#examples", 
            "text": "Removing the attribute with 'Name'  $Xml.RemoveAttribute( Name );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.removeattribute/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/", 
            "text": "Overview\n\n\nstring\n[]\n \nXmlNode\n.\nSave\n \n(\n \n[\n \nxquery\n \n],\n \n[\n \ntargetPath\n \n]\n \n)\n\n\n\n Saves current node outerxml to \n$XmlRepository\n\n\nArguments\n\n\nString \nxquery\n\n\nSpecifies the xquery to save filtered results. If set to null current node outer xml content will be saved.\n\n\nString \ntargetPath\n\n\nSpecifies the repository target path. If set to null uses the root path of repository. Path can be seperated by '/' character.\n\n\nRemarks\n\n\nRegistered namespace prefixes are implicitly declared while performing xquery.\n\n\nExamples\n\n\nSaving current node content to repository under 'Customers' path.\n\n\n$Xml.Save(\n \n, \nPerson/\n + $Xml.Evaluate(\nId\n));\n\n\nSaving child node 'Addresses' to repository.\n\n\n$Xml.Save(\nPerson/Addresses\n);\n\n\n\n\nSaving basic transformed result to repository.\n\n\n$Xml.Save(\nfor $c in //Person                                \n +\n          \nwhere $c/Surname                                  \n +\n          \nreturn                                            \n + \n          \n  \nPerson\n                                        \n +\n          \n    \nName\n{ $c/Name }\n/\nName\n                      \n +\n          \n  \n/\nPerson\n                                       \n);\n\n\nSaving advanced transformed result to repository.\n\n\n$Xml.Save(\ncopy $input := .                                 \n +\n          \n  modify(                                        \n +\n          \n    replace value of node $input/Name with \nX\n,  \n +\n          \n    insert node \nAge\n1\n/\nAge\n into $input         \n +\n          \n  )                                              \n +\n          \n  return $input                                  \n);\n\n\n\n\nSaving with conditional processing\n\n\nthis.Save(\n  for $risk in //Risk                                                        \n +\n          \n  where $risk/Action = \nC\n                                                   \n +\n          \n  return                                                                     \n +\n          \n  copy $input := $risk                                                       \n +\n          \n    modify (                                                                 \n +\n          \n      delete node $input/Tasks,                                              \n +\n          \n      delete nodes $input/Comments[State],                                   \n +         \n          \n      insert node \nGroup\n{ $risk/ancestor::Group/Name }\n/\nGroup\n into $input  \n +\n          \n    )                                                                        \n +\n          \n    return $input                                                            \n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Save"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/#overview", 
            "text": "string []   XmlNode . Save   (   [   xquery   ],   [   targetPath   ]   )  \n Saves current node outerxml to  $XmlRepository", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/#arguments", 
            "text": "String  xquery  Specifies the xquery to save filtered results. If set to null current node outer xml content will be saved.  String  targetPath  Specifies the repository target path. If set to null uses the root path of repository. Path can be seperated by '/' character.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/#remarks", 
            "text": "Registered namespace prefixes are implicitly declared while performing xquery.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/#examples", 
            "text": "Saving current node content to repository under 'Customers' path.  $Xml.Save(   ,  Person/  + $Xml.Evaluate( Id )); \nSaving child node 'Addresses' to repository.  $Xml.Save( Person/Addresses );  Saving basic transformed result to repository.  $Xml.Save( for $c in //Person                                  +\n           where $c/Surname                                    +\n           return                                              + \n              Person                                           +\n                Name { $c/Name } / Name                         +\n              / Person                                         ); \nSaving advanced transformed result to repository.  $Xml.Save( copy $input := .                                   +\n             modify(                                          +\n               replace value of node $input/Name with  X ,    +\n               insert node  Age 1 / Age  into $input           +\n             )                                                +\n             return $input                                   );  Saving with conditional processing  this.Save(   for $risk in //Risk                                                          +\n             where $risk/Action =  C                                                      +\n             return                                                                       +\n             copy $input := $risk                                                         +\n               modify (                                                                   +\n                 delete node $input/Tasks,                                                +\n                 delete nodes $input/Comments[State],                                     +         \n                 insert node  Group { $risk/ancestor::Group/Name } / Group  into $input    +\n               )                                                                          +\n               return $input                                                             );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.save/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/", 
            "text": "Overview\n\n\nXmlNode\n[]\n \nXmlNode\n.\nSelectAll\n \n(\n \nxpath\n,\n \n[\n \ncallback\n \n]\n \n)\n\n\n\n Selects all matching nodes by specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of node to selected\n\n\nFunction \ncallback\n\n\nCallback function to execute for each selected node. Optional.\n\n\nRemarks\n\n\nExamples\n\n\nBasic usage\n\n\n$Xml.SelectAll(\n//Customer\n, function() {\n   var customerId = this.Evaluate(\nId\n);\n});\n\n\n\n\nSee Also", 
            "title": "XmlNode.SelectAll"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/#overview", 
            "text": "XmlNode []   XmlNode . SelectAll   (   xpath ,   [   callback   ]   )  \n Selects all matching nodes by specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/#arguments", 
            "text": "String  xpath  XPath of node to selected  Function  callback  Callback function to execute for each selected node. Optional.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/#examples", 
            "text": "Basic usage  $Xml.SelectAll( //Customer , function() {\n   var customerId = this.Evaluate( Id );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectall/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/", 
            "text": "Overview\n\n\nXmlNode\n \nXmlNode\n.\nSelectSingle\n \n(\n \nxpath\n,\n \n[\n \ncallback\n \n]\n \n)\n\n\n\n Selects a single node by specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of node to select.\n\n\nFunction \ncallback\n\n\nCallback function to execute on selected node.\n\n\nRemarks\n\n\nIf multiple nodes found on xpath, first node is selected.\n\n\nExamples\n\n\nBasic usage\n\n\n$Xml.SelectSingle(\n//Customer\n, function() {\n   var customerId = this.Evaluate(\nId\n);\n});\n\n\n\n\nSee Also", 
            "title": "XmlNode.SelectSingle"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/#overview", 
            "text": "XmlNode   XmlNode . SelectSingle   (   xpath ,   [   callback   ]   )  \n Selects a single node by specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/#arguments", 
            "text": "String  xpath  XPath of node to select.  Function  callback  Callback function to execute on selected node.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/#remarks", 
            "text": "If multiple nodes found on xpath, first node is selected.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/#examples", 
            "text": "Basic usage  $Xml.SelectSingle( //Customer , function() {\n   var customerId = this.Evaluate( Id );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.selectsingle/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nSetAttribute\n \n(\n \nattributeName\n,\n \n[\n \nvalue\n \n]\n \n)\n\n\n\n Sets an attribute on current node to specified value.\n\n\nArguments\n\n\nString \nattributeName\n\n\nQualified name of attribute.\n\n\nString \nvalue\n\n\nValue of attribute.\n\n\nRemarks\n\n\nIf attribute is not exist created automatically.\n\n\nThis method uses empty namespace for attribute names. If you need to set attribute with a namespace please refer to SetAttributeNS method.\n\n\nExamples\n\n\nUsage\n\n\n$Xml.SetAttribute(\nName\n, \nJohn\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.SetAttribute"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/#overview", 
            "text": "void   XmlNode . SetAttribute   (   attributeName ,   [   value   ]   )  \n Sets an attribute on current node to specified value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/#arguments", 
            "text": "String  attributeName  Qualified name of attribute.  String  value  Value of attribute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/#remarks", 
            "text": "If attribute is not exist created automatically.  This method uses empty namespace for attribute names. If you need to set attribute with a namespace please refer to SetAttributeNS method.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/#examples", 
            "text": "Usage  $Xml.SetAttribute( Name ,  John );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattribute/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nSetAttributeNS\n \n(\n \nnamespaceURI\n,\n \nattributeName\n,\n \nvalue\n \n)\n\n\n\n Sets an attribute on the current node to the specified value on specified namespace URI.\n\n\nArguments\n\n\nString \nnamespaceURI\n\n\nSpecifies the attribute namespace URI\n\n\nString \nattributeName\n\n\nSpecifies the name of attribute.\n\n\nString \nvalue\n\n\nSpecifies the value of attribute.\n\n\nRemarks\n\n\nIf attribute does not exist, it is created automatically.\n\n\nExamples\n\n\n$Xml.SetAttributeNS(\nurn:Tempuri\n, \nName\n, \nJohn\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.SetAttributeNS"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/#overview", 
            "text": "void   XmlNode . SetAttributeNS   (   namespaceURI ,   attributeName ,   value   )  \n Sets an attribute on the current node to the specified value on specified namespace URI.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/#arguments", 
            "text": "String  namespaceURI  Specifies the attribute namespace URI  String  attributeName  Specifies the name of attribute.  String  value  Specifies the value of attribute.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/#remarks", 
            "text": "If attribute does not exist, it is created automatically.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/#examples", 
            "text": "$Xml.SetAttributeNS( urn:Tempuri ,  Name ,  John );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setattributens/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nSetDefaultValue\n \n(\n \n[\n \nxpath\n \n],\n \nvalue\n \n)\n\n\n\n Updates all node values on specified xpath or current node if has empty value.\n\n\nArguments\n\n\nString \nxpath\n\n XPath of node to set. If not specified current node is used.\n\n\nobject \nvalue\n\nValue to update\n\n\nRemarks\n\n\nExamples\n\n\nUpdate current node value\n\n\n$Xml.SelectAll(\n//Customer\n, function() {\n  this.SetDefaultValue(\nName\n,\nUnknown Name\n);\n});\n\n\n\n\nUpdates with an xpath\n\n\n$Xml.SetDefaultValue(\n//Customer/Id\n,\n1\n);\n\n\n\n\nUpdates current node value\n\n\nvar xml = $Xml.SelectSingle(\n//Customer/Id\n, function() {\n  this.SetDefaultValue(\n1\n);\n});\n\n\n\n\nUpdate form submit date if its empty\n\n\n$Xml.SetDefaultvalue(\nDate\n, DateTimeOffset.now );\n\n\n\n\nSee Also\n\n\n\n\nXmlNode.SetValue", 
            "title": "XmlNode.SetDefaultValue"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/#overview", 
            "text": "void   XmlNode . SetDefaultValue   (   [   xpath   ],   value   )  \n Updates all node values on specified xpath or current node if has empty value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/#arguments", 
            "text": "String  xpath \n XPath of node to set. If not specified current node is used.  object  value \nValue to update", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/#examples", 
            "text": "Update current node value  $Xml.SelectAll( //Customer , function() {\n  this.SetDefaultValue( Name , Unknown Name );\n});  Updates with an xpath  $Xml.SetDefaultValue( //Customer/Id , 1 );  Updates current node value  var xml = $Xml.SelectSingle( //Customer/Id , function() {\n  this.SetDefaultValue( 1 );\n});  Update form submit date if its empty  $Xml.SetDefaultvalue( Date , DateTimeOffset.now );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setdefaultvalue/#see-also", 
            "text": "XmlNode.SetValue", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/", 
            "text": "Overview\n\n\nvoid\n \nXmlNode\n.\nSetValue\n \n(\n \n[\n \nxpath\n \n],\n \nvalue\n \n)\n\n\n\n Updates all nodes on specified xpath or current node value.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of node to update. If not specified current node is used.\n\n\nobject \nvalue\n\n\nValue to set\n\n\nRemarks\n\n\nExamples\n\n\nUpdates with an xpath\n\n\n$Xml.SetValue(\n//Customer/Id\n,\n1\n);\n\n\n\n\nUpdates the current node value\n\n\nvar xml = $Xml.SelectSingle(\n//Customer/Id\n, function() {\n  this.SetValue(\n1\n);\n});\n\n\n\n\nSee Also\n\n\n\n\nXmlNode.SetDefaultValue", 
            "title": "XmlNode.SetValue"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/#overview", 
            "text": "void   XmlNode . SetValue   (   [   xpath   ],   value   )  \n Updates all nodes on specified xpath or current node value.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/#arguments", 
            "text": "String  xpath  XPath of node to update. If not specified current node is used.  object  value  Value to set", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/#examples", 
            "text": "Updates with an xpath  $Xml.SetValue( //Customer/Id , 1 );  Updates the current node value  var xml = $Xml.SelectSingle( //Customer/Id , function() {\n  this.SetValue( 1 );\n});", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.setvalue/#see-also", 
            "text": "XmlNode.SetDefaultValue", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/", 
            "text": "Overview\n\n\nNumber\n \nXmlNode\n.\nSum\n \n(\n \n[\n \nxpath\n \n]\n \n)\n\n\n\n Returns sum of child elements on current node or specified xpath.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath to evaluate. If not specified current node childs are selected.\n\n\nRemarks\n\n\nExamples\n\n\nEvaluate with an xpath\n\n\nvar totalAmount = $Xml.Sum(\n//Customer//Order/Total\n);\n\n\n\n\nSee Also", 
            "title": "XmlNode.Sum"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/#overview", 
            "text": "Number   XmlNode . Sum   (   [   xpath   ]   )  \n Returns sum of child elements on current node or specified xpath.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/#arguments", 
            "text": "String  xpath  XPath to evaluate. If not specified current node childs are selected.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/#remarks", 
            "text": "", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/#examples", 
            "text": "Evaluate with an xpath  var totalAmount = $Xml.Sum( //Customer//Order/Total );", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sum/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/", 
            "text": "Overview\n\n\nXmlNode\n[]\n \nXmlNode\n.\nSync\n \n(\n \nxpath\n,\n \ninput\n,\n \n[\n \nhashCallback\n \n],\n \n[\n \nremovedNodes\n \n]\n \n)\n\n\n\nSynchronizes specified xpath with input nodes and returns array of synchronized nodes.\n\n\nArguments\n\n\nString \nxpath\n\n\nXPath of node to be append\n\n\nXmlNode[] \ninput\n\n\nArray of nodes to be synchronize\n\n\nFunction \nhashCallback\n\n\nHash function to compare nodes. Can be omitted.\n\n\nXmlNode[] \nremovedNodes\n\n\nInstance of array to add removed nodes. Can be omitted.\n\n\nRemarks\n\n\nSynchornization is based on input nodes and performs following actions on specified xpath;\n\n\n\n\nNode comparison done with specified hash function which returns unique identifier of node. If not specified uses the node instance.\n\n\nNon-existing nodes on input auto created in current node.\n\n\nExisting nodes in both values are copied.\n\n\nNon-existing nodes on input are removed from current node. Optionally list of removed added on \"removedNodes\" parameter.\n\n\n\n\nExamples\n\n\nSynchronize \"Source\" and \"Target\" node contents\n\n\nvar questions = $Xml.SelectAll(\nSource/Questions/Question\n);\n$Xml.Sync(\nTarget/Questions/Question\n, questions, function() {\n  return this.Evaluate(\nId\n);\n});\n\n\n\n\nPerforms xquery and merges results with current nodes\n\n\n$Xml.SelectAll(\nStandards/Standard\n, function() {\n   var questions = $XmlRepository.QueryXml(\nfor $q in InternalAudit//Question\\\n     where $q/Standards/Standard/Standard=$standard and $q/Departments/Department=$department\\\n     return\\\n      \nQuestion\n\\\n         { $q/Id }\\\n         { $q/Criteria }\\\n         { $q/Expectation }\\\n      \n/\nQuestion\n, {\n      standard : this.Evaluate(\nStandard\n),\n      department : $Xml.Evaluate(\nDepartment\n)\n   });\n   this.Sync(\nQuestions/Question\n, questions, function() {\n     return this.Evaluate(\nId\n);\n   });\n });\n\n\n\n\nSee Also", 
            "title": "XmlNode.Sync"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/#overview", 
            "text": "XmlNode []   XmlNode . Sync   (   xpath ,   input ,   [   hashCallback   ],   [   removedNodes   ]   )  \nSynchronizes specified xpath with input nodes and returns array of synchronized nodes.", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/#arguments", 
            "text": "String  xpath  XPath of node to be append  XmlNode[]  input  Array of nodes to be synchronize  Function  hashCallback  Hash function to compare nodes. Can be omitted.  XmlNode[]  removedNodes  Instance of array to add removed nodes. Can be omitted.", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/#remarks", 
            "text": "Synchornization is based on input nodes and performs following actions on specified xpath;   Node comparison done with specified hash function which returns unique identifier of node. If not specified uses the node instance.  Non-existing nodes on input auto created in current node.  Existing nodes in both values are copied.  Non-existing nodes on input are removed from current node. Optionally list of removed added on \"removedNodes\" parameter.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/#examples", 
            "text": "Synchronize \"Source\" and \"Target\" node contents  var questions = $Xml.SelectAll( Source/Questions/Question );\n$Xml.Sync( Target/Questions/Question , questions, function() {\n  return this.Evaluate( Id );\n});  Performs xquery and merges results with current nodes  $Xml.SelectAll( Standards/Standard , function() {\n   var questions = $XmlRepository.QueryXml( for $q in InternalAudit//Question\\\n     where $q/Standards/Standard/Standard=$standard and $q/Departments/Department=$department\\\n     return\\\n       Question \\\n         { $q/Id }\\\n         { $q/Criteria }\\\n         { $q/Expectation }\\\n       / Question , {\n      standard : this.Evaluate( Standard ),\n      department : $Xml.Evaluate( Department )\n   });\n   this.Sync( Questions/Question , questions, function() {\n     return this.Evaluate( Id );\n   });\n });", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.sync/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/", 
            "text": "Overview\n\n\nString\n \nXmlNode\n.\nTransform\n \n(\n \nxslt\n,\n \n[\n \noptions\n \n]\n \n)\n\n\n\n Performs XSLT transformation on current node and returns result in a string\n\n\nArguments\n\n\nString | XmlNode \nxslt\n\n\nXslt content\n\n\nObject \noptions\n\n\nXslt parameters\n\n\nRemarks\n\n\nBecause of browser limitations transformation performed on current node data. Accessing to ancestor nodes via xpath is not possible.\n\n\nExamples\n\n\nSee Also\n\n\n\n\nFormat\n\n\nXSLT Introduction", 
            "title": "XmlNode.Transform"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/#overview", 
            "text": "String   XmlNode . Transform   (   xslt ,   [   options   ]   )  \n Performs XSLT transformation on current node and returns result in a string", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/#arguments", 
            "text": "String | XmlNode  xslt  Xslt content  Object  options  Xslt parameters", 
            "title": "Arguments"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/#remarks", 
            "text": "Because of browser limitations transformation performed on current node data. Accessing to ancestor nodes via xpath is not possible.", 
            "title": "Remarks"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ag/pm/sc/xmlnode.transform/#see-also", 
            "text": "Format  XSLT Introduction", 
            "title": "See Also"
        }, 
        {
            "location": "/ag/pm/sc/scripting_modules/", 
            "text": "Scripting modules are used to build a library for common functions. All module can be called from any script including client side form scripts.\n\n\nModules are created at process level and every module has a name to distinguish from other modules.\n\n\nFor a module you can configure following properties;\n\n\nName\n\nName of module. Module name must be a valid JavaScript identifier, cannot contain space and other scripting identifiers.\n\n\nContent\n\nContent of module\n\n\nExporting Functions\n\n\nCommon module definition can be defined as below;\n\n\nfunction privateSum(a,b) {\n    return a + b;\n}\n\n\nfunction sum(a,b) {\n    return privateSum(a,b);\n}\n\nexports.sum = sum;\n\n\n\n\nIf you want to expose a function to outside of module, function must be included in \"exports\" definition. All other functions are considered as \"private\" to module.\n\n\nCalling Module Functions\n\n\nTo call a function in a module module name must be specified as below;\n\n\nvar result = MyModule.sum(2,3);\n\n\n// result = 5\n\n\n\n\nClient side script modules are always executed as asynchronous context because of browser limitations. To call same function as client side function must be renamed as below;\n\n\nMyModule.sumAsync(2,3).then(function(result) {\n    // result = 5\n});", 
            "title": "Scripting Modules"
        }, 
        {
            "location": "/ag/pm/sc/scripting_modules/#exporting-functions", 
            "text": "Common module definition can be defined as below;  function privateSum(a,b) {\n    return a + b;\n}\n\n\nfunction sum(a,b) {\n    return privateSum(a,b);\n}\n\nexports.sum = sum;  If you want to expose a function to outside of module, function must be included in \"exports\" definition. All other functions are considered as \"private\" to module.", 
            "title": "Exporting Functions"
        }, 
        {
            "location": "/ag/pm/sc/scripting_modules/#calling-module-functions", 
            "text": "To call a function in a module module name must be specified as below;  var result = MyModule.sum(2,3);\n\n\n// result = 5  Client side script modules are always executed as asynchronous context because of browser limitations. To call same function as client side function must be renamed as below;  MyModule.sumAsync(2,3).then(function(result) {\n    // result = 5\n});", 
            "title": "Calling Module Functions"
        }, 
        {
            "location": "/ag/pm/sc/variables/", 
            "text": "", 
            "title": "Variables"
        }, 
        {
            "location": "/ag/pm/web_services/", 
            "text": "Web services allows to invoke methods and fetch data on external web services that supports the \nWSDL standard\n. \n\n\n\n\nTo add a new service click plus ( + ) symbol in web services list from process designer dashboard.\n\n\nEnter the web service address in URL field. (Example: \nhttp://www.webservicex.net/globalweather.asmx?WSDL\n )\n\n\nCurrently only WSDL standard is supported but other service types will be added in next releases.\n\n\nAfter clicking on 'Ok' button service is automatically discovered in couple seconds and service methods are displayed on screen.\n\n\n\n\nService discovery scans the available methods on service and automatically registers the web service xml data types in \"External Xml Schemas\". Web service data types also can be directly used in process data model.\n\n\nIn example \"GetWeather\" is a method in service and expects the \"CityName\", \"CountryName\" fields to invoke and returns GetWeatherResult type. Gray box contains the example usage for scripting. Return value of method may be a basic value or complex data type. You may need to inspect data type from external xml schemas.\n\n\nTest Mode URL\n\nThis field is optional, you may leave it blank. If you want to use another service for testing environment you can specify the URL of service. If workflow instance is in test mode this address is used automatically. Test and live service definition must be identical otherwise unpredictable errors may be occur.\n\n\nConsuming SOAP Service\n\n\nCalling Service from Scripts\n\n\nAfter service is registered you can call the service from scripting environments including browser based client scripts.\n\n\nvar\n \nresult\n \n=\n \n$Services\n.\nGlobalWeather\n.\nGlobalWeatherSoap\n.\nGetWeather\n({\n\n  \nCityName\n \n:\n \nAmsterdam\n,\n\n  \nCountryName\n \n:\n \nNetherlands\n,\n\n\n});\n\n\n\n\n\nUsing as Data Source\n\n\nYou may also use the service methods to populate lists (for example DropDowns)\n\n\nAfter service is registered add a new data source as \"Web Service Query\"\n\n\nClick on \"Edit\" button to edit data source. Service method is now displayed on screen and specify input parameters.\n\n\nAdditional Options\n\n\nAll standard SOAP headers are automatically handled by system but in some scenarios you may need set additional SOAP headers transfer information.\n\n\nWhile invoking service after specifying request body you may give secondary object to as headers body. If service definition has matching header by name, specified value is imported to the SOAP message.\n\n\nvar\n \nresult\n \n=\n \n$Services\n.\nGlobalWeather\n.\nGlobalWeatherSoap\n.\nGetWeather\n({\n\n  \nCityName\n \n:\n \nAmsterdam\n,\n\n  \nCountryName\n \n:\n \nNetherlands\n,\n\n\n},\n \n{\n\n  \nMyHeader\n \n:\n \nMyHeaderValue\n\n\n});\n\n\n\n\n\nConsuming Rest Service\n\n\nRest services does not provide any discovery information and dynamically invoked.\n\n\nPlease refer to \n$Rest\n page to get information for consuming a rest service.", 
            "title": "Web Services"
        }, 
        {
            "location": "/ag/pm/web_services/#consuming-soap-service", 
            "text": "", 
            "title": "Consuming SOAP Service"
        }, 
        {
            "location": "/ag/pm/web_services/#calling-service-from-scripts", 
            "text": "After service is registered you can call the service from scripting environments including browser based client scripts.  var   result   =   $Services . GlobalWeather . GlobalWeatherSoap . GetWeather ({ \n   CityName   :   Amsterdam , \n   CountryName   :   Netherlands ,  });", 
            "title": "Calling Service from Scripts"
        }, 
        {
            "location": "/ag/pm/web_services/#using-as-data-source", 
            "text": "You may also use the service methods to populate lists (for example DropDowns)  After service is registered add a new data source as \"Web Service Query\"  Click on \"Edit\" button to edit data source. Service method is now displayed on screen and specify input parameters.", 
            "title": "Using as Data Source"
        }, 
        {
            "location": "/ag/pm/web_services/#additional-options", 
            "text": "All standard SOAP headers are automatically handled by system but in some scenarios you may need set additional SOAP headers transfer information.  While invoking service after specifying request body you may give secondary object to as headers body. If service definition has matching header by name, specified value is imported to the SOAP message.  var   result   =   $Services . GlobalWeather . GlobalWeatherSoap . GetWeather ({ \n   CityName   :   Amsterdam , \n   CountryName   :   Netherlands ,  },   { \n   MyHeader   :   MyHeaderValue  });", 
            "title": "Additional Options"
        }, 
        {
            "location": "/ag/pm/web_services/#consuming-rest-service", 
            "text": "Rest services does not provide any discovery information and dynamically invoked.  Please refer to  $Rest  page to get information for consuming a rest service.", 
            "title": "Consuming Rest Service"
        }, 
        {
            "location": "/ag/pm/data_templates/", 
            "text": "Data templates transforms the data model into text or HTML content. Templates are used in many areas in Workrunner like form controls or mail templates etc.\n\n\nTemplates basically consist on xpath queries within {{ and }} qualifiers.\n\n\nAssume you have a field named as \"username\" in data model. Basic temple example is:\n\n\nHello {{ username }}!\n\n\nThis template generates the following content if username field is set to \"Madonna\"\n\n\nHello Madonna!\n\n\nBecause all xml values are string by default no formatting performed while generating the output. If you need to perform formatting for number or date values you have to convert data type or use format function.\n\n\nCulture Support\n\n\nData templates are culture sensitive and all formatting rules are derived from culture being used. Culture information automatically derived from user preferences or you can explicitly specify. If no culture specified invariant culture is used.\n\n\nSelecting culture in scripting environment\n\n\nFormatting with specific culture\n\nvar\n \nmyNode\n \n=\n \n$Xml\n.\nParse\n(\nCustomer\nName\nJohn\n/Name\nBirthDate\n2014-01-31T09:00:00+02:00\n/BirthDate\n/Customer\n);\n\n\nvar\n \nresult\n \n=\n \nmyNode\n.\nFormat\n(\np\n{{Customer/BirthDate}}\n/p\n,\n \n{\n\n  \nCulture\n \n:\n \ntr-TR\n\n\n});\n\n\n// result : \np\n31.1.2014 09:00:00 +02:00\n/p\n\n\n\n\nData Type Formatting\n\n\nText Formatting\n\n\nAll text or string types are exactly transformed without any format performed.\n\n\nNumber formatting\n\n\nFunctions like \"Sum\" or \"Count\" already return number values therefore there is no need for number conversions but incase necessary number() function should be used. Ex: number(MyNumberField) \n\n\nAll number values are by default formatted with decimal rules.\n\n\nExamples:\n\n\n\n\n\n\n\n\nTemplate\n\n\nOutput\n\n\nCulture\n\n\n\n\n\n\n\n\n\n\n{{ 12345678912345 }}\n\n\n12345678912345\n\n\n\n\n\n\n\n\n{{ 123456.78912345 }}\n\n\n123456.78912345\n\n\n\n\n\n\n\n\n{{ number(123456.78912345678912345) }}\n\n\n123456.789123457\n\n\n\n\n\n\n\n\n{{ format( number(123456.789) ) }}\n\n\n123456.789\n\n\n\n\n\n\n\n\n{{ format( number(123456789) ) }}\n\n\n123456789\n\n\n\n\n\n\n\n\n{{ format( number(123456789), 'n') }}\n\n\n123,456,789.00\n\n\n\n\n\n\n\n\n{{ format( number(123456789), 'n') }}\n\n\n123.456.789,00\n\n\ntr-TR\n\n\n\n\n\n\n{{ format( number(123456789), 'n0') }}\n\n\n123,456,789\n\n\n\n\n\n\n\n\n{{ format(number(123456789), 'c') }}\n\n\n123.456.789,00 \u20ba\n\n\ntr-TR\n\n\n\n\n\n\n\n\nDate formatting\n\n\nTemplate system does automatically detects the xml date types in formatted with \"YYYY-MM-DD-THH:MM:SSTZ\". Workrunner always use this format in data model for date values.\n\n\nDate time values in other formats are interpreted as a text value.\n\n\nExamples:\n\n\nAssume data model has an MyDate field with 2014-01-31T09:00:00+02:00 value.\n\n\n\n\n\n\n\n\nTemplate\n\n\nOutput\n\n\nCulture\n\n\n\n\n\n\n\n\n\n\n{{ MyDate }}\n\n\n01/31/2014 16:04:12 +02:00\n\n\n\n\n\n\n\n\n{{ format(MyDate,'dd/MM/yyyy') }}\n\n\n31/01/2014\n\n\n\n\n\n\n\n\n{{ format(MyDate) }}\n\n\n31.1.2014 09:00\n\n\ntr-TR\n\n\n\n\n\n\n{{ format(MyDate,'d') }}\n\n\n31/01/2014\n\n\n\n\n\n\n\n\n{{ format(MyDate,'D') }}\n\n\nMonday, June 15, 2009\n\n\nen-US\n\n\n\n\n\n\n{{ format(MyDate,'o') }}\n\n\n2014-01-31T09:00:00+02:00\n\n\n\n\n\n\n\n\n\n\nScripting example\n\n\nvar\n \nmyNode\n \n=\n \n$Xml\n.\nParse\n(\nCustomer\nName\nJohn\n/Name\nBirthDate\n2014-01-31T09:00:00+02:00\n/BirthDate\n/Customer\n);\n\n\nvar\n \nresult\n \n=\n \nmyNode\n.\nFormat\n(\np\nBirth date : {{Customer/BirthDate}}\n/p\n);\n\n\n\n// result : \np\nBirth date : 01/31/2014 09:00:00 +02:00\n/p\n\n\n\n\n\nScripting example\n\nA way to remove time from date node\n\n\n$Xml\n.\nSetValue\n(\nTest/testdate\n,\n \nnew\n \nDateTimeOffset\n());\n  \n// testdate will be saved to XML as \n2015-11-12T15:27:16.2568549+02:00\n\n\n$Xml\n.\nSetValue\n(\nTest/testdate2\n,\n \n$Xml\n.\nFormat\n(\n{{ format(Test/testdate,\nyyyy-MM-dd\n) }}\n));\n  \n// testdate2 will be saved to XML as \n2015-12-11\n\n\n\n// result : 2015-12-11\n\n\n\n\n\nConditional Formatting\n\n\nIf conditional rendering needed format below can be used;\n\n\nif XPathConditon then Template\nif XPathConditon then Template else Template\n\n\n\n\nExamples: \n\n\nBasic usage\n\n\n{{ if Customer/Type = \nA\n then \ndiv\nImportant !\n/\ndiv\n }}\n\n\n\n\n\nBasic usage with else clause\n\n\n{{ if Customer/Type = \nA\n then \ndiv\nImportant !\n/\ndiv\n else \ndiv\n{{Customer/Name}}\n/\ndiv\n }}\n\n\n\n\n\nRepeating Template\n\n\nIf you need to apply template for multiple nodes in a data model you can use repeating template expression like following syntax:\n\n\nItemXPath =\n Template\n\n\n\n\nThis format applies same template for every matched element by ItemXPath.\n\n\nUsage\n\n\n{{ SAMPLE REPORT\n   \nh1\n{{Customer/Name}}\n/\nh1\n\n   \ntable\n\n   {{ Rows/Row =\n \n     \ntr\ntd\n{{Date}}\n/\ntd\ntd\n{{Description}}\n/\ntd\n/\ntr\n }}\n   \n/\ntable\n }}\n\n\n\nGenerates the following output:\n\n\nSAMPLE REPORT\n\nh1\nJohn\n/\nh1\n\n\ntable\n\n  \ntr\ntd\n2010-01-01\n/\ntd\ntd\ndescription\n/\ntd\n/\ntr\n\n  \ntr\ntd\n2015-01-01\n/\ntd\ntd\nother description\n/\ntd\n/\ntr\n\n\n/\ntable\n\n\n\n\n\nRepeating with attribute\n\n\nWhile generating HTML content some tags ( like table tag ) may become corrupted if {{ x =\n y}} template is used. As an alternative method format function supports the x-repeat attribute to perform repeating content. \n\n\n{{ SAMPLE REPORT\n   \ntable\n\n     \ntr\n \nx-repeat\n=\nRows/Row\n\n       \ntd\n{{Date}}\n/\ntd\ntd\n{{Description}}\n/\ntd\n\n     \n/\ntr\n\n   \n/\ntable\n }}\n\n\n\n\nThis attribute can be used with any element. For example can be used with \"li\" tag also.\n\n\n{{ \nul\n\n     \nli\n \nx-repeat\n=\nRows/Row\n\n       \nspan\n{{Date}}\n/\nspan\n\n     \n/\nli\n\n  \n/\nul\n }}\n\n\n\n\nRecursive Repeating Template\n\n\nIf recursive repeating templates needed format below can be used;\n\n\nItemXPath =\n Template\n\n\n\n\nFor each item at specified in ItemXPath sub template is generated and also same template is repeated again for Template content recursively.\n\n\n{{ \nh1\nSAMPLE REPORT\n/\nh1\n\n   {{ Sections/Section =\n \n      \nh2\n{{Name}}\n/\nh2\n\n      \np\n{{Body}}\n/\np\n  }}\n}}\n\n\n\n\nresult:\n\n\nh1\nSAMPLE REPORT\n/\nh1\n\n\nh2\nMy Section\n/\nh2\n\n\np\nSection content\n/\np\n\n\nh2\nSub Section\n/\nh2\n\n\np\nChild section content\n/\np\n\n\n\n\n\nTemplate Variables\n\n\nAll of custom defined process variables can be use in templates. Additionally some of system properties are automatically imported to template engine. Because of environment limits client and server side variables uses different variable contexts.\n\n\nClient Template Variables\n\n\nIn form scripts like form script, validation rules that running in client side environment following variables are defined;\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$staticUrl\n\n\nStatic resources base address. (ex: \nhttps://static.workrunner.io/\n )\n\n\n\n\n\n\n$applicationUrl\n\n\nApplication base address. (ex: \nhttps://mydomain.workrunner.io/app/\n )\n\n\n\n\n\n\n$Process\n\n\nUnique identifier of current process. (ex: 71E8B187-C049-4ba1-AE5E-6B0BAD6B7F42 )\n\n\n\n\n\n\n$FolderName\n\n\nName of current folder that process is saved. (ex: Customer Relations )\n\n\n\n\n\n\n$CustomVariable\n\n\nDefined custom value.\n\n\n\n\n\n\n\n\nServer Template Variables\n\n\nIn process scripts like pre work, post work and other scripts that running in server side environment following variables are defined;\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$ApplicationName\n\n\nName of application. (ex: workrunner.io )\n\n\n\n\n\n\n$ApplicationUrl\n\n\nBase url of application (ex: workrunner.io )\n\n\n\n\n\n\n$Domain.Name\n\n\nName of domain (ex: mydomain)\n\n\n\n\n\n\n$Domain.Url\n\n\nUrl of domain (ex: \nhttps://mydomain.workrunner.io\n )\n\n\n\n\n\n\n$Domain.LogoUrl\n\n\nLogo image url of domain (ex: \nhttps://mydomain.workrunner.io/logo.png\n )\n\n\n\n\n\n\n$CustomVariable\n\n\nDefined custom value.\n\n\n\n\n\n\n\n\nActivity Notification Template\n\n\nActivity notifications like assigning a work item to a user or reminder notifications uses same template context. Addition the server variables following variables also can be used;\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$Id\n\n\nId number of work item\n\n\n\n\n\n\n$WorkItem\n\n\nInstance of \nWorkItem\n. You can use . (dot) qualifier to access object properties like \"$WorkItem.Instance.Number\"\n\n\n\n\n\n\n$Recipients\n\n\nComma qualified recipient names. (ex: Mike Brown, Lisa Johnson)\n\n\n\n\n\n\n$Url\n\n\nUrl of work item. (ex: \nhttps://mydomain.workrunner.io/app/?/workitem=1234\n )\n\n\n\n\n\n\n$AssignedTo\n\n\nComma qualified user names of that work item assigned. (ex: Mike Brown)\n\n\n\n\n\n\n\n\nUser Registration Template\n\n\nAddition to server variables user registration invitation defines the following variables;\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$Ticket\n\n\nDefines the system generated authentication token to embed in mail content.\n\n\n\n\n\n\n$DisplayName\n\n\nDefines the display name of user.", 
            "title": "Data Templates"
        }, 
        {
            "location": "/ag/pm/data_templates/#culture-support", 
            "text": "Data templates are culture sensitive and all formatting rules are derived from culture being used. Culture information automatically derived from user preferences or you can explicitly specify. If no culture specified invariant culture is used.  Selecting culture in scripting environment  Formatting with specific culture var   myNode   =   $Xml . Parse ( Customer Name John /Name BirthDate 2014-01-31T09:00:00+02:00 /BirthDate /Customer );  var   result   =   myNode . Format ( p {{Customer/BirthDate}} /p ,   { \n   Culture   :   tr-TR  });  // result :  p 31.1.2014 09:00:00 +02:00 /p", 
            "title": "Culture Support"
        }, 
        {
            "location": "/ag/pm/data_templates/#data-type-formatting", 
            "text": "", 
            "title": "Data Type Formatting"
        }, 
        {
            "location": "/ag/pm/data_templates/#text-formatting", 
            "text": "All text or string types are exactly transformed without any format performed.", 
            "title": "Text Formatting"
        }, 
        {
            "location": "/ag/pm/data_templates/#number-formatting", 
            "text": "Functions like \"Sum\" or \"Count\" already return number values therefore there is no need for number conversions but incase necessary number() function should be used. Ex: number(MyNumberField)   All number values are by default formatted with decimal rules.  Examples:     Template  Output  Culture      {{ 12345678912345 }}  12345678912345     {{ 123456.78912345 }}  123456.78912345     {{ number(123456.78912345678912345) }}  123456.789123457     {{ format( number(123456.789) ) }}  123456.789     {{ format( number(123456789) ) }}  123456789     {{ format( number(123456789), 'n') }}  123,456,789.00     {{ format( number(123456789), 'n') }}  123.456.789,00  tr-TR    {{ format( number(123456789), 'n0') }}  123,456,789     {{ format(number(123456789), 'c') }}  123.456.789,00 \u20ba  tr-TR", 
            "title": "Number formatting"
        }, 
        {
            "location": "/ag/pm/data_templates/#date-formatting", 
            "text": "Template system does automatically detects the xml date types in formatted with \"YYYY-MM-DD-THH:MM:SSTZ\". Workrunner always use this format in data model for date values.  Date time values in other formats are interpreted as a text value.  Examples:  Assume data model has an MyDate field with 2014-01-31T09:00:00+02:00 value.     Template  Output  Culture      {{ MyDate }}  01/31/2014 16:04:12 +02:00     {{ format(MyDate,'dd/MM/yyyy') }}  31/01/2014     {{ format(MyDate) }}  31.1.2014 09:00  tr-TR    {{ format(MyDate,'d') }}  31/01/2014     {{ format(MyDate,'D') }}  Monday, June 15, 2009  en-US    {{ format(MyDate,'o') }}  2014-01-31T09:00:00+02:00      Scripting example  var   myNode   =   $Xml . Parse ( Customer Name John /Name BirthDate 2014-01-31T09:00:00+02:00 /BirthDate /Customer );  var   result   =   myNode . Format ( p Birth date : {{Customer/BirthDate}} /p );  // result :  p Birth date : 01/31/2014 09:00:00 +02:00 /p   Scripting example \nA way to remove time from date node  $Xml . SetValue ( Test/testdate ,   new   DateTimeOffset ());    // testdate will be saved to XML as  2015-11-12T15:27:16.2568549+02:00  $Xml . SetValue ( Test/testdate2 ,   $Xml . Format ( {{ format(Test/testdate, yyyy-MM-dd ) }} ));    // testdate2 will be saved to XML as  2015-12-11  // result : 2015-12-11", 
            "title": "Date formatting"
        }, 
        {
            "location": "/ag/pm/data_templates/#conditional-formatting", 
            "text": "If conditional rendering needed format below can be used;  if XPathConditon then Template\nif XPathConditon then Template else Template  Examples:   Basic usage  {{ if Customer/Type =  A  then  div Important ! / div  }}   Basic usage with else clause  {{ if Customer/Type =  A  then  div Important ! / div  else  div {{Customer/Name}} / div  }}", 
            "title": "Conditional Formatting"
        }, 
        {
            "location": "/ag/pm/data_templates/#repeating-template", 
            "text": "If you need to apply template for multiple nodes in a data model you can use repeating template expression like following syntax:  ItemXPath =  Template  This format applies same template for every matched element by ItemXPath.  Usage  {{ SAMPLE REPORT\n    h1 {{Customer/Name}} / h1 \n    table \n   {{ Rows/Row =  \n      tr td {{Date}} / td td {{Description}} / td / tr  }}\n    / table  }}  Generates the following output:  SAMPLE REPORT h1 John / h1  table \n   tr td 2010-01-01 / td td description / td / tr \n   tr td 2015-01-01 / td td other description / td / tr  / table", 
            "title": "Repeating Template"
        }, 
        {
            "location": "/ag/pm/data_templates/#repeating-with-attribute", 
            "text": "While generating HTML content some tags ( like table tag ) may become corrupted if {{ x =  y}} template is used. As an alternative method format function supports the x-repeat attribute to perform repeating content.   {{ SAMPLE REPORT\n    table \n      tr   x-repeat = Rows/Row \n        td {{Date}} / td td {{Description}} / td \n      / tr \n    / table  }}  This attribute can be used with any element. For example can be used with \"li\" tag also.  {{  ul \n      li   x-repeat = Rows/Row \n        span {{Date}} / span \n      / li \n   / ul  }}", 
            "title": "Repeating with attribute"
        }, 
        {
            "location": "/ag/pm/data_templates/#recursive-repeating-template", 
            "text": "If recursive repeating templates needed format below can be used;  ItemXPath =  Template  For each item at specified in ItemXPath sub template is generated and also same template is repeated again for Template content recursively.  {{  h1 SAMPLE REPORT / h1 \n   {{ Sections/Section =  \n       h2 {{Name}} / h2 \n       p {{Body}} / p   }}\n}}  result:  h1 SAMPLE REPORT / h1  h2 My Section / h2  p Section content / p  h2 Sub Section / h2  p Child section content / p", 
            "title": "Recursive Repeating Template"
        }, 
        {
            "location": "/ag/pm/data_templates/#template-variables", 
            "text": "All of custom defined process variables can be use in templates. Additionally some of system properties are automatically imported to template engine. Because of environment limits client and server side variables uses different variable contexts.", 
            "title": "Template Variables"
        }, 
        {
            "location": "/ag/pm/data_templates/#client-template-variables", 
            "text": "In form scripts like form script, validation rules that running in client side environment following variables are defined;     Variable Name  Description      $staticUrl  Static resources base address. (ex:  https://static.workrunner.io/  )    $applicationUrl  Application base address. (ex:  https://mydomain.workrunner.io/app/  )    $Process  Unique identifier of current process. (ex: 71E8B187-C049-4ba1-AE5E-6B0BAD6B7F42 )    $FolderName  Name of current folder that process is saved. (ex: Customer Relations )    $CustomVariable  Defined custom value.", 
            "title": "Client Template Variables"
        }, 
        {
            "location": "/ag/pm/data_templates/#server-template-variables", 
            "text": "In process scripts like pre work, post work and other scripts that running in server side environment following variables are defined;     Variable Name  Description      $ApplicationName  Name of application. (ex: workrunner.io )    $ApplicationUrl  Base url of application (ex: workrunner.io )    $Domain.Name  Name of domain (ex: mydomain)    $Domain.Url  Url of domain (ex:  https://mydomain.workrunner.io  )    $Domain.LogoUrl  Logo image url of domain (ex:  https://mydomain.workrunner.io/logo.png  )    $CustomVariable  Defined custom value.", 
            "title": "Server Template Variables"
        }, 
        {
            "location": "/ag/pm/data_templates/#activity-notification-template", 
            "text": "Activity notifications like assigning a work item to a user or reminder notifications uses same template context. Addition the server variables following variables also can be used;     Variable Name  Description      $Id  Id number of work item    $WorkItem  Instance of  WorkItem . You can use . (dot) qualifier to access object properties like \"$WorkItem.Instance.Number\"    $Recipients  Comma qualified recipient names. (ex: Mike Brown, Lisa Johnson)    $Url  Url of work item. (ex:  https://mydomain.workrunner.io/app/?/workitem=1234  )    $AssignedTo  Comma qualified user names of that work item assigned. (ex: Mike Brown)", 
            "title": "Activity Notification Template"
        }, 
        {
            "location": "/ag/pm/data_templates/#user-registration-template", 
            "text": "Addition to server variables user registration invitation defines the following variables;     Variable Name  Description      $Ticket  Defines the system generated authentication token to embed in mail content.    $DisplayName  Defines the display name of user.", 
            "title": "User Registration Template"
        }, 
        {
            "location": "/ag/pa/process_access_control_list/", 
            "text": "By default only system administrators are authorized to access and change process version codes. In order to change or extend this authorization you can edit Process Access Control List.\n\n\n\n\nSecurity Profile\n\nPremade security profiles are listed in this section. These profiles may consist of users, positions, departments, user groups and their access types. Security profiles can be managed from Edit Domain task at Administration.\n\n\nAdditional Permissions\n\nBesides security profiles, additional permissions may be given on this section.\n\n\nIdentity\n\nSelect user, position, department or user group to authorize.\n\n\nPermissions\n\nSelect a permission type to give selected Identity.\n\n\n\n\nRead\n: User can see starting points of only the processes that are in active mode and reports.\n\n\nAll\n: Users with this permission are called Process Administrators. These users may see and use the parts which are only authorised for process administrators. Starting points of the processes that are in test mode are also visible to this permission type.\n\n\n\n\n\n\nType\n\nChoose whether the user should or should not have the selected permission.\n\n\n\n\nAllow\n: Provides user the All or Read permission.\n\n\nDeny\n: Constrains user from accessing the process.\n\n\n\n\nBegins At\n\nStarting date of permission.\n\n\nExpires At\n\nEnding date of permission.", 
            "title": "Process Access Control List"
        }, 
        {
            "location": "/ag/pa/background_jobs/", 
            "text": "Workrunner performs most of heavy operations in background to achieve scalable and high performance output. These background operations are executed by Workrunner service agent without any user interaction.\n\n\nWhen a new process started by user, workflow state is recorded in database without any further processing and creates a couple of background jobs. Service agents pulls the jobs from queue and try to process in background. If an error occurs while processing job, transaction state is rollbacked and error state is reported to the system administrators. When administrator resolves the issue, job re-queued in system from job manager to process again. Some of errors are automatically recovered by system and queued again with time delay.\n\n\n \n\n\nService agents uses multiple threads and also can be deployed to any number of hardware instances to perform parallel execution. Jobs are executed in order of priority and a single service agent can complete 600 job per minute for basic workflow operations. This number is highly depends on job definition and hardware specifications.\n\n\nJob Details\n\n\nEach job has following properties;\n\n\nType\n\n\nType of job. \n\n\nCreated At\n\n\nDate and time of job is created.\n\n\nDelete After\n\n\nDate and time of job to delete.\n\n\nStarted At\n\n\nStart date and time of job.\n\n\nCompleted At\n\n\nCompletion date and time of job.\n\n\nDuration\n\n\nDuration of execution if job is completed or duration of wait time in queue.\n\n\nScore\n\n\nCalculated priority score. This value is calculated from job type priority and workflow instance priority.\n\n\nState\n\n\nState of job. Can be one of following values; Waiting, Processing, Error, Completed, Aborted.\n\n\nState Transition\n\n\nEvery job is created in \"Waiting\" state.\n\n\nWhen a service agent pulls the job from queue, agent locks the job and changes to \"Processing\" state.\n\n\nIf job is successfully completed state changes to \"Completed\".\n\n\nIf job generates an error, state changes to \"Error\" and system administrator is notified. Some of job errors are automatically handled. For example e-mail sending job errors are ignored and re-scheduled and state changes to \"Waiting\" to try again later. If maximum try count limit exceeded state is changed to \"Error\" or \"Aborted\" by configuration settings.\n\n\nFor \"Aborted\" and \"Completed\" states job is automatically deleted from system if \"Delete After\" date is passed.\n\n\n \n\n\nJob Log\n\n\nEach job contains a log about detailed information of what is performed in background. Each log line has a in log level like Debug,Information,Warning,Error.\n\n\n \n\n\nJob Types\n\n\nWorkflow Jobs\n\n\nScheduled Task\n\n\nTime based generic job. This job usually creates another jobs if any action required.\n\n\nTask Evaluation\n\n\nCreated when initiate type workflow task scheduled to start periodically. Created by Scheduled Task for per task definition. You can find more detail in \nTask Evaluation\n section. \n\n\nWork Item Evaluation\n\n\nCreated when normal type workflow task scheduled to check periodically. Created by Scheduled Task for per work item instance. You can find more detail in \nTask Evaluation\n section.\n\n\nWork Item Processing\n\n\nCreated when a user or system complete a work item. This job advances to next step in workflow and executes the scripts in workflow, calculates the role scripts to assign to task.\n\n\nDeadlined Work Item\n\n\nCreated when a work item's deadline occurs. This job is similar to \"Work Item Processing\" job but created when deadline date is missed.\n\n\nWork Item Reminder\n\n\nCreated when a task reminder need to be sent.\n\n\nXml Database Jobs\n\n\nForm Data Xml Database Replication\n\n\nCreated when workflow data need to be replicated on xml database. This job usually created when a workflow data is modified.\n\n\nInstance Xml Database Replication\n\n\nCreated when a workflow history is changed and need to be replicated on xml database.\n\n\nXml Database Removal\n\n\nCreated when a worfklow data is removed. This job is usually created when a process version is deleted from system.\n\n\nFull Text Indexing Jobs\n\n\nWork Item Full Text Indexing\n\n\nCreated when a workflow data is modified and updates the full text catalog.\n\n\nDocument Full Text Indexing\n\n\nCreated when a document content is modified and updates the full text catalog.\n\n\nFull Text Removal\n\n\nCreated when a previously added document is removed from full text catalog.\n\n\nDomain Jobs\n\n\nE-Mail Message Send\n\n\nCreated when an email message is sent. Email content may be automatically generated from workflow templates or scripting environment.\n\n\nDomain Upgrade\n\n\nCreated periodically to upgrade installed processes from market store.\n\n\nDomain Deletion\n\n\nCreated when a domain is expired and no longer active.\n\n\nDefault Job Configuration\n\n\nWorkrunner uses following default configuration to manage job queue.\n\n\n\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-yw4l{vertical-align:top}\n\n\n\n\n\n\n  \n\n    \nName\n\n    \nInternal Name\n\n    \nPriority\n\n    \nDelete\nAfter\n(days)\n(No)\n\n    \nRetry \nDuration \n(min)\n(No)\n\n    \nMax \nRetry\n(No)\n\n    \nMax \nRetry \nResult\n(Abort)\n\n    \nError \nResult\n(Error)\n\n    \nAlert \nError\n(True)\n\n    \nAlert \nAbort\n(False)\n\n  \n\n  \n\n    \nScheduled \nTask\n\n    \nWorkflow.ScheduledTask\n\n    \nHigh\n\n    \n90\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nTask \nEvaluation\n\n    \nWorkflow.Task.Evaluate\n\n    \nHigh\n\n    \n180\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nWork Item \nEvaluation\n\n    \nWorkflow.WorkItem.Evaluate\n\n    \nHigh\n\n    \n180\n\n    \n10\n\n    \n20\n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nWork Item \nProcessing\n\n    \nWorkflow.WorkItem.Process\n\n    \nHigh\n\n    \n180\n\n    \n10\n\n    \n20\n\n    \nError\n\n    \n\n    \n\n    \nTrue\n\n  \n\n  \n\n    \nDeadlined \nWork Item\n\n    \nWorkflow.WorkItem.Deadline\n\n    \nHigh\n\n    \n180\n\n    \n10\n\n    \n20\n\n    \n\n    \n\n    \n\n    \nTrue\n\n  \n\n  \n\n    \nWork Item \nReminder\n\n    \nWorkflow.WorkItem.Reminder\n\n    \nHigh\n\n    \n60\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nWork Item \nFull Text \nIndexing\n\n    \nWorkflow.WorkItem.FullText\n\n    \nLow\n\n    \n2\n\n    \n\n    \n10\n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nDocument \nFull Text \nIndexing\n\n    \nWorkflow.Document.FullText\n\n    \nLow\n\n    \n2\n\n    \n\n    \n20\n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nFull Text \nRemoval\n\n    \nWorkflow.FullText.Remover\n\n    \nLow\n\n    \n2\n\n    \n\n    \n10\n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nE-Mail \nMessage \nSend\n\n    \nWorkflow.Message.Send\n\n    \nLow\n\n    \n90\n\n    \n\n    \n10\n\n    \n\n    \n\n    \nFalse\n\n    \nFalse\n\n  \n\n  \n\n    \nDomain \nUpgrade\n\n    \nWorkflow.Domain.Upgrade\n\n    \nLow\n\n    \n180\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \nTrue\n\n  \n\n  \n\n    \nDomain \nDeletion\n\n    \nWorkflow.Domain.Delete\n\n    \nLow\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nForm Data \nXml \nDatabase \nReplication\n\n    \nWorkflow.FormData.XmlDatabase\n\n    \nNormal\n\n    \n2\n\n    \n\n    \n10\n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nInstance \nXml \nDatabase \nReplication\n\n    \nWorkflow.Instance.XmlDatabase\n\n    \nNormal\n\n    \n2\n\n    \n\n    \n10\n\n    \n\n    \n\n    \n\n    \n\n  \n\n    \n\n    \nXml \nDatabase \nRemoval\n\n    \nWorkflow.FormData.XmlDatabaseRemover\n\n    \nNormal\n\n    \n2\n\n    \n\n    \n10", 
            "title": "Background Jobs"
        }, 
        {
            "location": "/ag/pa/background_jobs/#job-details", 
            "text": "Each job has following properties;  Type  Type of job.   Created At  Date and time of job is created.  Delete After  Date and time of job to delete.  Started At  Start date and time of job.  Completed At  Completion date and time of job.  Duration  Duration of execution if job is completed or duration of wait time in queue.  Score  Calculated priority score. This value is calculated from job type priority and workflow instance priority.  State  State of job. Can be one of following values; Waiting, Processing, Error, Completed, Aborted.  State Transition  Every job is created in \"Waiting\" state.  When a service agent pulls the job from queue, agent locks the job and changes to \"Processing\" state.  If job is successfully completed state changes to \"Completed\".  If job generates an error, state changes to \"Error\" and system administrator is notified. Some of job errors are automatically handled. For example e-mail sending job errors are ignored and re-scheduled and state changes to \"Waiting\" to try again later. If maximum try count limit exceeded state is changed to \"Error\" or \"Aborted\" by configuration settings.  For \"Aborted\" and \"Completed\" states job is automatically deleted from system if \"Delete After\" date is passed.     Job Log  Each job contains a log about detailed information of what is performed in background. Each log line has a in log level like Debug,Information,Warning,Error.", 
            "title": "Job Details"
        }, 
        {
            "location": "/ag/pa/background_jobs/#job-types", 
            "text": "", 
            "title": "Job Types"
        }, 
        {
            "location": "/ag/pa/background_jobs/#workflow-jobs", 
            "text": "Scheduled Task  Time based generic job. This job usually creates another jobs if any action required.  Task Evaluation  Created when initiate type workflow task scheduled to start periodically. Created by Scheduled Task for per task definition. You can find more detail in  Task Evaluation  section.   Work Item Evaluation  Created when normal type workflow task scheduled to check periodically. Created by Scheduled Task for per work item instance. You can find more detail in  Task Evaluation  section.  Work Item Processing  Created when a user or system complete a work item. This job advances to next step in workflow and executes the scripts in workflow, calculates the role scripts to assign to task.  Deadlined Work Item  Created when a work item's deadline occurs. This job is similar to \"Work Item Processing\" job but created when deadline date is missed.  Work Item Reminder  Created when a task reminder need to be sent.", 
            "title": "Workflow Jobs"
        }, 
        {
            "location": "/ag/pa/background_jobs/#xml-database-jobs", 
            "text": "Form Data Xml Database Replication  Created when workflow data need to be replicated on xml database. This job usually created when a workflow data is modified.  Instance Xml Database Replication  Created when a workflow history is changed and need to be replicated on xml database.  Xml Database Removal  Created when a worfklow data is removed. This job is usually created when a process version is deleted from system.", 
            "title": "Xml Database Jobs"
        }, 
        {
            "location": "/ag/pa/background_jobs/#full-text-indexing-jobs", 
            "text": "Work Item Full Text Indexing  Created when a workflow data is modified and updates the full text catalog.  Document Full Text Indexing  Created when a document content is modified and updates the full text catalog.  Full Text Removal  Created when a previously added document is removed from full text catalog.", 
            "title": "Full Text Indexing Jobs"
        }, 
        {
            "location": "/ag/pa/background_jobs/#domain-jobs", 
            "text": "E-Mail Message Send  Created when an email message is sent. Email content may be automatically generated from workflow templates or scripting environment.  Domain Upgrade  Created periodically to upgrade installed processes from market store.  Domain Deletion  Created when a domain is expired and no longer active.", 
            "title": "Domain Jobs"
        }, 
        {
            "location": "/ag/pa/background_jobs/#default-job-configuration", 
            "text": "Workrunner uses following default configuration to manage job queue.  \n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-yw4l{vertical-align:top}  \n\n   \n     Name \n     Internal Name \n     Priority \n     Delete After (days) (No) \n     Retry  Duration  (min) (No) \n     Max  Retry (No) \n     Max  Retry  Result (Abort) \n     Error  Result (Error) \n     Alert  Error (True) \n     Alert  Abort (False) \n   \n   \n     Scheduled  Task \n     Workflow.ScheduledTask \n     High \n     90 \n     \n     \n     \n     \n     \n     \n   \n   \n     Task  Evaluation \n     Workflow.Task.Evaluate \n     High \n     180 \n     \n     \n     \n     \n     \n     \n   \n   \n     Work Item  Evaluation \n     Workflow.WorkItem.Evaluate \n     High \n     180 \n     10 \n     20 \n     \n     \n     \n     \n   \n   \n     Work Item  Processing \n     Workflow.WorkItem.Process \n     High \n     180 \n     10 \n     20 \n     Error \n     \n     \n     True \n   \n   \n     Deadlined  Work Item \n     Workflow.WorkItem.Deadline \n     High \n     180 \n     10 \n     20 \n     \n     \n     \n     True \n   \n   \n     Work Item  Reminder \n     Workflow.WorkItem.Reminder \n     High \n     60 \n     \n     \n     \n     \n     \n     \n   \n   \n     Work Item  Full Text  Indexing \n     Workflow.WorkItem.FullText \n     Low \n     2 \n     \n     10 \n     \n     \n     \n     \n   \n   \n     Document  Full Text  Indexing \n     Workflow.Document.FullText \n     Low \n     2 \n     \n     20 \n     \n     \n     \n     \n   \n   \n     Full Text  Removal \n     Workflow.FullText.Remover \n     Low \n     2 \n     \n     10 \n     \n     \n     \n     \n   \n   \n     E-Mail  Message  Send \n     Workflow.Message.Send \n     Low \n     90 \n     \n     10 \n     \n     \n     False \n     False \n   \n   \n     Domain  Upgrade \n     Workflow.Domain.Upgrade \n     Low \n     180 \n     \n     \n     \n     \n     \n     True \n   \n   \n     Domain  Deletion \n     Workflow.Domain.Delete \n     Low \n     \n     \n     \n     \n     \n     \n     \n   \n   \n     Form Data  Xml  Database  Replication \n     Workflow.FormData.XmlDatabase \n     Normal \n     2 \n     \n     10 \n     \n     \n     \n     \n   \n   \n     Instance  Xml  Database  Replication \n     Workflow.Instance.XmlDatabase \n     Normal \n     2 \n     \n     10 \n     \n     \n     \n     \n   \n     \n     Xml  Database  Removal \n     Workflow.FormData.XmlDatabaseRemover \n     Normal \n     2 \n     \n     10", 
            "title": "Default Job Configuration"
        }, 
        {
            "location": "/ag/is/embedding_workrunner/", 
            "text": "With embedded forms you can display Workrunner forms in other applications in HTML iframe.\n\n\nEmbedded form layout can be accessed from \nhttp(s)://\nmydomain\n.workrunner.io/app/embed.asmx\n url. Embedded layout does not show any side bar and only shows to main content of form with optionally actions. Example view of embedded layout of a form.\n\n\n\n\nAuthentication\n\n\nEmbedded forms needs valid authentication, if user is not logged in before, browser automatically redirected to login page. Alternatively you can specify an authentication token to login user automatically and skip login page.\n\n\nExample embedded page url with authentication token;\n\n\nhttp://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d\nauth=41AA3CE3CAFB..............BF8114\n\n\n\n\nYou can generate required authentication token with \ngetToken method in rest service\n. \n\n\nGenerated authentication tokens are limited to configured based time period and they can be expire. Please always generate new tokens as long as needed and do not store in any place like disk or code.\n\n\nEmbedding Form\n\n\nYou can embed Workrunner forms in a basic HTML IFrame tag like below;\n\n\nExample:\n\n\nhtml\n\n    \nbody\n\n        Hello!\n        \niframe\n \nsrc\n=\nhttp://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d\n \nwidth\n=\n100%\n \nheight\n=\n600\n \nframeborder\n=\n0\n/\niframe\n\n    \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\nDefault configuration is prevents the use Workrunner in IFrame tag because of security. If you get any error please try to remove \"X-XFrame-Options\" header from your web configuration file to allow to use Workrunner in iframe tag.\n\n\nAction Toolbar\n\n\nBy default Workrunner does not show action toolbar of work items. If want to show action toolbar you can specify \"\nactions=1\n\" parameter in query string to show action toolbar.\n\n\nExample:\n\n\nhtml\n\n    \nbody\n\n        Hello!\n        \niframe\n \nsrc\n=\nhttp://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d\nactions=1\n \nwidth\n=\n100%\n \nheight\n=\n600\n \nframeborder\n=\n0\n/\niframe\n\n    \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\nReturn Address\n\n\nYou can specify \"\nreturnUrl\n\" parameter in query string to redirect user another address after form is completed. This parameter is only meaningful if action toolbar is visible.\n\n\nExample:\n\n\nhtml\n\n    \nbody\n\n        Hello!\n        \niframe\n \nsrc\n=\nhttp://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d\nactions=1\nreturnUrl=http://localhost\n \nwidth\n=\n100%\n \nheight\n=\n600\n \nframeborder\n=\n0\n/\niframe\n\n    \n/\nbody\n\n\n/\nhtml", 
            "title": "Embedding Workrunner"
        }, 
        {
            "location": "/ag/is/embedding_workrunner/#authentication", 
            "text": "Embedded forms needs valid authentication, if user is not logged in before, browser automatically redirected to login page. Alternatively you can specify an authentication token to login user automatically and skip login page.  Example embedded page url with authentication token;  http://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d auth=41AA3CE3CAFB..............BF8114  You can generate required authentication token with  getToken method in rest service .   Generated authentication tokens are limited to configured based time period and they can be expire. Please always generate new tokens as long as needed and do not store in any place like disk or code.", 
            "title": "Authentication"
        }, 
        {
            "location": "/ag/is/embedding_workrunner/#embedding-form", 
            "text": "You can embed Workrunner forms in a basic HTML IFrame tag like below;  Example:  html \n     body \n        Hello!\n         iframe   src = http://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d   width = 100%   height = 600   frameborder = 0 / iframe \n     / body  / html   Default configuration is prevents the use Workrunner in IFrame tag because of security. If you get any error please try to remove \"X-XFrame-Options\" header from your web configuration file to allow to use Workrunner in iframe tag.", 
            "title": "Embedding Form"
        }, 
        {
            "location": "/ag/is/embedding_workrunner/#action-toolbar", 
            "text": "By default Workrunner does not show action toolbar of work items. If want to show action toolbar you can specify \" actions=1 \" parameter in query string to show action toolbar.  Example:  html \n     body \n        Hello!\n         iframe   src = http://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d actions=1   width = 100%   height = 600   frameborder = 0 / iframe \n     / body  / html", 
            "title": "Action Toolbar"
        }, 
        {
            "location": "/ag/is/embedding_workrunner/#return-address", 
            "text": "You can specify \" returnUrl \" parameter in query string to redirect user another address after form is completed. This parameter is only meaningful if action toolbar is visible.  Example:  html \n     body \n        Hello!\n         iframe   src = http://mycompany.workrunner.io/app/embed.aspx?/workitem/d4c1adc7-c9d2-4af0-a2b3-b6d61d88df6d actions=1 returnUrl=http://localhost   width = 100%   height = 600   frameborder = 0 / iframe \n     / body  / html", 
            "title": "Return Address"
        }, 
        {
            "location": "/ag/is/google_service_authentication/", 
            "text": "This document describes the allow Google APIs server to server access for Workrunner rest clients.\n\n\nCreating a Service Account\n\n\nBefore allowing the access you need to register Workrunner as application. This step is already configured for cloud configuration and required only for on-premises.\n\n\n\n\nLogin to \nhttps://console.cloud.google.com\n\n\nPlease select \"Service Accounts\" from \"IAM \n Admin\" menu.\n\n\nClick on \"Create Service Account\" button and specify the name of service account.  (Ex: Workrunner)\n\n\nCheck \"Furnish a new private key\" and \"Enable G Suite Domain-Wide Delegation\"\n\n\nPlease select \"Key type\" as P12\n\n\nPlease note the \"Service Account Id\" for later use.\n\n\nClick on Create Account to download p12 file.\n\n\n\n\nConfiguring Workrunner for Google Login Service\n\n\n\n\nStart a new Edit Domain task from Administration menu.\n\n\nExpand the Google Login Service\n\n\nEnter the registered google credentials. \n \n\n\n\n\n\n\nIn service account key; you can specify in following formats;\n\n\n\n\nIf certificate is stored in local server \n\n    \nFILE;\nCertificateFilePath\n;\nCertificatePassword\n\n\nIf you dont have local access to server you can also specify with \n\n    \nBASE64;\nCertificateBase64\n;\nCertificatePassword\n \n \n    \nURL;\nCertificateFileUrl\n;\nCertificatePassword\n\n\n\n\n\n\n\n\nConfiguring Workrunner for Google Drive Integration\n\n\n\n\nIf you want to enable Google Drive; in fileServices add new element as below;\n\n\n\n\nfileServices\n\n  \nadd\n \nclientType\n=\nDesktop\n \n/\n\n  \nadd\n \nclientType\n=\nWebcam\n \n/\n\n  \nadd\n \nclientType\n=\nGoogleDrive\n \nscope\n=\nhttps://www.googleapis.com/auth/drive\n/\n\n\n/\nfileServices\n\n\n\n2. If you want to allow offline access to API without user interaction please add \"offline\" scope with space separated.\n\n\nRelated articles\n\n\n\n\n$Rest\n\n\nRestRequest.PutAsync\n\n\nRestRequest.PostAsync\n\n\nRestRequest.PatchAsync\n\n\nRestRequest.ExecuteAsync", 
            "title": "Google Service Authentication"
        }, 
        {
            "location": "/ag/is/google_service_authentication/#creating-a-service-account", 
            "text": "Before allowing the access you need to register Workrunner as application. This step is already configured for cloud configuration and required only for on-premises.   Login to  https://console.cloud.google.com  Please select \"Service Accounts\" from \"IAM   Admin\" menu.  Click on \"Create Service Account\" button and specify the name of service account.  (Ex: Workrunner)  Check \"Furnish a new private key\" and \"Enable G Suite Domain-Wide Delegation\"  Please select \"Key type\" as P12  Please note the \"Service Account Id\" for later use.  Click on Create Account to download p12 file.", 
            "title": "Creating a Service Account"
        }, 
        {
            "location": "/ag/is/google_service_authentication/#configuring-workrunner-for-google-login-service", 
            "text": "Start a new Edit Domain task from Administration menu.  Expand the Google Login Service  Enter the registered google credentials.       In service account key; you can specify in following formats;   If certificate is stored in local server  \n     FILE; CertificateFilePath ; CertificatePassword  If you dont have local access to server you can also specify with  \n     BASE64; CertificateBase64 ; CertificatePassword    \n     URL; CertificateFileUrl ; CertificatePassword", 
            "title": "Configuring Workrunner for Google Login Service"
        }, 
        {
            "location": "/ag/is/google_service_authentication/#configuring-workrunner-for-google-drive-integration", 
            "text": "If you want to enable Google Drive; in fileServices add new element as below;   fileServices \n   add   clientType = Desktop   / \n   add   clientType = Webcam   / \n   add   clientType = GoogleDrive   scope = https://www.googleapis.com/auth/drive /  / fileServices  \n2. If you want to allow offline access to API without user interaction please add \"offline\" scope with space separated.", 
            "title": "Configuring Workrunner for Google Drive Integration"
        }, 
        {
            "location": "/ag/is/google_service_authentication/#related-articles", 
            "text": "$Rest  RestRequest.PutAsync  RestRequest.PostAsync  RestRequest.PatchAsync  RestRequest.ExecuteAsync", 
            "title": "Related articles"
        }, 
        {
            "location": "/ag/is/office365_service_authentication/", 
            "text": "Creating Service Account\n\n\nBefore allowing the access you need to register Workrunner as application. This step is already configured for cloud configuration and required only for on-premises.\n\n\n\n\nLogin to \nhttps://apps.dev.microsoft.com\n\n\nSelect type of application as \"Web\"\n\n\nEnter name of application (ex: Workrunner)\n\n\n\n\nEnter callback paths as following addresses\n\n\n\n\nhttps://workrunner.io/oauth/callback\n\n\nhttp://workrunner.io/oauth/callback\n\n\nhttps://www.workrunner.io/oauth/callback\n\n\nhttp://www.workrunner.io/oauth/callback\n\n\n\n\n\n\n\n\nCreate a new application secret by clicking on \"Generate New Key Pair\"\n\n\n\n\nDownload the generated PFX file.\n\n\n\n\nConfiguring Workrunner for Office365 Login Service\n\n\n\n\nStart a new Edit Domain task from Administration menu.\n\n\nExpand the Office 365 login service\n\n\nEnter the registered Office 365 credentials \n\n\n\n\n\n\nIn service account key; you can specify in following formats;\n\n\n\n\nIf certificate is stored in local server\n\n\nFILE;\nCertificateFilePath\n;\nCertificatePassword\n\n\nIf you dont have local access to server you can also specify with \n\n  \nBASE64;\nCertificateBase64\n;\nCertificatePassword\n\n  \nURL;\nCertificateFileUrl\n;\nCertificatePassword\n\n\n\n\n\n\n\n\nConfiguring Workrunner for One Drive for Business Integration\n\n\n\n\nIf you want to enable One Drive; add new element into fileServices section.\n\nfileServices\n\n  \nadd\n \nclientType\n=\nDesktop\n \n/\n\n  \nadd\n \nclientType\n=\nWebcam\n \n/\n\n  \nadd\n \nclientType\n=\nOneDrive\n \nscope\n=\nFiles.Read.All\n/\n\n\n/\nfileServices\n\n\n\n\nIf you want to allow offline access to OneDrive API without user interaction please add \"offline\" scope with space seperated.\n\n\n\n\nRelated articles\n\n\n\n\n$Rest\n\n\nRestRequest.PutAsync\n\n\nRestRequest.PostAsync\n\n\nRestRequest.PatchAsync\n\n\nRestRequest.ExecuteAsync", 
            "title": "Office365 Service Authentication"
        }, 
        {
            "location": "/ag/is/office365_service_authentication/#creating-service-account", 
            "text": "Before allowing the access you need to register Workrunner as application. This step is already configured for cloud configuration and required only for on-premises.   Login to  https://apps.dev.microsoft.com  Select type of application as \"Web\"  Enter name of application (ex: Workrunner)   Enter callback paths as following addresses   https://workrunner.io/oauth/callback  http://workrunner.io/oauth/callback  https://www.workrunner.io/oauth/callback  http://www.workrunner.io/oauth/callback     Create a new application secret by clicking on \"Generate New Key Pair\"   Download the generated PFX file.", 
            "title": "Creating Service Account"
        }, 
        {
            "location": "/ag/is/office365_service_authentication/#configuring-workrunner-for-office365-login-service", 
            "text": "Start a new Edit Domain task from Administration menu.  Expand the Office 365 login service  Enter the registered Office 365 credentials     In service account key; you can specify in following formats;   If certificate is stored in local server  FILE; CertificateFilePath ; CertificatePassword  If you dont have local access to server you can also specify with  \n   BASE64; CertificateBase64 ; CertificatePassword \n   URL; CertificateFileUrl ; CertificatePassword", 
            "title": "Configuring Workrunner for Office365 Login Service"
        }, 
        {
            "location": "/ag/is/office365_service_authentication/#configuring-workrunner-for-one-drive-for-business-integration", 
            "text": "If you want to enable One Drive; add new element into fileServices section. fileServices \n   add   clientType = Desktop   / \n   add   clientType = Webcam   / \n   add   clientType = OneDrive   scope = Files.Read.All /  / fileServices   If you want to allow offline access to OneDrive API without user interaction please add \"offline\" scope with space seperated.", 
            "title": "Configuring Workrunner for One Drive for Business Integration"
        }, 
        {
            "location": "/ag/is/office365_service_authentication/#related-articles", 
            "text": "$Rest  RestRequest.PutAsync  RestRequest.PostAsync  RestRequest.PatchAsync  RestRequest.ExecuteAsync", 
            "title": "Related articles"
        }, 
        {
            "location": "/ag/is/rest_services/", 
            "text": "", 
            "title": "Rest Services"
        }, 
        {
            "location": "/ag/sa/system_administration/", 
            "text": "Administration part is a system control mechanism and is managed with five pre-built business processes in Workrunner. Other administration part specify is to analysis \nbackground jobs\n situation with graphic diagrams.\n\n\nJob States\n\n\nJob states graphic is exhibited each of background job situation and name. Background job names are separated from each other with different color.\n\n\n\n\nWaiting; each background job at waiting state is shown in different color, when you hover over the color with mouse you will see job name and job count.\n\n\nProcessing;  each background job at processing state is shown in different color, when you hover over the color with mouse you will see job name and job count.\n\n\nError; each background job at error state is shown in different color, when you hover over the color with mouse you will see job name and job count.\n\n\nCompleted;each background job at completed state is shown in different color, when you hover over the color with mouse you will see job name and job count.\n\n\n\n\n\n\nJob Counts\n\n\nJob counts graphic is exhibited each of background job count and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and job count.\n\n\n\n\nJob Completion Duration\n\n\nJob completion duration graphic is exhibited to each of completed background job total time and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and total of job completion duration.\n\n\n\n\nJob Wait Duration In Queue\n\n\nJob wait duration in queue graphic is exhibited to each of background job wait duration in queue total time and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and total of job wait duration in queue.\n\n\n\n\nYou can use chart context menu for some operations in the graphic diagrams.\n\n\nChart Context Menu\n\n\nSymbol: \n\n\nChart context menu enables to print and to download operations. \n\n\n\n\nPrint chart\n\n\nDownload PNG image\n\n\nDownload JPEG image\n\n\nDownload PDF document\n\n\nDownload SVG vector image", 
            "title": "Overview"
        }, 
        {
            "location": "/ag/sa/system_administration/#job-states", 
            "text": "Job states graphic is exhibited each of background job situation and name. Background job names are separated from each other with different color.   Waiting; each background job at waiting state is shown in different color, when you hover over the color with mouse you will see job name and job count.  Processing;  each background job at processing state is shown in different color, when you hover over the color with mouse you will see job name and job count.  Error; each background job at error state is shown in different color, when you hover over the color with mouse you will see job name and job count.  Completed;each background job at completed state is shown in different color, when you hover over the color with mouse you will see job name and job count.", 
            "title": "Job States"
        }, 
        {
            "location": "/ag/sa/system_administration/#job-counts", 
            "text": "Job counts graphic is exhibited each of background job count and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and job count.", 
            "title": "Job Counts"
        }, 
        {
            "location": "/ag/sa/system_administration/#job-completion-duration", 
            "text": "Job completion duration graphic is exhibited to each of completed background job total time and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and total of job completion duration.", 
            "title": "Job Completion Duration"
        }, 
        {
            "location": "/ag/sa/system_administration/#job-wait-duration-in-queue", 
            "text": "Job wait duration in queue graphic is exhibited to each of background job wait duration in queue total time and name. Background job names are separated from each other with different color. When you hover over on the color with mouse you will see job date, job name and total of job wait duration in queue.   You can use chart context menu for some operations in the graphic diagrams.", 
            "title": "Job Wait Duration In Queue"
        }, 
        {
            "location": "/ag/sa/system_administration/#chart-context-menu", 
            "text": "Symbol:   Chart context menu enables to print and to download operations.    Print chart  Download PNG image  Download JPEG image  Download PDF document  Download SVG vector image", 
            "title": "Chart Context Menu"
        }, 
        {
            "location": "/ag/sa/organization_database_designer/", 
            "text": "", 
            "title": "Organization Database Designer"
        }, 
        {
            "location": "/ag/sa/organization_units/", 
            "text": "", 
            "title": "Organization Units"
        }, 
        {
            "location": "/ag/sa/positions/", 
            "text": "", 
            "title": "Positions"
        }, 
        {
            "location": "/ag/sa/users/", 
            "text": "", 
            "title": "Users"
        }, 
        {
            "location": "/ag/sa/employee/", 
            "text": "", 
            "title": "Employee"
        }, 
        {
            "location": "/ag/sa/edit_domain/", 
            "text": "", 
            "title": "Edit Domain"
        }, 
        {
            "location": "/ag/sa/edit_groups/", 
            "text": "", 
            "title": "Edit Groups"
        }, 
        {
            "location": "/ag/sa/background_jobs_manager/", 
            "text": "Background jobs manager allows to view and manage background jobs. It consists of two part; filter and results.\n\n\nFilter\n\n\nFilter part defines the searching criterions for find intended jobs in the background jobs manager step. Searching criterions are work type, date start, date end, show and log text content.\n\n\n\n\nWork Type\n\nSpecifies the type of backgrounds job. When you click the arrow button, the background work type list will open. \n\n\n\n\nDate Start\n\nSpecifies the start date of background job.\n\n\nDate End\n\nSpecifies the end date of background job. Only completed background jobs have end date, otherwise end date is null.\n\n\nShow\n\nShow title has five options for to following back ground jobs. If you click the any option, the related option of jobs will be listed under the results title. \n\n\nLog Text Content\n\nSearch term to filter by job execution log.\n\n\nResults\n\n\nResults part lists of background jobs features. Features title are the work type, the started at, the completed at, the duration and the state.\n\n\n\n\nSelect to perform batch operation\n\nThis feature consists of two part for to change of job situation.\n\n\n\n\nSet all to waiting, to change all job situation the waiting state.\n\n\nSet all to aborted, to change all job situation the aborted state.\n\n\n\n\nSearch\n\nUse to find any back ground job in the listed background jobs.\n\n\nWork Type\n\nJob is a work of type.\n\n\nStarted At\n\nJob is a started of date.\n\n\nCompleted At\n\nJob is an ended of date.\n\n\nDuration\n\nJob is the permanence time.\n\n\nState\n\nJob is a situation in the background. State features are:\n\n\n\n\n\n\n\n\nState\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n\n\nWaiting describes the pending jobs.\n\n\n\n\n\n\n\n\nProcessing describes the continuing jobs.\n\n\n\n\n\n\n\n\nError describes the false jobs.\n\n\n\n\n\n\n\n\nCompleted describes the finished jobs.\n\n\n\n\n\n\n\n\nAborted describes the canceled jobs.\n\n\n\n\n\n\n\n\nState\n\nThis field help to change an error job state in the background. You will see two button, those are:\n\n\n\n\n\n\n\n\nState\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n\n\nIf you click this button, system will change job situation the  error from the waiting.\n\n\n\n\n\n\n\n\nIf you click this button, system will change job situation the error from the aborted.\n\n\n\n\n\n\n\n\nBackground job manager part further information \nhere\n.", 
            "title": "Jobs Manager"
        }, 
        {
            "location": "/ag/sa/background_jobs_manager/#filter", 
            "text": "Filter part defines the searching criterions for find intended jobs in the background jobs manager step. Searching criterions are work type, date start, date end, show and log text content.   Work Type \nSpecifies the type of backgrounds job. When you click the arrow button, the background work type list will open.    Date Start \nSpecifies the start date of background job.  Date End \nSpecifies the end date of background job. Only completed background jobs have end date, otherwise end date is null.  Show \nShow title has five options for to following back ground jobs. If you click the any option, the related option of jobs will be listed under the results title.   Log Text Content \nSearch term to filter by job execution log.", 
            "title": "Filter"
        }, 
        {
            "location": "/ag/sa/background_jobs_manager/#results", 
            "text": "Results part lists of background jobs features. Features title are the work type, the started at, the completed at, the duration and the state.   Select to perform batch operation \nThis feature consists of two part for to change of job situation.   Set all to waiting, to change all job situation the waiting state.  Set all to aborted, to change all job situation the aborted state.   Search \nUse to find any back ground job in the listed background jobs.  Work Type \nJob is a work of type.  Started At \nJob is a started of date.  Completed At \nJob is an ended of date.  Duration \nJob is the permanence time.  State \nJob is a situation in the background. State features are:     State  Definition       Waiting describes the pending jobs.     Processing describes the continuing jobs.     Error describes the false jobs.     Completed describes the finished jobs.     Aborted describes the canceled jobs.     State \nThis field help to change an error job state in the background. You will see two button, those are:     State  Definition       If you click this button, system will change job situation the  error from the waiting.     If you click this button, system will change job situation the error from the aborted.     Background job manager part further information  here .", 
            "title": "Results"
        }, 
        {
            "location": "/ag/sa/job_details/", 
            "text": "", 
            "title": "Job Details"
        }, 
        {
            "location": "/ag/sa/search_work_item/", 
            "text": "", 
            "title": "Search Work Item"
        }, 
        {
            "location": "/su/workrunner_qa/", 
            "text": "", 
            "title": "Workrunner Q&A"
        }, 
        {
            "location": "/su/support_site/", 
            "text": "", 
            "title": "Support Site"
        }, 
        {
            "location": "/ho/edit_organization_unit_part/", 
            "text": "", 
            "title": "How to Edit Organization Unit Part"
        }, 
        {
            "location": "/ho/manage_users_positions/", 
            "text": "", 
            "title": "How to Manage Users Positions"
        }, 
        {
            "location": "/ho/edit_users_part/", 
            "text": "", 
            "title": "How to Edit Users Part"
        }, 
        {
            "location": "/ho/manage_edit_groups_part/", 
            "text": "", 
            "title": "How to Manage Edit Groups Part"
        }, 
        {
            "location": "/ho/edit_working_calendar/", 
            "text": "", 
            "title": "How to Edit Working Calendar"
        }, 
        {
            "location": "/ho/change_workrunner_system_theme/", 
            "text": "", 
            "title": "How to Change Workrunner System Theme"
        }, 
        {
            "location": "/ho/change_system_logo/", 
            "text": "", 
            "title": "How to Change System Logo"
        }, 
        {
            "location": "/ho/create_theme_style_with_css/", 
            "text": "", 
            "title": "How to Create a New Theme Style With CSS"
        }, 
        {
            "location": "/ho/manage_domain_login_methods/", 
            "text": "", 
            "title": "How to Manage Domain Login Methods"
        }, 
        {
            "location": "/ho/create_folder/", 
            "text": "", 
            "title": "Create Folder"
        }, 
        {
            "location": "/ho/create_process_diagram/", 
            "text": "", 
            "title": "Create Process Diagram"
        }, 
        {
            "location": "/ho/create_data_model/", 
            "text": "", 
            "title": "Create Data Model"
        }, 
        {
            "location": "/ho/create_forms/", 
            "text": "", 
            "title": "Create Forms"
        }
    ]
}